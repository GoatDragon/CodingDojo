Help on package django.db.models in django.db:

NNAAMMEE
    django.db.models

PPAACCKKAAGGEE  CCOONNTTEENNTTSS
    aggregates
    base
    constants
    constraints
    deletion
    expressions
    fields (package)
    functions (package)
    indexes
    lookups
    manager
    options
    query
    query_utils
    signals
    sql (package)
    utils

CCLLAASSSSEESS
    builtins.Exception(builtins.BaseException)
        django.core.exceptions.FieldDoesNotExist
        django.core.exceptions.ObjectDoesNotExist
    builtins.object
        django.db.models.base.Model
        django.db.models.fields.Empty
        django.db.models.fields.NOT_PROVIDED
        django.db.models.indexes.Index
        django.db.models.lookups.Lookup
        django.db.models.query.Prefetch
        django.db.models.query.QuerySet
        django.db.models.query_utils.FilteredRelation
    django.db.models.constraints.BaseConstraint(builtins.object)
        django.db.models.constraints.CheckConstraint
        django.db.models.constraints.UniqueConstraint
    django.db.models.expressions.BaseExpression(builtins.object)
        django.db.models.expressions.Expression(django.db.models.expressions.BaseExpression, django.db.models.expressions.Combinable)
            django.db.models.expressions.Case
            django.db.models.expressions.ExpressionWrapper
            django.db.models.expressions.Func(django.db.models.expressions.SQLiteNumericMixin, django.db.models.expressions.Expression)
                django.db.models.aggregates.Aggregate
                    django.db.models.aggregates.Avg(django.db.models.functions.mixins.FixDurationInputMixin, django.db.models.functions.mixins.NumericOutputFieldMixin, django.db.models.aggregates.Aggregate)
                    django.db.models.aggregates.Count
                    django.db.models.aggregates.Max
                    django.db.models.aggregates.Min
                    django.db.models.aggregates.StdDev(django.db.models.functions.mixins.NumericOutputFieldMixin, django.db.models.aggregates.Aggregate)
                    django.db.models.aggregates.Sum(django.db.models.functions.mixins.FixDurationInputMixin, django.db.models.aggregates.Aggregate)
                    django.db.models.aggregates.Variance(django.db.models.functions.mixins.NumericOutputFieldMixin, django.db.models.aggregates.Aggregate)
                django.db.models.expressions.ExpressionList
                django.db.models.lookups.Transform(django.db.models.query_utils.RegisterLookupMixin, django.db.models.expressions.Func)
            django.db.models.expressions.Subquery
                django.db.models.expressions.Exists
            django.db.models.expressions.Value
            django.db.models.expressions.When
            django.db.models.expressions.Window
            django.db.models.expressions.WindowFrame
                django.db.models.expressions.RowRange
                django.db.models.expressions.ValueRange
    django.db.models.expressions.Combinable(builtins.object)
        django.db.models.expressions.Expression(django.db.models.expressions.BaseExpression, django.db.models.expressions.Combinable)
            django.db.models.expressions.Case
            django.db.models.expressions.ExpressionWrapper
            django.db.models.expressions.Func(django.db.models.expressions.SQLiteNumericMixin, django.db.models.expressions.Expression)
                django.db.models.aggregates.Aggregate
                    django.db.models.aggregates.Avg(django.db.models.functions.mixins.FixDurationInputMixin, django.db.models.functions.mixins.NumericOutputFieldMixin, django.db.models.aggregates.Aggregate)
                    django.db.models.aggregates.Count
                    django.db.models.aggregates.Max
                    django.db.models.aggregates.Min
                    django.db.models.aggregates.StdDev(django.db.models.functions.mixins.NumericOutputFieldMixin, django.db.models.aggregates.Aggregate)
                    django.db.models.aggregates.Sum(django.db.models.functions.mixins.FixDurationInputMixin, django.db.models.aggregates.Aggregate)
                    django.db.models.aggregates.Variance(django.db.models.functions.mixins.NumericOutputFieldMixin, django.db.models.aggregates.Aggregate)
                django.db.models.expressions.ExpressionList
                django.db.models.lookups.Transform(django.db.models.query_utils.RegisterLookupMixin, django.db.models.expressions.Func)
            django.db.models.expressions.Subquery
                django.db.models.expressions.Exists
            django.db.models.expressions.Value
            django.db.models.expressions.When
            django.db.models.expressions.Window
            django.db.models.expressions.WindowFrame
                django.db.models.expressions.RowRange
                django.db.models.expressions.ValueRange
        django.db.models.expressions.F
            django.db.models.expressions.OuterRef
    django.db.models.expressions.SQLiteNumericMixin(builtins.object)
        django.db.models.expressions.Func(django.db.models.expressions.SQLiteNumericMixin, django.db.models.expressions.Expression)
            django.db.models.aggregates.Aggregate
                django.db.models.aggregates.Avg(django.db.models.functions.mixins.FixDurationInputMixin, django.db.models.functions.mixins.NumericOutputFieldMixin, django.db.models.aggregates.Aggregate)
                django.db.models.aggregates.Count
                django.db.models.aggregates.Max
                django.db.models.aggregates.Min
                django.db.models.aggregates.StdDev(django.db.models.functions.mixins.NumericOutputFieldMixin, django.db.models.aggregates.Aggregate)
                django.db.models.aggregates.Sum(django.db.models.functions.mixins.FixDurationInputMixin, django.db.models.aggregates.Aggregate)
                django.db.models.aggregates.Variance(django.db.models.functions.mixins.NumericOutputFieldMixin, django.db.models.aggregates.Aggregate)
            django.db.models.expressions.ExpressionList
            django.db.models.lookups.Transform(django.db.models.query_utils.RegisterLookupMixin, django.db.models.expressions.Func)
    django.db.models.fields.DateTimeCheckMixin(builtins.object)
        django.db.models.fields.DateField(django.db.models.fields.DateTimeCheckMixin, django.db.models.fields.Field)
            django.db.models.fields.DateTimeField
        django.db.models.fields.TimeField(django.db.models.fields.DateTimeCheckMixin, django.db.models.fields.Field)
    django.db.models.fields.PositiveIntegerRelDbTypeMixin(builtins.object)
        django.db.models.fields.PositiveIntegerField(django.db.models.fields.PositiveIntegerRelDbTypeMixin, django.db.models.fields.IntegerField)
        django.db.models.fields.PositiveSmallIntegerField(django.db.models.fields.PositiveIntegerRelDbTypeMixin, django.db.models.fields.IntegerField)
    django.db.models.fields.related.RelatedField(django.db.models.fields.mixins.FieldCacheMixin, django.db.models.fields.Field)
        django.db.models.fields.related.ForeignObject
            django.db.models.fields.related.ForeignKey
                django.db.models.fields.related.OneToOneField
        django.db.models.fields.related.ManyToManyField
    django.db.models.fields.reverse_related.ForeignObjectRel(django.db.models.fields.mixins.FieldCacheMixin)
        django.db.models.fields.reverse_related.ManyToManyRel
        django.db.models.fields.reverse_related.ManyToOneRel
            django.db.models.fields.reverse_related.OneToOneRel
    django.db.models.functions.mixins.FixDurationInputMixin(builtins.object)
        django.db.models.aggregates.Avg(django.db.models.functions.mixins.FixDurationInputMixin, django.db.models.functions.mixins.NumericOutputFieldMixin, django.db.models.aggregates.Aggregate)
        django.db.models.aggregates.Sum(django.db.models.functions.mixins.FixDurationInputMixin, django.db.models.aggregates.Aggregate)
    django.db.models.functions.mixins.NumericOutputFieldMixin(builtins.object)
        django.db.models.aggregates.Avg(django.db.models.functions.mixins.FixDurationInputMixin, django.db.models.functions.mixins.NumericOutputFieldMixin, django.db.models.aggregates.Aggregate)
        django.db.models.aggregates.StdDev(django.db.models.functions.mixins.NumericOutputFieldMixin, django.db.models.aggregates.Aggregate)
        django.db.models.aggregates.Variance(django.db.models.functions.mixins.NumericOutputFieldMixin, django.db.models.aggregates.Aggregate)
    django.db.models.manager.BaseManagerFromQuerySet(django.db.models.manager.BaseManager)
        django.db.models.manager.Manager
    django.db.models.query_utils.RegisterLookupMixin(builtins.object)
        django.db.models.fields.Field
            django.db.models.fields.AutoField
                django.db.models.fields.BigAutoField
            django.db.models.fields.BinaryField
            django.db.models.fields.BooleanField
                django.db.models.fields.NullBooleanField
            django.db.models.fields.CharField
                django.db.models.fields.CommaSeparatedIntegerField
                django.db.models.fields.EmailField
                django.db.models.fields.SlugField
                django.db.models.fields.URLField
            django.db.models.fields.DateField(django.db.models.fields.DateTimeCheckMixin, django.db.models.fields.Field)
                django.db.models.fields.DateTimeField
            django.db.models.fields.DecimalField
            django.db.models.fields.DurationField
            django.db.models.fields.FilePathField
            django.db.models.fields.FloatField
            django.db.models.fields.GenericIPAddressField
            django.db.models.fields.IPAddressField
            django.db.models.fields.IntegerField
                django.db.models.fields.BigIntegerField
                django.db.models.fields.PositiveIntegerField(django.db.models.fields.PositiveIntegerRelDbTypeMixin, django.db.models.fields.IntegerField)
                django.db.models.fields.PositiveSmallIntegerField(django.db.models.fields.PositiveIntegerRelDbTypeMixin, django.db.models.fields.IntegerField)
                django.db.models.fields.SmallIntegerField
                django.db.models.fields.proxy.OrderWrt
            django.db.models.fields.TextField
            django.db.models.fields.TimeField(django.db.models.fields.DateTimeCheckMixin, django.db.models.fields.Field)
            django.db.models.fields.UUIDField
            django.db.models.fields.files.FileField
                django.db.models.fields.files.ImageField
        django.db.models.lookups.Transform(django.db.models.query_utils.RegisterLookupMixin, django.db.models.expressions.Func)
    django.db.utils.IntegrityError(django.db.utils.DatabaseError)
        django.db.models.deletion.ProtectedError
    django.utils.tree.Node(builtins.object)
        django.db.models.query_utils.Q
    
    class AAggggrreeggaattee(django.db.models.expressions.Func)
     |  Aggregate(*args, **kwargs)
     |  
     |  An SQL function call.
     |  
     |  Method resolution order:
     |      Aggregate
     |      django.db.models.expressions.Func
     |      django.db.models.expressions.SQLiteNumericMixin
     |      django.db.models.expressions.Expression
     |      django.db.models.expressions.BaseExpression
     |      django.db.models.expressions.Combinable
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, *expressions, distinct=False, filter=None, **extra)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  aass__ssqqll(self, compiler, connection, **extra_context)
     |      Responsible for returning a (sql, [params]) tuple to be included
     |      in the current query.
     |      
     |      Different backends can provide their own implementation, by
     |      providing an `as_{vendor}` method and patching the Expression:
     |      
     |      ```
     |      def override_as_sql(self, compiler, connection):
     |          # custom logic
     |          return super().as_sql(compiler, connection)
     |      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
     |      ```
     |      
     |      Arguments:
     |       * compiler: the query compiler responsible for generating the query.
     |         Must have a compile method, returning a (sql, [params]) tuple.
     |         Calling compiler(value) will return a quoted `value`.
     |      
     |       * connection: the database connection used for the current query.
     |      
     |      Return: (sql, params)
     |        Where `sql` is a string containing ordered sql parameters to be
     |        replaced with the elements of the list `params`.
     |  
     |  ggeett__ggrroouupp__bbyy__ccoollss(self)
     |  
     |  ggeett__ssoouurrccee__eexxpprreessssiioonnss(self)
     |  
     |  ggeett__ssoouurrccee__ffiieellddss(self)
     |      Return the underlying field types used by this aggregate.
     |  
     |  rreessoollvvee__eexxpprreessssiioonn(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)
     |      Provide the chance to do any preprocessing or validation before being
     |      added to the query.
     |      
     |      Arguments:
     |       * query: the backend query implementation
     |       * allow_joins: boolean allowing or denying use of joins
     |         in this query
     |       * reuse: a set of reusable joins for multijoins
     |       * summarize: a terminal aggregate clause
     |       * for_save: whether this expression about to be used in a save or update
     |      
     |      Return: an Expression to be added to the query.
     |  
     |  sseett__ssoouurrccee__eexxpprreessssiioonnss(self, exprs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ddeeffaauulltt__aalliiaass
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  aallllooww__ddiissttiinncctt = False
     |  
     |  ccoonnttaaiinnss__aaggggrreeggaattee = True
     |  
     |  ffiilltteerr__tteemmppllaattee = '%s FILTER (WHERE %%(filter)s)'
     |  
     |  nnaammee = None
     |  
     |  tteemmppllaattee = '%(function)s(%(distinct)s%(expressions)s)'
     |  
     |  wwiinnddooww__ccoommppaattiibbllee = True
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.expressions.Func:
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ccooppyy(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.db.models.expressions.Func:
     |  
     |  aarrgg__jjooiinneerr = ', '
     |  
     |  aarriittyy = None
     |  
     |  ffuunnccttiioonn = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.expressions.SQLiteNumericMixin:
     |  
     |  aass__ssqqlliittee(self, compiler, connection, **extra_context)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.expressions.SQLiteNumericMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.expressions.BaseExpression:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettssttaattee____(self)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  aasscc(self, **kwargs)
     |  
     |  ccoonnttaaiinnss__ccoolluummnn__rreeffeerreenncceess = <django.utils.functional.cached_property object>
     |  ccoonnttaaiinnss__oovveerr__ccllaauussee = <django.utils.functional.cached_property object>
     |  ccoonnvveerrtt__vvaalluuee = <django.utils.functional.cached_property object>
     |  ddeeccoonnssttrruucctt(obj)
     |      Return a 3-tuple of class import path, positional arguments,
     |      and keyword arguments.
     |  
     |  ddeesscc(self, **kwargs)
     |  
     |  ffllaatttteenn(self)
     |      Recursively yield this expression and all subexpressions, in
     |      depth-first order.
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__llooookkuupp(self, lookup)
     |  
     |  ggeett__ttrraannssffoorrmm(self, name)
     |  
     |  iiddeennttiittyy = <django.utils.functional.cached_property object>
     |  oouuttppuutt__ffiieelldd = <django.utils.functional.cached_property object>
     |  rreellaabbeelleedd__cclloonnee(self, change_map)
     |  
     |  rreevveerrssee__oorrddeerriinngg(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.expressions.BaseExpression:
     |  
     |  ____nneeww____(cls, *args, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.expressions.BaseExpression:
     |  
     |  ffiieelldd
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.db.models.expressions.BaseExpression:
     |  
     |  ffiilltteerraabbllee = True
     |  
     |  iiss__ssuummmmaarryy = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.expressions.Combinable:
     |  
     |  ____aadddd____(self, other)
     |  
     |  ____aanndd____(self, other)
     |  
     |  ____mmoodd____(self, other)
     |  
     |  ____mmuull____(self, other)
     |  
     |  ____nneegg____(self)
     |  
     |  ____oorr____(self, other)
     |  
     |  ____ppooww____(self, other)
     |  
     |  ____rraadddd____(self, other)
     |  
     |  ____rraanndd____(self, other)
     |  
     |  ____rrmmoodd____(self, other)
     |  
     |  ____rrmmuull____(self, other)
     |  
     |  ____rroorr____(self, other)
     |  
     |  ____rrppooww____(self, other)
     |  
     |  ____rrssuubb____(self, other)
     |  
     |  ____rrttrruueeddiivv____(self, other)
     |  
     |  ____ssuubb____(self, other)
     |  
     |  ____ttrruueeddiivv____(self, other)
     |  
     |  bbiittaanndd(self, other)
     |  
     |  bbiittlleeffttsshhiifftt(self, other)
     |  
     |  bbiittoorr(self, other)
     |  
     |  bbiittrriigghhttsshhiifftt(self, other)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.db.models.expressions.Combinable:
     |  
     |  AADDDD = '+'
     |  
     |  BBIITTAANNDD = '&'
     |  
     |  BBIITTLLEEFFTTSSHHIIFFTT = '<<'
     |  
     |  BBIITTOORR = '|'
     |  
     |  BBIITTRRIIGGHHTTSSHHIIFFTT = '>>'
     |  
     |  DDIIVV = '/'
     |  
     |  MMOODD = '%%'
     |  
     |  MMUULL = '*'
     |  
     |  PPOOWW = '^'
     |  
     |  SSUUBB = '-'
    
    class AAuuttooFFiieelldd(Field)
     |  AutoField(*args, **kwargs)
     |  
     |  Base class for all field types
     |  
     |  Method resolution order:
     |      AutoField
     |      Field
     |      django.db.models.query_utils.RegisterLookupMixin
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  cchheecckk(self, **kwargs)
     |  
     |  ccoonnttrriibbuuttee__ttoo__ccllaassss(self, cls, name, **kwargs)
     |      Register the field with the model class it belongs to.
     |      
     |      If private_only is True, create a separate instance of this field
     |      for every subclass of cls, even if cls is not an abstract model.
     |  
     |  ddeeccoonnssttrruucctt(self)
     |      Return enough information to recreate the field as a 4-tuple:
     |      
     |       * The name of the field on the model, if contribute_to_class() has
     |         been run.
     |       * The import path of the field, including the class:e.g.
     |         django.db.models.IntegerField This should be the most portable
     |         version, so less specific may be better.
     |       * A list of positional arguments.
     |       * A dict of keyword arguments.
     |      
     |      Note that the positional or keyword arguments must contain values of
     |      the following types (including inner values of collection types):
     |      
     |       * None, bool, str, int, float, complex, set, frozenset, list, tuple,
     |         dict
     |       * UUID
     |       * datetime.datetime (naive), datetime.date
     |       * top-level classes, top-level functions - will be referenced by their
     |         full import path
     |       * Storage instances - these have their own deconstruct() method
     |      
     |      This is because the values here must be serialized into a text format
     |      (possibly new Python code, possibly JSON) and these are the only types
     |      with encoding handlers defined.
     |      
     |      There's no need to return the exact way the field was instantiated this
     |      time, just ensure that the resulting field is the same - prefer keyword
     |      arguments over positional ones, and omit parameters with their default
     |      values.
     |  
     |  ffoorrmmffiieelldd(self, **kwargs)
     |      Return a django.forms.Field instance for this field.
     |  
     |  ggeett__ddbb__pprreepp__vvaalluuee(self, value, connection, prepared=False)
     |      Return field's value prepared for interacting with the database backend.
     |      
     |      Used by the default implementations of get_db_prep_save().
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  ggeett__pprreepp__vvaalluuee(self, value)
     |      Perform preliminary non-db specific value checks and conversions.
     |  
     |  rreell__ddbb__ttyyppee(self, connection)
     |      Return the data type that a related field pointing to this field should
     |      use. For example, this method is called by ForeignKey and OneToOneField
     |      to determine its data type.
     |  
     |  ttoo__ppyytthhoonn(self, value)
     |      Convert the input value into the expected Python data type, raising
     |      django.core.exceptions.ValidationError if the data can't be converted.
     |      Return the converted value. Subclasses should override this.
     |  
     |  vvaalliiddaattee(self, value, model_instance)
     |      Validate value and raise ValidationError if necessary. Subclasses
     |      should override this to provide validation logic.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ddeeffaauulltt__eerrrroorr__mmeessssaaggeess = {'invalid': "'%(value)s' value must be an int...
     |  
     |  ddeessccrriippttiioonn = 'Integer'
     |  
     |  eemmppttyy__ssttrriinnggss__aalllloowweedd = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Field:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memodict)
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggee____(self, other, NotImplemented=NotImplemented)
     |      Return a >= b.  Computed by @total_ordering from (not a < b).
     |  
     |  ____ggtt____(self, other, NotImplemented=NotImplemented)
     |      Return a > b.  Computed by @total_ordering from (not a < b) and (a != b).
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____llee____(self, other, NotImplemented=NotImplemented)
     |      Return a <= b.  Computed by @total_ordering from (a < b) or (a == b).
     |  
     |  ____lltt____(self, other)
     |      Return self<value.
     |  
     |  ____rreedduuccee____(self)
     |      Pickling should return the model._meta.fields instance of the field,
     |      not a new copy of that field. So, use the app registry to load the
     |      model and then the field back.
     |  
     |  ____rreepprr____(self)
     |      Display the module, class, and name of the field.
     |  
     |  ____ssttrr____(self)
     |      Return "app_label.model_label.field_name" for fields attached to
     |      models.
     |  
     |  ccaacchheedd__ccooll = <django.utils.functional.cached_property object>
     |  ccaasstt__ddbb__ttyyppee(self, connection)
     |      Return the data type to use in the Cast() function.
     |  
     |  cclleeaann(self, value, model_instance)
     |      Convert the value's type and run validation. Validation errors
     |      from to_python() and validate() are propagated. Return the correct
     |      value if no error is raised.
     |  
     |  cclloonnee(self)
     |      Uses deconstruct() to clone a new copy of this Field.
     |      Will not preserve any class attachments/attribute names.
     |  
     |  ddbb__cchheecckk(self, connection)
     |      Return the database column check constraint for this field, for the
     |      provided connection. Works the same way as db_type() for the case that
     |      get_internal_type() does not map to a preexisting model field.
     |  
     |  ddbb__ppaarraammeetteerrss(self, connection)
     |      Extension of db_type(), providing a range of different return values
     |      (type, checks). This will look at db_type(), allowing custom model
     |      fields to override it.
     |  
     |  ddbb__ttyyppee(self, connection)
     |      Return the database column data type for this field, for the provided
     |      connection.
     |  
     |  ddbb__ttyyppee__ppaarraammeetteerrss(self, connection)
     |  
     |  ddbb__ttyyppee__ssuuffffiixx(self, connection)
     |  
     |  ggeett__aattttnnaammee(self)
     |  
     |  ggeett__aattttnnaammee__ccoolluummnn(self)
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], limit_choices_to=None, ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |  
     |  ggeett__ccooll(self, alias, output_field=None)
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ddbb__pprreepp__ssaavvee(self, value, connection)
     |      Return field's value prepared for saving into a database.
     |  
     |  ggeett__ddeeffaauulltt(self)
     |      Return the default value for this field.
     |  
     |  ggeett__ffiilltteerr__kkwwaarrggss__ffoorr__oobbjjeecctt(self, obj)
     |      Return a dict that when passed as kwargs to self.model.filter(), would
     |      yield all instances having the same value for this field as obj has.
     |  
     |  ggeett__ppkk__vvaalluuee__oonn__ssaavvee(self, instance)
     |      Hook to generate new PK values on save. This method is called when
     |      saving instances with no primary key value set. If this method returns
     |      something else than None, then the returned value is used when saving
     |      the new instance.
     |  
     |  hhaass__ddeeffaauulltt(self)
     |      Return a boolean of whether this field has a default value.
     |  
     |  pprree__ssaavvee(self, model_instance, add)
     |      Return field's value just before saving.
     |  
     |  rruunn__vvaalliiddaattoorrss(self, value)
     |  
     |  ssaavvee__ffoorrmm__ddaattaa(self, instance, data)
     |  
     |  sseelleecctt__ffoorrmmaatt(self, compiler, sql, params)
     |      Custom format for select clauses. For example, GIS columns need to be
     |      selected as AsText(table.col) on MySQL as the table.col data can't be
     |      used by Django.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__nnaammee(self, name)
     |  
     |  vvaalliiddaattoorrss = <django.utils.functional.cached_property object>
     |  vvaalluuee__ffrroomm__oobbjjeecctt(self, obj)
     |      Return the value of this field in the given model instance.
     |  
     |  vvaalluuee__ttoo__ssttrriinngg(self, obj)
     |      Return a string value of this field from the passed obj.
     |      This is used by the serialization framework.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Field:
     |  
     |  ddbb__ttaabblleessppaaccee
     |  
     |  ffllaattcchhooiicceess
     |      Flattened version of choices tuple.
     |  
     |  uunniiqquuee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Field:
     |  
     |  aauuttoo__ccrreeaattiioonn__ccoouunntteerr = -13
     |  
     |  ccllaassss__llooookkuuppss = {'contains': <class 'django.db.models.lookups.Contains...
     |  
     |  ccrreeaattiioonn__ccoouunntteerr = 74
     |  
     |  ddeeffaauulltt__vvaalliiddaattoorrss = []
     |  
     |  eemmppttyy__vvaalluueess = [None, '', [], (), {}]
     |  
     |  hhiiddddeenn = False
     |  
     |  mmaannyy__ttoo__mmaannyy = None
     |  
     |  mmaannyy__ttoo__oonnee = None
     |  
     |  oonnee__ttoo__mmaannyy = None
     |  
     |  oonnee__ttoo__oonnee = None
     |  
     |  rreellaatteedd__mmooddeell = None
     |  
     |  ssyysstteemm__cchheecckk__ddeepprreeccaatteedd__ddeettaaiillss = None
     |  
     |  ssyysstteemm__cchheecckk__rreemmoovveedd__ddeettaaiillss = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ttrraannssffoorrmm(self, lookup_name)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuuppss() from builtins.type
     |  
     |  rreeggiisstteerr__llooookkuupp(lookup, lookup_name=None) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  mmeerrggee__ddiiccttss(dicts)
     |      Merge dicts in reverse to preference the order of the original list. e.g.,
     |      merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class AAvvgg(django.db.models.functions.mixins.FixDurationInputMixin, django.db.models.functions.mixins.NumericOutputFieldMixin, Aggregate)
     |  Avg(*args, **kwargs)
     |  
     |  An SQL function call.
     |  
     |  Method resolution order:
     |      Avg
     |      django.db.models.functions.mixins.FixDurationInputMixin
     |      django.db.models.functions.mixins.NumericOutputFieldMixin
     |      Aggregate
     |      django.db.models.expressions.Func
     |      django.db.models.expressions.SQLiteNumericMixin
     |      django.db.models.expressions.Expression
     |      django.db.models.expressions.BaseExpression
     |      django.db.models.expressions.Combinable
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  ffuunnccttiioonn = 'AVG'
     |  
     |  nnaammee = 'Avg'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.functions.mixins.FixDurationInputMixin:
     |  
     |  aass__mmyyssqqll(self, compiler, connection, **extra_context)
     |  
     |  aass__oorraaccllee(self, compiler, connection, **extra_context)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.functions.mixins.FixDurationInputMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Aggregate:
     |  
     |  ____iinniitt____(self, *expressions, distinct=False, filter=None, **extra)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  aass__ssqqll(self, compiler, connection, **extra_context)
     |      Responsible for returning a (sql, [params]) tuple to be included
     |      in the current query.
     |      
     |      Different backends can provide their own implementation, by
     |      providing an `as_{vendor}` method and patching the Expression:
     |      
     |      ```
     |      def override_as_sql(self, compiler, connection):
     |          # custom logic
     |          return super().as_sql(compiler, connection)
     |      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
     |      ```
     |      
     |      Arguments:
     |       * compiler: the query compiler responsible for generating the query.
     |         Must have a compile method, returning a (sql, [params]) tuple.
     |         Calling compiler(value) will return a quoted `value`.
     |      
     |       * connection: the database connection used for the current query.
     |      
     |      Return: (sql, params)
     |        Where `sql` is a string containing ordered sql parameters to be
     |        replaced with the elements of the list `params`.
     |  
     |  ggeett__ggrroouupp__bbyy__ccoollss(self)
     |  
     |  ggeett__ssoouurrccee__eexxpprreessssiioonnss(self)
     |  
     |  ggeett__ssoouurrccee__ffiieellddss(self)
     |      Return the underlying field types used by this aggregate.
     |  
     |  rreessoollvvee__eexxpprreessssiioonn(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)
     |      Provide the chance to do any preprocessing or validation before being
     |      added to the query.
     |      
     |      Arguments:
     |       * query: the backend query implementation
     |       * allow_joins: boolean allowing or denying use of joins
     |         in this query
     |       * reuse: a set of reusable joins for multijoins
     |       * summarize: a terminal aggregate clause
     |       * for_save: whether this expression about to be used in a save or update
     |      
     |      Return: an Expression to be added to the query.
     |  
     |  sseett__ssoouurrccee__eexxpprreessssiioonnss(self, exprs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Aggregate:
     |  
     |  ddeeffaauulltt__aalliiaass
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Aggregate:
     |  
     |  aallllooww__ddiissttiinncctt = False
     |  
     |  ccoonnttaaiinnss__aaggggrreeggaattee = True
     |  
     |  ffiilltteerr__tteemmppllaattee = '%s FILTER (WHERE %%(filter)s)'
     |  
     |  tteemmppllaattee = '%(function)s(%(distinct)s%(expressions)s)'
     |  
     |  wwiinnddooww__ccoommppaattiibbllee = True
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.expressions.Func:
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ccooppyy(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.db.models.expressions.Func:
     |  
     |  aarrgg__jjooiinneerr = ', '
     |  
     |  aarriittyy = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.expressions.SQLiteNumericMixin:
     |  
     |  aass__ssqqlliittee(self, compiler, connection, **extra_context)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.expressions.BaseExpression:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettssttaattee____(self)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  aasscc(self, **kwargs)
     |  
     |  ccoonnttaaiinnss__ccoolluummnn__rreeffeerreenncceess = <django.utils.functional.cached_property object>
     |  ccoonnttaaiinnss__oovveerr__ccllaauussee = <django.utils.functional.cached_property object>
     |  ccoonnvveerrtt__vvaalluuee = <django.utils.functional.cached_property object>
     |  ddeeccoonnssttrruucctt(obj)
     |      Return a 3-tuple of class import path, positional arguments,
     |      and keyword arguments.
     |  
     |  ddeesscc(self, **kwargs)
     |  
     |  ffllaatttteenn(self)
     |      Recursively yield this expression and all subexpressions, in
     |      depth-first order.
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__llooookkuupp(self, lookup)
     |  
     |  ggeett__ttrraannssffoorrmm(self, name)
     |  
     |  iiddeennttiittyy = <django.utils.functional.cached_property object>
     |  oouuttppuutt__ffiieelldd = <django.utils.functional.cached_property object>
     |  rreellaabbeelleedd__cclloonnee(self, change_map)
     |  
     |  rreevveerrssee__oorrddeerriinngg(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.expressions.BaseExpression:
     |  
     |  ____nneeww____(cls, *args, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.expressions.BaseExpression:
     |  
     |  ffiieelldd
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.db.models.expressions.BaseExpression:
     |  
     |  ffiilltteerraabbllee = True
     |  
     |  iiss__ssuummmmaarryy = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.expressions.Combinable:
     |  
     |  ____aadddd____(self, other)
     |  
     |  ____aanndd____(self, other)
     |  
     |  ____mmoodd____(self, other)
     |  
     |  ____mmuull____(self, other)
     |  
     |  ____nneegg____(self)
     |  
     |  ____oorr____(self, other)
     |  
     |  ____ppooww____(self, other)
     |  
     |  ____rraadddd____(self, other)
     |  
     |  ____rraanndd____(self, other)
     |  
     |  ____rrmmoodd____(self, other)
     |  
     |  ____rrmmuull____(self, other)
     |  
     |  ____rroorr____(self, other)
     |  
     |  ____rrppooww____(self, other)
     |  
     |  ____rrssuubb____(self, other)
     |  
     |  ____rrttrruueeddiivv____(self, other)
     |  
     |  ____ssuubb____(self, other)
     |  
     |  ____ttrruueeddiivv____(self, other)
     |  
     |  bbiittaanndd(self, other)
     |  
     |  bbiittlleeffttsshhiifftt(self, other)
     |  
     |  bbiittoorr(self, other)
     |  
     |  bbiittrriigghhttsshhiifftt(self, other)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.db.models.expressions.Combinable:
     |  
     |  AADDDD = '+'
     |  
     |  BBIITTAANNDD = '&'
     |  
     |  BBIITTLLEEFFTTSSHHIIFFTT = '<<'
     |  
     |  BBIITTOORR = '|'
     |  
     |  BBIITTRRIIGGHHTTSSHHIIFFTT = '>>'
     |  
     |  DDIIVV = '/'
     |  
     |  MMOODD = '%%'
     |  
     |  MMUULL = '*'
     |  
     |  PPOOWW = '^'
     |  
     |  SSUUBB = '-'
    
    class BBiiggAAuuttooFFiieelldd(AutoField)
     |  BigAutoField(*args, **kwargs)
     |  
     |  Base class for all field types
     |  
     |  Method resolution order:
     |      BigAutoField
     |      AutoField
     |      Field
     |      django.db.models.query_utils.RegisterLookupMixin
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  rreell__ddbb__ttyyppee(self, connection)
     |      Return the data type that a related field pointing to this field should
     |      use. For example, this method is called by ForeignKey and OneToOneField
     |      to determine its data type.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ddeessccrriippttiioonn = 'Big (8 byte) integer'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from AutoField:
     |  
     |  ____iinniitt____(self, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  cchheecckk(self, **kwargs)
     |  
     |  ccoonnttrriibbuuttee__ttoo__ccllaassss(self, cls, name, **kwargs)
     |      Register the field with the model class it belongs to.
     |      
     |      If private_only is True, create a separate instance of this field
     |      for every subclass of cls, even if cls is not an abstract model.
     |  
     |  ddeeccoonnssttrruucctt(self)
     |      Return enough information to recreate the field as a 4-tuple:
     |      
     |       * The name of the field on the model, if contribute_to_class() has
     |         been run.
     |       * The import path of the field, including the class:e.g.
     |         django.db.models.IntegerField This should be the most portable
     |         version, so less specific may be better.
     |       * A list of positional arguments.
     |       * A dict of keyword arguments.
     |      
     |      Note that the positional or keyword arguments must contain values of
     |      the following types (including inner values of collection types):
     |      
     |       * None, bool, str, int, float, complex, set, frozenset, list, tuple,
     |         dict
     |       * UUID
     |       * datetime.datetime (naive), datetime.date
     |       * top-level classes, top-level functions - will be referenced by their
     |         full import path
     |       * Storage instances - these have their own deconstruct() method
     |      
     |      This is because the values here must be serialized into a text format
     |      (possibly new Python code, possibly JSON) and these are the only types
     |      with encoding handlers defined.
     |      
     |      There's no need to return the exact way the field was instantiated this
     |      time, just ensure that the resulting field is the same - prefer keyword
     |      arguments over positional ones, and omit parameters with their default
     |      values.
     |  
     |  ffoorrmmffiieelldd(self, **kwargs)
     |      Return a django.forms.Field instance for this field.
     |  
     |  ggeett__ddbb__pprreepp__vvaalluuee(self, value, connection, prepared=False)
     |      Return field's value prepared for interacting with the database backend.
     |      
     |      Used by the default implementations of get_db_prep_save().
     |  
     |  ggeett__pprreepp__vvaalluuee(self, value)
     |      Perform preliminary non-db specific value checks and conversions.
     |  
     |  ttoo__ppyytthhoonn(self, value)
     |      Convert the input value into the expected Python data type, raising
     |      django.core.exceptions.ValidationError if the data can't be converted.
     |      Return the converted value. Subclasses should override this.
     |  
     |  vvaalliiddaattee(self, value, model_instance)
     |      Validate value and raise ValidationError if necessary. Subclasses
     |      should override this to provide validation logic.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from AutoField:
     |  
     |  ddeeffaauulltt__eerrrroorr__mmeessssaaggeess = {'invalid': "'%(value)s' value must be an int...
     |  
     |  eemmppttyy__ssttrriinnggss__aalllloowweedd = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Field:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memodict)
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggee____(self, other, NotImplemented=NotImplemented)
     |      Return a >= b.  Computed by @total_ordering from (not a < b).
     |  
     |  ____ggtt____(self, other, NotImplemented=NotImplemented)
     |      Return a > b.  Computed by @total_ordering from (not a < b) and (a != b).
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____llee____(self, other, NotImplemented=NotImplemented)
     |      Return a <= b.  Computed by @total_ordering from (a < b) or (a == b).
     |  
     |  ____lltt____(self, other)
     |      Return self<value.
     |  
     |  ____rreedduuccee____(self)
     |      Pickling should return the model._meta.fields instance of the field,
     |      not a new copy of that field. So, use the app registry to load the
     |      model and then the field back.
     |  
     |  ____rreepprr____(self)
     |      Display the module, class, and name of the field.
     |  
     |  ____ssttrr____(self)
     |      Return "app_label.model_label.field_name" for fields attached to
     |      models.
     |  
     |  ccaacchheedd__ccooll = <django.utils.functional.cached_property object>
     |  ccaasstt__ddbb__ttyyppee(self, connection)
     |      Return the data type to use in the Cast() function.
     |  
     |  cclleeaann(self, value, model_instance)
     |      Convert the value's type and run validation. Validation errors
     |      from to_python() and validate() are propagated. Return the correct
     |      value if no error is raised.
     |  
     |  cclloonnee(self)
     |      Uses deconstruct() to clone a new copy of this Field.
     |      Will not preserve any class attachments/attribute names.
     |  
     |  ddbb__cchheecckk(self, connection)
     |      Return the database column check constraint for this field, for the
     |      provided connection. Works the same way as db_type() for the case that
     |      get_internal_type() does not map to a preexisting model field.
     |  
     |  ddbb__ppaarraammeetteerrss(self, connection)
     |      Extension of db_type(), providing a range of different return values
     |      (type, checks). This will look at db_type(), allowing custom model
     |      fields to override it.
     |  
     |  ddbb__ttyyppee(self, connection)
     |      Return the database column data type for this field, for the provided
     |      connection.
     |  
     |  ddbb__ttyyppee__ppaarraammeetteerrss(self, connection)
     |  
     |  ddbb__ttyyppee__ssuuffffiixx(self, connection)
     |  
     |  ggeett__aattttnnaammee(self)
     |  
     |  ggeett__aattttnnaammee__ccoolluummnn(self)
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], limit_choices_to=None, ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |  
     |  ggeett__ccooll(self, alias, output_field=None)
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ddbb__pprreepp__ssaavvee(self, value, connection)
     |      Return field's value prepared for saving into a database.
     |  
     |  ggeett__ddeeffaauulltt(self)
     |      Return the default value for this field.
     |  
     |  ggeett__ffiilltteerr__kkwwaarrggss__ffoorr__oobbjjeecctt(self, obj)
     |      Return a dict that when passed as kwargs to self.model.filter(), would
     |      yield all instances having the same value for this field as obj has.
     |  
     |  ggeett__ppkk__vvaalluuee__oonn__ssaavvee(self, instance)
     |      Hook to generate new PK values on save. This method is called when
     |      saving instances with no primary key value set. If this method returns
     |      something else than None, then the returned value is used when saving
     |      the new instance.
     |  
     |  hhaass__ddeeffaauulltt(self)
     |      Return a boolean of whether this field has a default value.
     |  
     |  pprree__ssaavvee(self, model_instance, add)
     |      Return field's value just before saving.
     |  
     |  rruunn__vvaalliiddaattoorrss(self, value)
     |  
     |  ssaavvee__ffoorrmm__ddaattaa(self, instance, data)
     |  
     |  sseelleecctt__ffoorrmmaatt(self, compiler, sql, params)
     |      Custom format for select clauses. For example, GIS columns need to be
     |      selected as AsText(table.col) on MySQL as the table.col data can't be
     |      used by Django.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__nnaammee(self, name)
     |  
     |  vvaalliiddaattoorrss = <django.utils.functional.cached_property object>
     |  vvaalluuee__ffrroomm__oobbjjeecctt(self, obj)
     |      Return the value of this field in the given model instance.
     |  
     |  vvaalluuee__ttoo__ssttrriinngg(self, obj)
     |      Return a string value of this field from the passed obj.
     |      This is used by the serialization framework.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Field:
     |  
     |  ddbb__ttaabblleessppaaccee
     |  
     |  ffllaattcchhooiicceess
     |      Flattened version of choices tuple.
     |  
     |  uunniiqquuee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Field:
     |  
     |  aauuttoo__ccrreeaattiioonn__ccoouunntteerr = -13
     |  
     |  ccllaassss__llooookkuuppss = {'contains': <class 'django.db.models.lookups.Contains...
     |  
     |  ccrreeaattiioonn__ccoouunntteerr = 74
     |  
     |  ddeeffaauulltt__vvaalliiddaattoorrss = []
     |  
     |  eemmppttyy__vvaalluueess = [None, '', [], (), {}]
     |  
     |  hhiiddddeenn = False
     |  
     |  mmaannyy__ttoo__mmaannyy = None
     |  
     |  mmaannyy__ttoo__oonnee = None
     |  
     |  oonnee__ttoo__mmaannyy = None
     |  
     |  oonnee__ttoo__oonnee = None
     |  
     |  rreellaatteedd__mmooddeell = None
     |  
     |  ssyysstteemm__cchheecckk__ddeepprreeccaatteedd__ddeettaaiillss = None
     |  
     |  ssyysstteemm__cchheecckk__rreemmoovveedd__ddeettaaiillss = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ttrraannssffoorrmm(self, lookup_name)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuuppss() from builtins.type
     |  
     |  rreeggiisstteerr__llooookkuupp(lookup, lookup_name=None) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  mmeerrggee__ddiiccttss(dicts)
     |      Merge dicts in reverse to preference the order of the original list. e.g.,
     |      merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class BBiiggIInntteeggeerrFFiieelldd(IntegerField)
     |  BigIntegerField(verbose_name=None, name=None, primary_key=False, max_length=None, unique=False, blank=False, null=False, db_index=False, rel=None, default=<class 'django.db.models.fields.NOT_PROVIDED'>, editable=True, serialize=True, unique_for_date=None, unique_for_month=None, unique_for_year=None, choices=None, help_text='', db_column=None, db_tablespace=None, auto_created=False, validators=(), error_messages=None)
     |  
     |  Base class for all field types
     |  
     |  Method resolution order:
     |      BigIntegerField
     |      IntegerField
     |      Field
     |      django.db.models.query_utils.RegisterLookupMixin
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ffoorrmmffiieelldd(self, **kwargs)
     |      Return a django.forms.Field instance for this field.
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  MMAAXX__BBIIGGIINNTT = 9223372036854775807
     |  
     |  ddeessccrriippttiioonn = 'Big (8 byte) integer'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from IntegerField:
     |  
     |  cchheecckk(self, **kwargs)
     |  
     |  ggeett__pprreepp__vvaalluuee(self, value)
     |      Perform preliminary non-db specific value checks and conversions.
     |  
     |  ttoo__ppyytthhoonn(self, value)
     |      Convert the input value into the expected Python data type, raising
     |      django.core.exceptions.ValidationError if the data can't be converted.
     |      Return the converted value. Subclasses should override this.
     |  
     |  vvaalliiddaattoorrss = <django.utils.functional.cached_property object>
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from IntegerField:
     |  
     |  ccllaassss__llooookkuuppss = {'gte': <class 'django.db.models.lookups.IntegerGreate...
     |  
     |  ddeeffaauulltt__eerrrroorr__mmeessssaaggeess = {'invalid': "'%(value)s' value must be an int...
     |  
     |  eemmppttyy__ssttrriinnggss__aalllloowweedd = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Field:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memodict)
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggee____(self, other, NotImplemented=NotImplemented)
     |      Return a >= b.  Computed by @total_ordering from (not a < b).
     |  
     |  ____ggtt____(self, other, NotImplemented=NotImplemented)
     |      Return a > b.  Computed by @total_ordering from (not a < b) and (a != b).
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____iinniitt____(self, verbose_name=None, name=None, primary_key=False, max_length=None, unique=False, blank=False, null=False, db_index=False, rel=None, default=<class 'django.db.models.fields.NOT_PROVIDED'>, editable=True, serialize=True, unique_for_date=None, unique_for_month=None, unique_for_year=None, choices=None, help_text='', db_column=None, db_tablespace=None, auto_created=False, validators=(), error_messages=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____llee____(self, other, NotImplemented=NotImplemented)
     |      Return a <= b.  Computed by @total_ordering from (a < b) or (a == b).
     |  
     |  ____lltt____(self, other)
     |      Return self<value.
     |  
     |  ____rreedduuccee____(self)
     |      Pickling should return the model._meta.fields instance of the field,
     |      not a new copy of that field. So, use the app registry to load the
     |      model and then the field back.
     |  
     |  ____rreepprr____(self)
     |      Display the module, class, and name of the field.
     |  
     |  ____ssttrr____(self)
     |      Return "app_label.model_label.field_name" for fields attached to
     |      models.
     |  
     |  ccaacchheedd__ccooll = <django.utils.functional.cached_property object>
     |  ccaasstt__ddbb__ttyyppee(self, connection)
     |      Return the data type to use in the Cast() function.
     |  
     |  cclleeaann(self, value, model_instance)
     |      Convert the value's type and run validation. Validation errors
     |      from to_python() and validate() are propagated. Return the correct
     |      value if no error is raised.
     |  
     |  cclloonnee(self)
     |      Uses deconstruct() to clone a new copy of this Field.
     |      Will not preserve any class attachments/attribute names.
     |  
     |  ccoonnttrriibbuuttee__ttoo__ccllaassss(self, cls, name, private_only=False)
     |      Register the field with the model class it belongs to.
     |      
     |      If private_only is True, create a separate instance of this field
     |      for every subclass of cls, even if cls is not an abstract model.
     |  
     |  ddbb__cchheecckk(self, connection)
     |      Return the database column check constraint for this field, for the
     |      provided connection. Works the same way as db_type() for the case that
     |      get_internal_type() does not map to a preexisting model field.
     |  
     |  ddbb__ppaarraammeetteerrss(self, connection)
     |      Extension of db_type(), providing a range of different return values
     |      (type, checks). This will look at db_type(), allowing custom model
     |      fields to override it.
     |  
     |  ddbb__ttyyppee(self, connection)
     |      Return the database column data type for this field, for the provided
     |      connection.
     |  
     |  ddbb__ttyyppee__ppaarraammeetteerrss(self, connection)
     |  
     |  ddbb__ttyyppee__ssuuffffiixx(self, connection)
     |  
     |  ddeeccoonnssttrruucctt(self)
     |      Return enough information to recreate the field as a 4-tuple:
     |      
     |       * The name of the field on the model, if contribute_to_class() has
     |         been run.
     |       * The import path of the field, including the class:e.g.
     |         django.db.models.IntegerField This should be the most portable
     |         version, so less specific may be better.
     |       * A list of positional arguments.
     |       * A dict of keyword arguments.
     |      
     |      Note that the positional or keyword arguments must contain values of
     |      the following types (including inner values of collection types):
     |      
     |       * None, bool, str, int, float, complex, set, frozenset, list, tuple,
     |         dict
     |       * UUID
     |       * datetime.datetime (naive), datetime.date
     |       * top-level classes, top-level functions - will be referenced by their
     |         full import path
     |       * Storage instances - these have their own deconstruct() method
     |      
     |      This is because the values here must be serialized into a text format
     |      (possibly new Python code, possibly JSON) and these are the only types
     |      with encoding handlers defined.
     |      
     |      There's no need to return the exact way the field was instantiated this
     |      time, just ensure that the resulting field is the same - prefer keyword
     |      arguments over positional ones, and omit parameters with their default
     |      values.
     |  
     |  ggeett__aattttnnaammee(self)
     |  
     |  ggeett__aattttnnaammee__ccoolluummnn(self)
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], limit_choices_to=None, ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |  
     |  ggeett__ccooll(self, alias, output_field=None)
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ddbb__pprreepp__ssaavvee(self, value, connection)
     |      Return field's value prepared for saving into a database.
     |  
     |  ggeett__ddbb__pprreepp__vvaalluuee(self, value, connection, prepared=False)
     |      Return field's value prepared for interacting with the database backend.
     |      
     |      Used by the default implementations of get_db_prep_save().
     |  
     |  ggeett__ddeeffaauulltt(self)
     |      Return the default value for this field.
     |  
     |  ggeett__ffiilltteerr__kkwwaarrggss__ffoorr__oobbjjeecctt(self, obj)
     |      Return a dict that when passed as kwargs to self.model.filter(), would
     |      yield all instances having the same value for this field as obj has.
     |  
     |  ggeett__ppkk__vvaalluuee__oonn__ssaavvee(self, instance)
     |      Hook to generate new PK values on save. This method is called when
     |      saving instances with no primary key value set. If this method returns
     |      something else than None, then the returned value is used when saving
     |      the new instance.
     |  
     |  hhaass__ddeeffaauulltt(self)
     |      Return a boolean of whether this field has a default value.
     |  
     |  pprree__ssaavvee(self, model_instance, add)
     |      Return field's value just before saving.
     |  
     |  rreell__ddbb__ttyyppee(self, connection)
     |      Return the data type that a related field pointing to this field should
     |      use. For example, this method is called by ForeignKey and OneToOneField
     |      to determine its data type.
     |  
     |  rruunn__vvaalliiddaattoorrss(self, value)
     |  
     |  ssaavvee__ffoorrmm__ddaattaa(self, instance, data)
     |  
     |  sseelleecctt__ffoorrmmaatt(self, compiler, sql, params)
     |      Custom format for select clauses. For example, GIS columns need to be
     |      selected as AsText(table.col) on MySQL as the table.col data can't be
     |      used by Django.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__nnaammee(self, name)
     |  
     |  vvaalliiddaattee(self, value, model_instance)
     |      Validate value and raise ValidationError if necessary. Subclasses
     |      should override this to provide validation logic.
     |  
     |  vvaalluuee__ffrroomm__oobbjjeecctt(self, obj)
     |      Return the value of this field in the given model instance.
     |  
     |  vvaalluuee__ttoo__ssttrriinngg(self, obj)
     |      Return a string value of this field from the passed obj.
     |      This is used by the serialization framework.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Field:
     |  
     |  ddbb__ttaabblleessppaaccee
     |  
     |  ffllaattcchhooiicceess
     |      Flattened version of choices tuple.
     |  
     |  uunniiqquuee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Field:
     |  
     |  aauuttoo__ccrreeaattiioonn__ccoouunntteerr = -13
     |  
     |  ccrreeaattiioonn__ccoouunntteerr = 74
     |  
     |  ddeeffaauulltt__vvaalliiddaattoorrss = []
     |  
     |  eemmppttyy__vvaalluueess = [None, '', [], (), {}]
     |  
     |  hhiiddddeenn = False
     |  
     |  mmaannyy__ttoo__mmaannyy = None
     |  
     |  mmaannyy__ttoo__oonnee = None
     |  
     |  oonnee__ttoo__mmaannyy = None
     |  
     |  oonnee__ttoo__oonnee = None
     |  
     |  rreellaatteedd__mmooddeell = None
     |  
     |  ssyysstteemm__cchheecckk__ddeepprreeccaatteedd__ddeettaaiillss = None
     |  
     |  ssyysstteemm__cchheecckk__rreemmoovveedd__ddeettaaiillss = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ttrraannssffoorrmm(self, lookup_name)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuuppss() from builtins.type
     |  
     |  rreeggiisstteerr__llooookkuupp(lookup, lookup_name=None) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  mmeerrggee__ddiiccttss(dicts)
     |      Merge dicts in reverse to preference the order of the original list. e.g.,
     |      merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class BBiinnaarryyFFiieelldd(Field)
     |  BinaryField(*args, **kwargs)
     |  
     |  Base class for all field types
     |  
     |  Method resolution order:
     |      BinaryField
     |      Field
     |      django.db.models.query_utils.RegisterLookupMixin
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ddeeccoonnssttrruucctt(self)
     |      Return enough information to recreate the field as a 4-tuple:
     |      
     |       * The name of the field on the model, if contribute_to_class() has
     |         been run.
     |       * The import path of the field, including the class:e.g.
     |         django.db.models.IntegerField This should be the most portable
     |         version, so less specific may be better.
     |       * A list of positional arguments.
     |       * A dict of keyword arguments.
     |      
     |      Note that the positional or keyword arguments must contain values of
     |      the following types (including inner values of collection types):
     |      
     |       * None, bool, str, int, float, complex, set, frozenset, list, tuple,
     |         dict
     |       * UUID
     |       * datetime.datetime (naive), datetime.date
     |       * top-level classes, top-level functions - will be referenced by their
     |         full import path
     |       * Storage instances - these have their own deconstruct() method
     |      
     |      This is because the values here must be serialized into a text format
     |      (possibly new Python code, possibly JSON) and these are the only types
     |      with encoding handlers defined.
     |      
     |      There's no need to return the exact way the field was instantiated this
     |      time, just ensure that the resulting field is the same - prefer keyword
     |      arguments over positional ones, and omit parameters with their default
     |      values.
     |  
     |  ggeett__ddbb__pprreepp__vvaalluuee(self, value, connection, prepared=False)
     |      Return field's value prepared for interacting with the database backend.
     |      
     |      Used by the default implementations of get_db_prep_save().
     |  
     |  ggeett__ddeeffaauulltt(self)
     |      Return the default value for this field.
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  ggeett__ppllaacceehhoollddeerr(self, value, compiler, connection)
     |  
     |  ttoo__ppyytthhoonn(self, value)
     |      Convert the input value into the expected Python data type, raising
     |      django.core.exceptions.ValidationError if the data can't be converted.
     |      Return the converted value. Subclasses should override this.
     |  
     |  vvaalluuee__ttoo__ssttrriinngg(self, obj)
     |      Binary data is serialized as base64
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ddeessccrriippttiioonn = 'Raw binary data'
     |  
     |  eemmppttyy__vvaalluueess = [None, b'']
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Field:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memodict)
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggee____(self, other, NotImplemented=NotImplemented)
     |      Return a >= b.  Computed by @total_ordering from (not a < b).
     |  
     |  ____ggtt____(self, other, NotImplemented=NotImplemented)
     |      Return a > b.  Computed by @total_ordering from (not a < b) and (a != b).
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____llee____(self, other, NotImplemented=NotImplemented)
     |      Return a <= b.  Computed by @total_ordering from (a < b) or (a == b).
     |  
     |  ____lltt____(self, other)
     |      Return self<value.
     |  
     |  ____rreedduuccee____(self)
     |      Pickling should return the model._meta.fields instance of the field,
     |      not a new copy of that field. So, use the app registry to load the
     |      model and then the field back.
     |  
     |  ____rreepprr____(self)
     |      Display the module, class, and name of the field.
     |  
     |  ____ssttrr____(self)
     |      Return "app_label.model_label.field_name" for fields attached to
     |      models.
     |  
     |  ccaacchheedd__ccooll = <django.utils.functional.cached_property object>
     |  ccaasstt__ddbb__ttyyppee(self, connection)
     |      Return the data type to use in the Cast() function.
     |  
     |  cchheecckk(self, **kwargs)
     |  
     |  cclleeaann(self, value, model_instance)
     |      Convert the value's type and run validation. Validation errors
     |      from to_python() and validate() are propagated. Return the correct
     |      value if no error is raised.
     |  
     |  cclloonnee(self)
     |      Uses deconstruct() to clone a new copy of this Field.
     |      Will not preserve any class attachments/attribute names.
     |  
     |  ccoonnttrriibbuuttee__ttoo__ccllaassss(self, cls, name, private_only=False)
     |      Register the field with the model class it belongs to.
     |      
     |      If private_only is True, create a separate instance of this field
     |      for every subclass of cls, even if cls is not an abstract model.
     |  
     |  ddbb__cchheecckk(self, connection)
     |      Return the database column check constraint for this field, for the
     |      provided connection. Works the same way as db_type() for the case that
     |      get_internal_type() does not map to a preexisting model field.
     |  
     |  ddbb__ppaarraammeetteerrss(self, connection)
     |      Extension of db_type(), providing a range of different return values
     |      (type, checks). This will look at db_type(), allowing custom model
     |      fields to override it.
     |  
     |  ddbb__ttyyppee(self, connection)
     |      Return the database column data type for this field, for the provided
     |      connection.
     |  
     |  ddbb__ttyyppee__ppaarraammeetteerrss(self, connection)
     |  
     |  ddbb__ttyyppee__ssuuffffiixx(self, connection)
     |  
     |  ffoorrmmffiieelldd(self, form_class=None, choices_form_class=None, **kwargs)
     |      Return a django.forms.Field instance for this field.
     |  
     |  ggeett__aattttnnaammee(self)
     |  
     |  ggeett__aattttnnaammee__ccoolluummnn(self)
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], limit_choices_to=None, ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |  
     |  ggeett__ccooll(self, alias, output_field=None)
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ddbb__pprreepp__ssaavvee(self, value, connection)
     |      Return field's value prepared for saving into a database.
     |  
     |  ggeett__ffiilltteerr__kkwwaarrggss__ffoorr__oobbjjeecctt(self, obj)
     |      Return a dict that when passed as kwargs to self.model.filter(), would
     |      yield all instances having the same value for this field as obj has.
     |  
     |  ggeett__ppkk__vvaalluuee__oonn__ssaavvee(self, instance)
     |      Hook to generate new PK values on save. This method is called when
     |      saving instances with no primary key value set. If this method returns
     |      something else than None, then the returned value is used when saving
     |      the new instance.
     |  
     |  ggeett__pprreepp__vvaalluuee(self, value)
     |      Perform preliminary non-db specific value checks and conversions.
     |  
     |  hhaass__ddeeffaauulltt(self)
     |      Return a boolean of whether this field has a default value.
     |  
     |  pprree__ssaavvee(self, model_instance, add)
     |      Return field's value just before saving.
     |  
     |  rreell__ddbb__ttyyppee(self, connection)
     |      Return the data type that a related field pointing to this field should
     |      use. For example, this method is called by ForeignKey and OneToOneField
     |      to determine its data type.
     |  
     |  rruunn__vvaalliiddaattoorrss(self, value)
     |  
     |  ssaavvee__ffoorrmm__ddaattaa(self, instance, data)
     |  
     |  sseelleecctt__ffoorrmmaatt(self, compiler, sql, params)
     |      Custom format for select clauses. For example, GIS columns need to be
     |      selected as AsText(table.col) on MySQL as the table.col data can't be
     |      used by Django.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__nnaammee(self, name)
     |  
     |  vvaalliiddaattee(self, value, model_instance)
     |      Validate value and raise ValidationError if necessary. Subclasses
     |      should override this to provide validation logic.
     |  
     |  vvaalliiddaattoorrss = <django.utils.functional.cached_property object>
     |  vvaalluuee__ffrroomm__oobbjjeecctt(self, obj)
     |      Return the value of this field in the given model instance.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Field:
     |  
     |  ddbb__ttaabblleessppaaccee
     |  
     |  ffllaattcchhooiicceess
     |      Flattened version of choices tuple.
     |  
     |  uunniiqquuee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Field:
     |  
     |  aauuttoo__ccrreeaattiioonn__ccoouunntteerr = -13
     |  
     |  ccllaassss__llooookkuuppss = {'contains': <class 'django.db.models.lookups.Contains...
     |  
     |  ccrreeaattiioonn__ccoouunntteerr = 74
     |  
     |  ddeeffaauulltt__eerrrroorr__mmeessssaaggeess = {'blank': 'This field cannot be blank.', 'inv...
     |  
     |  ddeeffaauulltt__vvaalliiddaattoorrss = []
     |  
     |  eemmppttyy__ssttrriinnggss__aalllloowweedd = True
     |  
     |  hhiiddddeenn = False
     |  
     |  mmaannyy__ttoo__mmaannyy = None
     |  
     |  mmaannyy__ttoo__oonnee = None
     |  
     |  oonnee__ttoo__mmaannyy = None
     |  
     |  oonnee__ttoo__oonnee = None
     |  
     |  rreellaatteedd__mmooddeell = None
     |  
     |  ssyysstteemm__cchheecckk__ddeepprreeccaatteedd__ddeettaaiillss = None
     |  
     |  ssyysstteemm__cchheecckk__rreemmoovveedd__ddeettaaiillss = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ttrraannssffoorrmm(self, lookup_name)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuuppss() from builtins.type
     |  
     |  rreeggiisstteerr__llooookkuupp(lookup, lookup_name=None) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  mmeerrggee__ddiiccttss(dicts)
     |      Merge dicts in reverse to preference the order of the original list. e.g.,
     |      merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class BBoooolleeaannFFiieelldd(Field)
     |  BooleanField(verbose_name=None, name=None, primary_key=False, max_length=None, unique=False, blank=False, null=False, db_index=False, rel=None, default=<class 'django.db.models.fields.NOT_PROVIDED'>, editable=True, serialize=True, unique_for_date=None, unique_for_month=None, unique_for_year=None, choices=None, help_text='', db_column=None, db_tablespace=None, auto_created=False, validators=(), error_messages=None)
     |  
     |  Base class for all field types
     |  
     |  Method resolution order:
     |      BooleanField
     |      Field
     |      django.db.models.query_utils.RegisterLookupMixin
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ffoorrmmffiieelldd(self, **kwargs)
     |      Return a django.forms.Field instance for this field.
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  ggeett__pprreepp__vvaalluuee(self, value)
     |      Perform preliminary non-db specific value checks and conversions.
     |  
     |  ttoo__ppyytthhoonn(self, value)
     |      Convert the input value into the expected Python data type, raising
     |      django.core.exceptions.ValidationError if the data can't be converted.
     |      Return the converted value. Subclasses should override this.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ddeeffaauulltt__eerrrroorr__mmeessssaaggeess = {'invalid': "'%(value)s' value must be either...
     |  
     |  ddeessccrriippttiioonn = 'Boolean (Either True or False)'
     |  
     |  eemmppttyy__ssttrriinnggss__aalllloowweedd = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Field:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memodict)
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggee____(self, other, NotImplemented=NotImplemented)
     |      Return a >= b.  Computed by @total_ordering from (not a < b).
     |  
     |  ____ggtt____(self, other, NotImplemented=NotImplemented)
     |      Return a > b.  Computed by @total_ordering from (not a < b) and (a != b).
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____iinniitt____(self, verbose_name=None, name=None, primary_key=False, max_length=None, unique=False, blank=False, null=False, db_index=False, rel=None, default=<class 'django.db.models.fields.NOT_PROVIDED'>, editable=True, serialize=True, unique_for_date=None, unique_for_month=None, unique_for_year=None, choices=None, help_text='', db_column=None, db_tablespace=None, auto_created=False, validators=(), error_messages=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____llee____(self, other, NotImplemented=NotImplemented)
     |      Return a <= b.  Computed by @total_ordering from (a < b) or (a == b).
     |  
     |  ____lltt____(self, other)
     |      Return self<value.
     |  
     |  ____rreedduuccee____(self)
     |      Pickling should return the model._meta.fields instance of the field,
     |      not a new copy of that field. So, use the app registry to load the
     |      model and then the field back.
     |  
     |  ____rreepprr____(self)
     |      Display the module, class, and name of the field.
     |  
     |  ____ssttrr____(self)
     |      Return "app_label.model_label.field_name" for fields attached to
     |      models.
     |  
     |  ccaacchheedd__ccooll = <django.utils.functional.cached_property object>
     |  ccaasstt__ddbb__ttyyppee(self, connection)
     |      Return the data type to use in the Cast() function.
     |  
     |  cchheecckk(self, **kwargs)
     |  
     |  cclleeaann(self, value, model_instance)
     |      Convert the value's type and run validation. Validation errors
     |      from to_python() and validate() are propagated. Return the correct
     |      value if no error is raised.
     |  
     |  cclloonnee(self)
     |      Uses deconstruct() to clone a new copy of this Field.
     |      Will not preserve any class attachments/attribute names.
     |  
     |  ccoonnttrriibbuuttee__ttoo__ccllaassss(self, cls, name, private_only=False)
     |      Register the field with the model class it belongs to.
     |      
     |      If private_only is True, create a separate instance of this field
     |      for every subclass of cls, even if cls is not an abstract model.
     |  
     |  ddbb__cchheecckk(self, connection)
     |      Return the database column check constraint for this field, for the
     |      provided connection. Works the same way as db_type() for the case that
     |      get_internal_type() does not map to a preexisting model field.
     |  
     |  ddbb__ppaarraammeetteerrss(self, connection)
     |      Extension of db_type(), providing a range of different return values
     |      (type, checks). This will look at db_type(), allowing custom model
     |      fields to override it.
     |  
     |  ddbb__ttyyppee(self, connection)
     |      Return the database column data type for this field, for the provided
     |      connection.
     |  
     |  ddbb__ttyyppee__ppaarraammeetteerrss(self, connection)
     |  
     |  ddbb__ttyyppee__ssuuffffiixx(self, connection)
     |  
     |  ddeeccoonnssttrruucctt(self)
     |      Return enough information to recreate the field as a 4-tuple:
     |      
     |       * The name of the field on the model, if contribute_to_class() has
     |         been run.
     |       * The import path of the field, including the class:e.g.
     |         django.db.models.IntegerField This should be the most portable
     |         version, so less specific may be better.
     |       * A list of positional arguments.
     |       * A dict of keyword arguments.
     |      
     |      Note that the positional or keyword arguments must contain values of
     |      the following types (including inner values of collection types):
     |      
     |       * None, bool, str, int, float, complex, set, frozenset, list, tuple,
     |         dict
     |       * UUID
     |       * datetime.datetime (naive), datetime.date
     |       * top-level classes, top-level functions - will be referenced by their
     |         full import path
     |       * Storage instances - these have their own deconstruct() method
     |      
     |      This is because the values here must be serialized into a text format
     |      (possibly new Python code, possibly JSON) and these are the only types
     |      with encoding handlers defined.
     |      
     |      There's no need to return the exact way the field was instantiated this
     |      time, just ensure that the resulting field is the same - prefer keyword
     |      arguments over positional ones, and omit parameters with their default
     |      values.
     |  
     |  ggeett__aattttnnaammee(self)
     |  
     |  ggeett__aattttnnaammee__ccoolluummnn(self)
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], limit_choices_to=None, ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |  
     |  ggeett__ccooll(self, alias, output_field=None)
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ddbb__pprreepp__ssaavvee(self, value, connection)
     |      Return field's value prepared for saving into a database.
     |  
     |  ggeett__ddbb__pprreepp__vvaalluuee(self, value, connection, prepared=False)
     |      Return field's value prepared for interacting with the database backend.
     |      
     |      Used by the default implementations of get_db_prep_save().
     |  
     |  ggeett__ddeeffaauulltt(self)
     |      Return the default value for this field.
     |  
     |  ggeett__ffiilltteerr__kkwwaarrggss__ffoorr__oobbjjeecctt(self, obj)
     |      Return a dict that when passed as kwargs to self.model.filter(), would
     |      yield all instances having the same value for this field as obj has.
     |  
     |  ggeett__ppkk__vvaalluuee__oonn__ssaavvee(self, instance)
     |      Hook to generate new PK values on save. This method is called when
     |      saving instances with no primary key value set. If this method returns
     |      something else than None, then the returned value is used when saving
     |      the new instance.
     |  
     |  hhaass__ddeeffaauulltt(self)
     |      Return a boolean of whether this field has a default value.
     |  
     |  pprree__ssaavvee(self, model_instance, add)
     |      Return field's value just before saving.
     |  
     |  rreell__ddbb__ttyyppee(self, connection)
     |      Return the data type that a related field pointing to this field should
     |      use. For example, this method is called by ForeignKey and OneToOneField
     |      to determine its data type.
     |  
     |  rruunn__vvaalliiddaattoorrss(self, value)
     |  
     |  ssaavvee__ffoorrmm__ddaattaa(self, instance, data)
     |  
     |  sseelleecctt__ffoorrmmaatt(self, compiler, sql, params)
     |      Custom format for select clauses. For example, GIS columns need to be
     |      selected as AsText(table.col) on MySQL as the table.col data can't be
     |      used by Django.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__nnaammee(self, name)
     |  
     |  vvaalliiddaattee(self, value, model_instance)
     |      Validate value and raise ValidationError if necessary. Subclasses
     |      should override this to provide validation logic.
     |  
     |  vvaalliiddaattoorrss = <django.utils.functional.cached_property object>
     |  vvaalluuee__ffrroomm__oobbjjeecctt(self, obj)
     |      Return the value of this field in the given model instance.
     |  
     |  vvaalluuee__ttoo__ssttrriinngg(self, obj)
     |      Return a string value of this field from the passed obj.
     |      This is used by the serialization framework.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Field:
     |  
     |  ddbb__ttaabblleessppaaccee
     |  
     |  ffllaattcchhooiicceess
     |      Flattened version of choices tuple.
     |  
     |  uunniiqquuee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Field:
     |  
     |  aauuttoo__ccrreeaattiioonn__ccoouunntteerr = -13
     |  
     |  ccllaassss__llooookkuuppss = {'contains': <class 'django.db.models.lookups.Contains...
     |  
     |  ccrreeaattiioonn__ccoouunntteerr = 74
     |  
     |  ddeeffaauulltt__vvaalliiddaattoorrss = []
     |  
     |  eemmppttyy__vvaalluueess = [None, '', [], (), {}]
     |  
     |  hhiiddddeenn = False
     |  
     |  mmaannyy__ttoo__mmaannyy = None
     |  
     |  mmaannyy__ttoo__oonnee = None
     |  
     |  oonnee__ttoo__mmaannyy = None
     |  
     |  oonnee__ttoo__oonnee = None
     |  
     |  rreellaatteedd__mmooddeell = None
     |  
     |  ssyysstteemm__cchheecckk__ddeepprreeccaatteedd__ddeettaaiillss = None
     |  
     |  ssyysstteemm__cchheecckk__rreemmoovveedd__ddeettaaiillss = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ttrraannssffoorrmm(self, lookup_name)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuuppss() from builtins.type
     |  
     |  rreeggiisstteerr__llooookkuupp(lookup, lookup_name=None) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  mmeerrggee__ddiiccttss(dicts)
     |      Merge dicts in reverse to preference the order of the original list. e.g.,
     |      merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class CCaassee(Expression)
     |  Case(*args, **kwargs)
     |  
     |  An SQL searched CASE expression:
     |  
     |      CASE
     |          WHEN n > 0
     |              THEN 'positive'
     |          WHEN n < 0
     |              THEN 'negative'
     |          ELSE 'zero'
     |      END
     |  
     |  Method resolution order:
     |      Case
     |      Expression
     |      BaseExpression
     |      Combinable
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, *cases, default=None, output_field=None, **extra)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  aass__ssqqll(self, compiler, connection, template=None, case_joiner=None, **extra_context)
     |      Responsible for returning a (sql, [params]) tuple to be included
     |      in the current query.
     |      
     |      Different backends can provide their own implementation, by
     |      providing an `as_{vendor}` method and patching the Expression:
     |      
     |      ```
     |      def override_as_sql(self, compiler, connection):
     |          # custom logic
     |          return super().as_sql(compiler, connection)
     |      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
     |      ```
     |      
     |      Arguments:
     |       * compiler: the query compiler responsible for generating the query.
     |         Must have a compile method, returning a (sql, [params]) tuple.
     |         Calling compiler(value) will return a quoted `value`.
     |      
     |       * connection: the database connection used for the current query.
     |      
     |      Return: (sql, params)
     |        Where `sql` is a string containing ordered sql parameters to be
     |        replaced with the elements of the list `params`.
     |  
     |  ccooppyy(self)
     |  
     |  ggeett__ssoouurrccee__eexxpprreessssiioonnss(self)
     |  
     |  rreessoollvvee__eexxpprreessssiioonn(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)
     |      Provide the chance to do any preprocessing or validation before being
     |      added to the query.
     |      
     |      Arguments:
     |       * query: the backend query implementation
     |       * allow_joins: boolean allowing or denying use of joins
     |         in this query
     |       * reuse: a set of reusable joins for multijoins
     |       * summarize: a terminal aggregate clause
     |       * for_save: whether this expression about to be used in a save or update
     |      
     |      Return: an Expression to be added to the query.
     |  
     |  sseett__ssoouurrccee__eexxpprreessssiioonnss(self, exprs)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ccaassee__jjooiinneerr = ' '
     |  
     |  tteemmppllaattee = 'CASE %(cases)s ELSE %(default)s END'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseExpression:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettssttaattee____(self)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  aasscc(self, **kwargs)
     |  
     |  ccoonnttaaiinnss__aaggggrreeggaattee = <django.utils.functional.cached_property object>
     |  ccoonnttaaiinnss__ccoolluummnn__rreeffeerreenncceess = <django.utils.functional.cached_property object>
     |  ccoonnttaaiinnss__oovveerr__ccllaauussee = <django.utils.functional.cached_property object>
     |  ccoonnvveerrtt__vvaalluuee = <django.utils.functional.cached_property object>
     |  ddeeccoonnssttrruucctt(obj)
     |      Return a 3-tuple of class import path, positional arguments,
     |      and keyword arguments.
     |  
     |  ddeesscc(self, **kwargs)
     |  
     |  ffllaatttteenn(self)
     |      Recursively yield this expression and all subexpressions, in
     |      depth-first order.
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ggrroouupp__bbyy__ccoollss(self)
     |  
     |  ggeett__llooookkuupp(self, lookup)
     |  
     |  ggeett__ssoouurrccee__ffiieellddss(self)
     |      Return the underlying field types used by this aggregate.
     |  
     |  ggeett__ttrraannssffoorrmm(self, name)
     |  
     |  iiddeennttiittyy = <django.utils.functional.cached_property object>
     |  oouuttppuutt__ffiieelldd = <django.utils.functional.cached_property object>
     |  rreellaabbeelleedd__cclloonnee(self, change_map)
     |  
     |  rreevveerrssee__oorrddeerriinngg(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from BaseExpression:
     |  
     |  ____nneeww____(cls, *args, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseExpression:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ffiieelldd
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from BaseExpression:
     |  
     |  ffiilltteerraabbllee = True
     |  
     |  iiss__ssuummmmaarryy = False
     |  
     |  wwiinnddooww__ccoommppaattiibbllee = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Combinable:
     |  
     |  ____aadddd____(self, other)
     |  
     |  ____aanndd____(self, other)
     |  
     |  ____mmoodd____(self, other)
     |  
     |  ____mmuull____(self, other)
     |  
     |  ____nneegg____(self)
     |  
     |  ____oorr____(self, other)
     |  
     |  ____ppooww____(self, other)
     |  
     |  ____rraadddd____(self, other)
     |  
     |  ____rraanndd____(self, other)
     |  
     |  ____rrmmoodd____(self, other)
     |  
     |  ____rrmmuull____(self, other)
     |  
     |  ____rroorr____(self, other)
     |  
     |  ____rrppooww____(self, other)
     |  
     |  ____rrssuubb____(self, other)
     |  
     |  ____rrttrruueeddiivv____(self, other)
     |  
     |  ____ssuubb____(self, other)
     |  
     |  ____ttrruueeddiivv____(self, other)
     |  
     |  bbiittaanndd(self, other)
     |  
     |  bbiittlleeffttsshhiifftt(self, other)
     |  
     |  bbiittoorr(self, other)
     |  
     |  bbiittrriigghhttsshhiifftt(self, other)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Combinable:
     |  
     |  AADDDD = '+'
     |  
     |  BBIITTAANNDD = '&'
     |  
     |  BBIITTLLEEFFTTSSHHIIFFTT = '<<'
     |  
     |  BBIITTOORR = '|'
     |  
     |  BBIITTRRIIGGHHTTSSHHIIFFTT = '>>'
     |  
     |  DDIIVV = '/'
     |  
     |  MMOODD = '%%'
     |  
     |  MMUULL = '*'
     |  
     |  PPOOWW = '^'
     |  
     |  SSUUBB = '-'
    
    class CChhaarrFFiieelldd(Field)
     |  CharField(*args, **kwargs)
     |  
     |  Base class for all field types
     |  
     |  Method resolution order:
     |      CharField
     |      Field
     |      django.db.models.query_utils.RegisterLookupMixin
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ccaasstt__ddbb__ttyyppee(self, connection)
     |      Return the data type to use in the Cast() function.
     |  
     |  cchheecckk(self, **kwargs)
     |  
     |  ffoorrmmffiieelldd(self, **kwargs)
     |      Return a django.forms.Field instance for this field.
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  ggeett__pprreepp__vvaalluuee(self, value)
     |      Perform preliminary non-db specific value checks and conversions.
     |  
     |  ttoo__ppyytthhoonn(self, value)
     |      Convert the input value into the expected Python data type, raising
     |      django.core.exceptions.ValidationError if the data can't be converted.
     |      Return the converted value. Subclasses should override this.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ddeessccrriippttiioonn = 'String (up to %(max_length)s)'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Field:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memodict)
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggee____(self, other, NotImplemented=NotImplemented)
     |      Return a >= b.  Computed by @total_ordering from (not a < b).
     |  
     |  ____ggtt____(self, other, NotImplemented=NotImplemented)
     |      Return a > b.  Computed by @total_ordering from (not a < b) and (a != b).
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____llee____(self, other, NotImplemented=NotImplemented)
     |      Return a <= b.  Computed by @total_ordering from (a < b) or (a == b).
     |  
     |  ____lltt____(self, other)
     |      Return self<value.
     |  
     |  ____rreedduuccee____(self)
     |      Pickling should return the model._meta.fields instance of the field,
     |      not a new copy of that field. So, use the app registry to load the
     |      model and then the field back.
     |  
     |  ____rreepprr____(self)
     |      Display the module, class, and name of the field.
     |  
     |  ____ssttrr____(self)
     |      Return "app_label.model_label.field_name" for fields attached to
     |      models.
     |  
     |  ccaacchheedd__ccooll = <django.utils.functional.cached_property object>
     |  cclleeaann(self, value, model_instance)
     |      Convert the value's type and run validation. Validation errors
     |      from to_python() and validate() are propagated. Return the correct
     |      value if no error is raised.
     |  
     |  cclloonnee(self)
     |      Uses deconstruct() to clone a new copy of this Field.
     |      Will not preserve any class attachments/attribute names.
     |  
     |  ccoonnttrriibbuuttee__ttoo__ccllaassss(self, cls, name, private_only=False)
     |      Register the field with the model class it belongs to.
     |      
     |      If private_only is True, create a separate instance of this field
     |      for every subclass of cls, even if cls is not an abstract model.
     |  
     |  ddbb__cchheecckk(self, connection)
     |      Return the database column check constraint for this field, for the
     |      provided connection. Works the same way as db_type() for the case that
     |      get_internal_type() does not map to a preexisting model field.
     |  
     |  ddbb__ppaarraammeetteerrss(self, connection)
     |      Extension of db_type(), providing a range of different return values
     |      (type, checks). This will look at db_type(), allowing custom model
     |      fields to override it.
     |  
     |  ddbb__ttyyppee(self, connection)
     |      Return the database column data type for this field, for the provided
     |      connection.
     |  
     |  ddbb__ttyyppee__ppaarraammeetteerrss(self, connection)
     |  
     |  ddbb__ttyyppee__ssuuffffiixx(self, connection)
     |  
     |  ddeeccoonnssttrruucctt(self)
     |      Return enough information to recreate the field as a 4-tuple:
     |      
     |       * The name of the field on the model, if contribute_to_class() has
     |         been run.
     |       * The import path of the field, including the class:e.g.
     |         django.db.models.IntegerField This should be the most portable
     |         version, so less specific may be better.
     |       * A list of positional arguments.
     |       * A dict of keyword arguments.
     |      
     |      Note that the positional or keyword arguments must contain values of
     |      the following types (including inner values of collection types):
     |      
     |       * None, bool, str, int, float, complex, set, frozenset, list, tuple,
     |         dict
     |       * UUID
     |       * datetime.datetime (naive), datetime.date
     |       * top-level classes, top-level functions - will be referenced by their
     |         full import path
     |       * Storage instances - these have their own deconstruct() method
     |      
     |      This is because the values here must be serialized into a text format
     |      (possibly new Python code, possibly JSON) and these are the only types
     |      with encoding handlers defined.
     |      
     |      There's no need to return the exact way the field was instantiated this
     |      time, just ensure that the resulting field is the same - prefer keyword
     |      arguments over positional ones, and omit parameters with their default
     |      values.
     |  
     |  ggeett__aattttnnaammee(self)
     |  
     |  ggeett__aattttnnaammee__ccoolluummnn(self)
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], limit_choices_to=None, ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |  
     |  ggeett__ccooll(self, alias, output_field=None)
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ddbb__pprreepp__ssaavvee(self, value, connection)
     |      Return field's value prepared for saving into a database.
     |  
     |  ggeett__ddbb__pprreepp__vvaalluuee(self, value, connection, prepared=False)
     |      Return field's value prepared for interacting with the database backend.
     |      
     |      Used by the default implementations of get_db_prep_save().
     |  
     |  ggeett__ddeeffaauulltt(self)
     |      Return the default value for this field.
     |  
     |  ggeett__ffiilltteerr__kkwwaarrggss__ffoorr__oobbjjeecctt(self, obj)
     |      Return a dict that when passed as kwargs to self.model.filter(), would
     |      yield all instances having the same value for this field as obj has.
     |  
     |  ggeett__ppkk__vvaalluuee__oonn__ssaavvee(self, instance)
     |      Hook to generate new PK values on save. This method is called when
     |      saving instances with no primary key value set. If this method returns
     |      something else than None, then the returned value is used when saving
     |      the new instance.
     |  
     |  hhaass__ddeeffaauulltt(self)
     |      Return a boolean of whether this field has a default value.
     |  
     |  pprree__ssaavvee(self, model_instance, add)
     |      Return field's value just before saving.
     |  
     |  rreell__ddbb__ttyyppee(self, connection)
     |      Return the data type that a related field pointing to this field should
     |      use. For example, this method is called by ForeignKey and OneToOneField
     |      to determine its data type.
     |  
     |  rruunn__vvaalliiddaattoorrss(self, value)
     |  
     |  ssaavvee__ffoorrmm__ddaattaa(self, instance, data)
     |  
     |  sseelleecctt__ffoorrmmaatt(self, compiler, sql, params)
     |      Custom format for select clauses. For example, GIS columns need to be
     |      selected as AsText(table.col) on MySQL as the table.col data can't be
     |      used by Django.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__nnaammee(self, name)
     |  
     |  vvaalliiddaattee(self, value, model_instance)
     |      Validate value and raise ValidationError if necessary. Subclasses
     |      should override this to provide validation logic.
     |  
     |  vvaalliiddaattoorrss = <django.utils.functional.cached_property object>
     |  vvaalluuee__ffrroomm__oobbjjeecctt(self, obj)
     |      Return the value of this field in the given model instance.
     |  
     |  vvaalluuee__ttoo__ssttrriinngg(self, obj)
     |      Return a string value of this field from the passed obj.
     |      This is used by the serialization framework.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Field:
     |  
     |  ddbb__ttaabblleessppaaccee
     |  
     |  ffllaattcchhooiicceess
     |      Flattened version of choices tuple.
     |  
     |  uunniiqquuee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Field:
     |  
     |  aauuttoo__ccrreeaattiioonn__ccoouunntteerr = -13
     |  
     |  ccllaassss__llooookkuuppss = {'contains': <class 'django.db.models.lookups.Contains...
     |  
     |  ccrreeaattiioonn__ccoouunntteerr = 74
     |  
     |  ddeeffaauulltt__eerrrroorr__mmeessssaaggeess = {'blank': 'This field cannot be blank.', 'inv...
     |  
     |  ddeeffaauulltt__vvaalliiddaattoorrss = []
     |  
     |  eemmppttyy__ssttrriinnggss__aalllloowweedd = True
     |  
     |  eemmppttyy__vvaalluueess = [None, '', [], (), {}]
     |  
     |  hhiiddddeenn = False
     |  
     |  mmaannyy__ttoo__mmaannyy = None
     |  
     |  mmaannyy__ttoo__oonnee = None
     |  
     |  oonnee__ttoo__mmaannyy = None
     |  
     |  oonnee__ttoo__oonnee = None
     |  
     |  rreellaatteedd__mmooddeell = None
     |  
     |  ssyysstteemm__cchheecckk__ddeepprreeccaatteedd__ddeettaaiillss = None
     |  
     |  ssyysstteemm__cchheecckk__rreemmoovveedd__ddeettaaiillss = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ttrraannssffoorrmm(self, lookup_name)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuuppss() from builtins.type
     |  
     |  rreeggiisstteerr__llooookkuupp(lookup, lookup_name=None) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  mmeerrggee__ddiiccttss(dicts)
     |      Merge dicts in reverse to preference the order of the original list. e.g.,
     |      merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class CChheecckkCCoonnssttrraaiinntt(BaseConstraint)
     |  CheckConstraint(*, check, name)
     |  
     |  Method resolution order:
     |      CheckConstraint
     |      BaseConstraint
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____iinniitt____(self, *, check, name)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ccoonnssttrraaiinntt__ssqqll(self, model, schema_editor)
     |  
     |  ccrreeaattee__ssqqll(self, model, schema_editor)
     |  
     |  ddeeccoonnssttrruucctt(self)
     |  
     |  rreemmoovvee__ssqqll(self, model, schema_editor)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ____hhaasshh____ = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseConstraint:
     |  
     |  cclloonnee(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseConstraint:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class CCoommmmaaSSeeppaarraatteeddIInntteeggeerrFFiieelldd(CharField)
     |  CommaSeparatedIntegerField(*args, **kwargs)
     |  
     |  Base class for all field types
     |  
     |  Method resolution order:
     |      CommaSeparatedIntegerField
     |      CharField
     |      Field
     |      django.db.models.query_utils.RegisterLookupMixin
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  ddeeffaauulltt__vvaalliiddaattoorrss = [<django.core.validators.RegexValidator object>]
     |  
     |  ddeessccrriippttiioonn = 'Comma-separated integers'
     |  
     |  ssyysstteemm__cchheecckk__rreemmoovveedd__ddeettaaiillss = {'hint': 'Use CharField(validators=[val...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from CharField:
     |  
     |  ____iinniitt____(self, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ccaasstt__ddbb__ttyyppee(self, connection)
     |      Return the data type to use in the Cast() function.
     |  
     |  cchheecckk(self, **kwargs)
     |  
     |  ffoorrmmffiieelldd(self, **kwargs)
     |      Return a django.forms.Field instance for this field.
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  ggeett__pprreepp__vvaalluuee(self, value)
     |      Perform preliminary non-db specific value checks and conversions.
     |  
     |  ttoo__ppyytthhoonn(self, value)
     |      Convert the input value into the expected Python data type, raising
     |      django.core.exceptions.ValidationError if the data can't be converted.
     |      Return the converted value. Subclasses should override this.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Field:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memodict)
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggee____(self, other, NotImplemented=NotImplemented)
     |      Return a >= b.  Computed by @total_ordering from (not a < b).
     |  
     |  ____ggtt____(self, other, NotImplemented=NotImplemented)
     |      Return a > b.  Computed by @total_ordering from (not a < b) and (a != b).
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____llee____(self, other, NotImplemented=NotImplemented)
     |      Return a <= b.  Computed by @total_ordering from (a < b) or (a == b).
     |  
     |  ____lltt____(self, other)
     |      Return self<value.
     |  
     |  ____rreedduuccee____(self)
     |      Pickling should return the model._meta.fields instance of the field,
     |      not a new copy of that field. So, use the app registry to load the
     |      model and then the field back.
     |  
     |  ____rreepprr____(self)
     |      Display the module, class, and name of the field.
     |  
     |  ____ssttrr____(self)
     |      Return "app_label.model_label.field_name" for fields attached to
     |      models.
     |  
     |  ccaacchheedd__ccooll = <django.utils.functional.cached_property object>
     |  cclleeaann(self, value, model_instance)
     |      Convert the value's type and run validation. Validation errors
     |      from to_python() and validate() are propagated. Return the correct
     |      value if no error is raised.
     |  
     |  cclloonnee(self)
     |      Uses deconstruct() to clone a new copy of this Field.
     |      Will not preserve any class attachments/attribute names.
     |  
     |  ccoonnttrriibbuuttee__ttoo__ccllaassss(self, cls, name, private_only=False)
     |      Register the field with the model class it belongs to.
     |      
     |      If private_only is True, create a separate instance of this field
     |      for every subclass of cls, even if cls is not an abstract model.
     |  
     |  ddbb__cchheecckk(self, connection)
     |      Return the database column check constraint for this field, for the
     |      provided connection. Works the same way as db_type() for the case that
     |      get_internal_type() does not map to a preexisting model field.
     |  
     |  ddbb__ppaarraammeetteerrss(self, connection)
     |      Extension of db_type(), providing a range of different return values
     |      (type, checks). This will look at db_type(), allowing custom model
     |      fields to override it.
     |  
     |  ddbb__ttyyppee(self, connection)
     |      Return the database column data type for this field, for the provided
     |      connection.
     |  
     |  ddbb__ttyyppee__ppaarraammeetteerrss(self, connection)
     |  
     |  ddbb__ttyyppee__ssuuffffiixx(self, connection)
     |  
     |  ddeeccoonnssttrruucctt(self)
     |      Return enough information to recreate the field as a 4-tuple:
     |      
     |       * The name of the field on the model, if contribute_to_class() has
     |         been run.
     |       * The import path of the field, including the class:e.g.
     |         django.db.models.IntegerField This should be the most portable
     |         version, so less specific may be better.
     |       * A list of positional arguments.
     |       * A dict of keyword arguments.
     |      
     |      Note that the positional or keyword arguments must contain values of
     |      the following types (including inner values of collection types):
     |      
     |       * None, bool, str, int, float, complex, set, frozenset, list, tuple,
     |         dict
     |       * UUID
     |       * datetime.datetime (naive), datetime.date
     |       * top-level classes, top-level functions - will be referenced by their
     |         full import path
     |       * Storage instances - these have their own deconstruct() method
     |      
     |      This is because the values here must be serialized into a text format
     |      (possibly new Python code, possibly JSON) and these are the only types
     |      with encoding handlers defined.
     |      
     |      There's no need to return the exact way the field was instantiated this
     |      time, just ensure that the resulting field is the same - prefer keyword
     |      arguments over positional ones, and omit parameters with their default
     |      values.
     |  
     |  ggeett__aattttnnaammee(self)
     |  
     |  ggeett__aattttnnaammee__ccoolluummnn(self)
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], limit_choices_to=None, ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |  
     |  ggeett__ccooll(self, alias, output_field=None)
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ddbb__pprreepp__ssaavvee(self, value, connection)
     |      Return field's value prepared for saving into a database.
     |  
     |  ggeett__ddbb__pprreepp__vvaalluuee(self, value, connection, prepared=False)
     |      Return field's value prepared for interacting with the database backend.
     |      
     |      Used by the default implementations of get_db_prep_save().
     |  
     |  ggeett__ddeeffaauulltt(self)
     |      Return the default value for this field.
     |  
     |  ggeett__ffiilltteerr__kkwwaarrggss__ffoorr__oobbjjeecctt(self, obj)
     |      Return a dict that when passed as kwargs to self.model.filter(), would
     |      yield all instances having the same value for this field as obj has.
     |  
     |  ggeett__ppkk__vvaalluuee__oonn__ssaavvee(self, instance)
     |      Hook to generate new PK values on save. This method is called when
     |      saving instances with no primary key value set. If this method returns
     |      something else than None, then the returned value is used when saving
     |      the new instance.
     |  
     |  hhaass__ddeeffaauulltt(self)
     |      Return a boolean of whether this field has a default value.
     |  
     |  pprree__ssaavvee(self, model_instance, add)
     |      Return field's value just before saving.
     |  
     |  rreell__ddbb__ttyyppee(self, connection)
     |      Return the data type that a related field pointing to this field should
     |      use. For example, this method is called by ForeignKey and OneToOneField
     |      to determine its data type.
     |  
     |  rruunn__vvaalliiddaattoorrss(self, value)
     |  
     |  ssaavvee__ffoorrmm__ddaattaa(self, instance, data)
     |  
     |  sseelleecctt__ffoorrmmaatt(self, compiler, sql, params)
     |      Custom format for select clauses. For example, GIS columns need to be
     |      selected as AsText(table.col) on MySQL as the table.col data can't be
     |      used by Django.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__nnaammee(self, name)
     |  
     |  vvaalliiddaattee(self, value, model_instance)
     |      Validate value and raise ValidationError if necessary. Subclasses
     |      should override this to provide validation logic.
     |  
     |  vvaalliiddaattoorrss = <django.utils.functional.cached_property object>
     |  vvaalluuee__ffrroomm__oobbjjeecctt(self, obj)
     |      Return the value of this field in the given model instance.
     |  
     |  vvaalluuee__ttoo__ssttrriinngg(self, obj)
     |      Return a string value of this field from the passed obj.
     |      This is used by the serialization framework.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Field:
     |  
     |  ddbb__ttaabblleessppaaccee
     |  
     |  ffllaattcchhooiicceess
     |      Flattened version of choices tuple.
     |  
     |  uunniiqquuee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Field:
     |  
     |  aauuttoo__ccrreeaattiioonn__ccoouunntteerr = -13
     |  
     |  ccllaassss__llooookkuuppss = {'contains': <class 'django.db.models.lookups.Contains...
     |  
     |  ccrreeaattiioonn__ccoouunntteerr = 74
     |  
     |  ddeeffaauulltt__eerrrroorr__mmeessssaaggeess = {'blank': 'This field cannot be blank.', 'inv...
     |  
     |  eemmppttyy__ssttrriinnggss__aalllloowweedd = True
     |  
     |  eemmppttyy__vvaalluueess = [None, '', [], (), {}]
     |  
     |  hhiiddddeenn = False
     |  
     |  mmaannyy__ttoo__mmaannyy = None
     |  
     |  mmaannyy__ttoo__oonnee = None
     |  
     |  oonnee__ttoo__mmaannyy = None
     |  
     |  oonnee__ttoo__oonnee = None
     |  
     |  rreellaatteedd__mmooddeell = None
     |  
     |  ssyysstteemm__cchheecckk__ddeepprreeccaatteedd__ddeettaaiillss = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ttrraannssffoorrmm(self, lookup_name)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuuppss() from builtins.type
     |  
     |  rreeggiisstteerr__llooookkuupp(lookup, lookup_name=None) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  mmeerrggee__ddiiccttss(dicts)
     |      Merge dicts in reverse to preference the order of the original list. e.g.,
     |      merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class CCoouunntt(Aggregate)
     |  Count(*args, **kwargs)
     |  
     |  An SQL function call.
     |  
     |  Method resolution order:
     |      Count
     |      Aggregate
     |      django.db.models.expressions.Func
     |      django.db.models.expressions.SQLiteNumericMixin
     |      django.db.models.expressions.Expression
     |      django.db.models.expressions.BaseExpression
     |      django.db.models.expressions.Combinable
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, expression, filter=None, **extra)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ccoonnvveerrtt__vvaalluuee(self, value, expression, connection)
     |      Expressions provide their own converters because users have the option
     |      of manually specifying the output_field which may be a different type
     |      from the one the database returns.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  aallllooww__ddiissttiinncctt = True
     |  
     |  ffuunnccttiioonn = 'COUNT'
     |  
     |  nnaammee = 'Count'
     |  
     |  oouuttppuutt__ffiieelldd = <django.db.models.fields.IntegerField>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Aggregate:
     |  
     |  aass__ssqqll(self, compiler, connection, **extra_context)
     |      Responsible for returning a (sql, [params]) tuple to be included
     |      in the current query.
     |      
     |      Different backends can provide their own implementation, by
     |      providing an `as_{vendor}` method and patching the Expression:
     |      
     |      ```
     |      def override_as_sql(self, compiler, connection):
     |          # custom logic
     |          return super().as_sql(compiler, connection)
     |      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
     |      ```
     |      
     |      Arguments:
     |       * compiler: the query compiler responsible for generating the query.
     |         Must have a compile method, returning a (sql, [params]) tuple.
     |         Calling compiler(value) will return a quoted `value`.
     |      
     |       * connection: the database connection used for the current query.
     |      
     |      Return: (sql, params)
     |        Where `sql` is a string containing ordered sql parameters to be
     |        replaced with the elements of the list `params`.
     |  
     |  ggeett__ggrroouupp__bbyy__ccoollss(self)
     |  
     |  ggeett__ssoouurrccee__eexxpprreessssiioonnss(self)
     |  
     |  ggeett__ssoouurrccee__ffiieellddss(self)
     |      Return the underlying field types used by this aggregate.
     |  
     |  rreessoollvvee__eexxpprreessssiioonn(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)
     |      Provide the chance to do any preprocessing or validation before being
     |      added to the query.
     |      
     |      Arguments:
     |       * query: the backend query implementation
     |       * allow_joins: boolean allowing or denying use of joins
     |         in this query
     |       * reuse: a set of reusable joins for multijoins
     |       * summarize: a terminal aggregate clause
     |       * for_save: whether this expression about to be used in a save or update
     |      
     |      Return: an Expression to be added to the query.
     |  
     |  sseett__ssoouurrccee__eexxpprreessssiioonnss(self, exprs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Aggregate:
     |  
     |  ddeeffaauulltt__aalliiaass
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Aggregate:
     |  
     |  ccoonnttaaiinnss__aaggggrreeggaattee = True
     |  
     |  ffiilltteerr__tteemmppllaattee = '%s FILTER (WHERE %%(filter)s)'
     |  
     |  tteemmppllaattee = '%(function)s(%(distinct)s%(expressions)s)'
     |  
     |  wwiinnddooww__ccoommppaattiibbllee = True
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.expressions.Func:
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ccooppyy(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.db.models.expressions.Func:
     |  
     |  aarrgg__jjooiinneerr = ', '
     |  
     |  aarriittyy = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.expressions.SQLiteNumericMixin:
     |  
     |  aass__ssqqlliittee(self, compiler, connection, **extra_context)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.expressions.SQLiteNumericMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.expressions.BaseExpression:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettssttaattee____(self)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  aasscc(self, **kwargs)
     |  
     |  ccoonnttaaiinnss__ccoolluummnn__rreeffeerreenncceess = <django.utils.functional.cached_property object>
     |  ccoonnttaaiinnss__oovveerr__ccllaauussee = <django.utils.functional.cached_property object>
     |  ddeeccoonnssttrruucctt(obj)
     |      Return a 3-tuple of class import path, positional arguments,
     |      and keyword arguments.
     |  
     |  ddeesscc(self, **kwargs)
     |  
     |  ffllaatttteenn(self)
     |      Recursively yield this expression and all subexpressions, in
     |      depth-first order.
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__llooookkuupp(self, lookup)
     |  
     |  ggeett__ttrraannssffoorrmm(self, name)
     |  
     |  iiddeennttiittyy = <django.utils.functional.cached_property object>
     |  rreellaabbeelleedd__cclloonnee(self, change_map)
     |  
     |  rreevveerrssee__oorrddeerriinngg(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.expressions.BaseExpression:
     |  
     |  ____nneeww____(cls, *args, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.expressions.BaseExpression:
     |  
     |  ffiieelldd
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.db.models.expressions.BaseExpression:
     |  
     |  ffiilltteerraabbllee = True
     |  
     |  iiss__ssuummmmaarryy = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.expressions.Combinable:
     |  
     |  ____aadddd____(self, other)
     |  
     |  ____aanndd____(self, other)
     |  
     |  ____mmoodd____(self, other)
     |  
     |  ____mmuull____(self, other)
     |  
     |  ____nneegg____(self)
     |  
     |  ____oorr____(self, other)
     |  
     |  ____ppooww____(self, other)
     |  
     |  ____rraadddd____(self, other)
     |  
     |  ____rraanndd____(self, other)
     |  
     |  ____rrmmoodd____(self, other)
     |  
     |  ____rrmmuull____(self, other)
     |  
     |  ____rroorr____(self, other)
     |  
     |  ____rrppooww____(self, other)
     |  
     |  ____rrssuubb____(self, other)
     |  
     |  ____rrttrruueeddiivv____(self, other)
     |  
     |  ____ssuubb____(self, other)
     |  
     |  ____ttrruueeddiivv____(self, other)
     |  
     |  bbiittaanndd(self, other)
     |  
     |  bbiittlleeffttsshhiifftt(self, other)
     |  
     |  bbiittoorr(self, other)
     |  
     |  bbiittrriigghhttsshhiifftt(self, other)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.db.models.expressions.Combinable:
     |  
     |  AADDDD = '+'
     |  
     |  BBIITTAANNDD = '&'
     |  
     |  BBIITTLLEEFFTTSSHHIIFFTT = '<<'
     |  
     |  BBIITTOORR = '|'
     |  
     |  BBIITTRRIIGGHHTTSSHHIIFFTT = '>>'
     |  
     |  DDIIVV = '/'
     |  
     |  MMOODD = '%%'
     |  
     |  MMUULL = '*'
     |  
     |  PPOOWW = '^'
     |  
     |  SSUUBB = '-'
    
    class DDaatteeFFiieelldd(DateTimeCheckMixin, Field)
     |  DateField(verbose_name=None, name=None, auto_now=False, auto_now_add=False, **kwargs)
     |  
     |  Base class for all field types
     |  
     |  Method resolution order:
     |      DateField
     |      DateTimeCheckMixin
     |      Field
     |      django.db.models.query_utils.RegisterLookupMixin
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, verbose_name=None, name=None, auto_now=False, auto_now_add=False, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ccoonnttrriibbuuttee__ttoo__ccllaassss(self, cls, name, **kwargs)
     |      Register the field with the model class it belongs to.
     |      
     |      If private_only is True, create a separate instance of this field
     |      for every subclass of cls, even if cls is not an abstract model.
     |  
     |  ddeeccoonnssttrruucctt(self)
     |      Return enough information to recreate the field as a 4-tuple:
     |      
     |       * The name of the field on the model, if contribute_to_class() has
     |         been run.
     |       * The import path of the field, including the class:e.g.
     |         django.db.models.IntegerField This should be the most portable
     |         version, so less specific may be better.
     |       * A list of positional arguments.
     |       * A dict of keyword arguments.
     |      
     |      Note that the positional or keyword arguments must contain values of
     |      the following types (including inner values of collection types):
     |      
     |       * None, bool, str, int, float, complex, set, frozenset, list, tuple,
     |         dict
     |       * UUID
     |       * datetime.datetime (naive), datetime.date
     |       * top-level classes, top-level functions - will be referenced by their
     |         full import path
     |       * Storage instances - these have their own deconstruct() method
     |      
     |      This is because the values here must be serialized into a text format
     |      (possibly new Python code, possibly JSON) and these are the only types
     |      with encoding handlers defined.
     |      
     |      There's no need to return the exact way the field was instantiated this
     |      time, just ensure that the resulting field is the same - prefer keyword
     |      arguments over positional ones, and omit parameters with their default
     |      values.
     |  
     |  ffoorrmmffiieelldd(self, **kwargs)
     |      Return a django.forms.Field instance for this field.
     |  
     |  ggeett__ddbb__pprreepp__vvaalluuee(self, value, connection, prepared=False)
     |      Return field's value prepared for interacting with the database backend.
     |      
     |      Used by the default implementations of get_db_prep_save().
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  ggeett__pprreepp__vvaalluuee(self, value)
     |      Perform preliminary non-db specific value checks and conversions.
     |  
     |  pprree__ssaavvee(self, model_instance, add)
     |      Return field's value just before saving.
     |  
     |  ttoo__ppyytthhoonn(self, value)
     |      Convert the input value into the expected Python data type, raising
     |      django.core.exceptions.ValidationError if the data can't be converted.
     |      Return the converted value. Subclasses should override this.
     |  
     |  vvaalluuee__ttoo__ssttrriinngg(self, obj)
     |      Return a string value of this field from the passed obj.
     |      This is used by the serialization framework.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ccllaassss__llooookkuuppss = {'day': <class 'django.db.models.functions.datetime.Ex...
     |  
     |  ddeeffaauulltt__eerrrroorr__mmeessssaaggeess = {'invalid': "'%(value)s' value has an invalid...
     |  
     |  ddeessccrriippttiioonn = 'Date (without time)'
     |  
     |  eemmppttyy__ssttrriinnggss__aalllloowweedd = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from DateTimeCheckMixin:
     |  
     |  cchheecckk(self, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from DateTimeCheckMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Field:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memodict)
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggee____(self, other, NotImplemented=NotImplemented)
     |      Return a >= b.  Computed by @total_ordering from (not a < b).
     |  
     |  ____ggtt____(self, other, NotImplemented=NotImplemented)
     |      Return a > b.  Computed by @total_ordering from (not a < b) and (a != b).
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____llee____(self, other, NotImplemented=NotImplemented)
     |      Return a <= b.  Computed by @total_ordering from (a < b) or (a == b).
     |  
     |  ____lltt____(self, other)
     |      Return self<value.
     |  
     |  ____rreedduuccee____(self)
     |      Pickling should return the model._meta.fields instance of the field,
     |      not a new copy of that field. So, use the app registry to load the
     |      model and then the field back.
     |  
     |  ____rreepprr____(self)
     |      Display the module, class, and name of the field.
     |  
     |  ____ssttrr____(self)
     |      Return "app_label.model_label.field_name" for fields attached to
     |      models.
     |  
     |  ccaacchheedd__ccooll = <django.utils.functional.cached_property object>
     |  ccaasstt__ddbb__ttyyppee(self, connection)
     |      Return the data type to use in the Cast() function.
     |  
     |  cclleeaann(self, value, model_instance)
     |      Convert the value's type and run validation. Validation errors
     |      from to_python() and validate() are propagated. Return the correct
     |      value if no error is raised.
     |  
     |  cclloonnee(self)
     |      Uses deconstruct() to clone a new copy of this Field.
     |      Will not preserve any class attachments/attribute names.
     |  
     |  ddbb__cchheecckk(self, connection)
     |      Return the database column check constraint for this field, for the
     |      provided connection. Works the same way as db_type() for the case that
     |      get_internal_type() does not map to a preexisting model field.
     |  
     |  ddbb__ppaarraammeetteerrss(self, connection)
     |      Extension of db_type(), providing a range of different return values
     |      (type, checks). This will look at db_type(), allowing custom model
     |      fields to override it.
     |  
     |  ddbb__ttyyppee(self, connection)
     |      Return the database column data type for this field, for the provided
     |      connection.
     |  
     |  ddbb__ttyyppee__ppaarraammeetteerrss(self, connection)
     |  
     |  ddbb__ttyyppee__ssuuffffiixx(self, connection)
     |  
     |  ggeett__aattttnnaammee(self)
     |  
     |  ggeett__aattttnnaammee__ccoolluummnn(self)
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], limit_choices_to=None, ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |  
     |  ggeett__ccooll(self, alias, output_field=None)
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ddbb__pprreepp__ssaavvee(self, value, connection)
     |      Return field's value prepared for saving into a database.
     |  
     |  ggeett__ddeeffaauulltt(self)
     |      Return the default value for this field.
     |  
     |  ggeett__ffiilltteerr__kkwwaarrggss__ffoorr__oobbjjeecctt(self, obj)
     |      Return a dict that when passed as kwargs to self.model.filter(), would
     |      yield all instances having the same value for this field as obj has.
     |  
     |  ggeett__ppkk__vvaalluuee__oonn__ssaavvee(self, instance)
     |      Hook to generate new PK values on save. This method is called when
     |      saving instances with no primary key value set. If this method returns
     |      something else than None, then the returned value is used when saving
     |      the new instance.
     |  
     |  hhaass__ddeeffaauulltt(self)
     |      Return a boolean of whether this field has a default value.
     |  
     |  rreell__ddbb__ttyyppee(self, connection)
     |      Return the data type that a related field pointing to this field should
     |      use. For example, this method is called by ForeignKey and OneToOneField
     |      to determine its data type.
     |  
     |  rruunn__vvaalliiddaattoorrss(self, value)
     |  
     |  ssaavvee__ffoorrmm__ddaattaa(self, instance, data)
     |  
     |  sseelleecctt__ffoorrmmaatt(self, compiler, sql, params)
     |      Custom format for select clauses. For example, GIS columns need to be
     |      selected as AsText(table.col) on MySQL as the table.col data can't be
     |      used by Django.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__nnaammee(self, name)
     |  
     |  vvaalliiddaattee(self, value, model_instance)
     |      Validate value and raise ValidationError if necessary. Subclasses
     |      should override this to provide validation logic.
     |  
     |  vvaalliiddaattoorrss = <django.utils.functional.cached_property object>
     |  vvaalluuee__ffrroomm__oobbjjeecctt(self, obj)
     |      Return the value of this field in the given model instance.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Field:
     |  
     |  ddbb__ttaabblleessppaaccee
     |  
     |  ffllaattcchhooiicceess
     |      Flattened version of choices tuple.
     |  
     |  uunniiqquuee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Field:
     |  
     |  aauuttoo__ccrreeaattiioonn__ccoouunntteerr = -13
     |  
     |  ccrreeaattiioonn__ccoouunntteerr = 74
     |  
     |  ddeeffaauulltt__vvaalliiddaattoorrss = []
     |  
     |  eemmppttyy__vvaalluueess = [None, '', [], (), {}]
     |  
     |  hhiiddddeenn = False
     |  
     |  mmaannyy__ttoo__mmaannyy = None
     |  
     |  mmaannyy__ttoo__oonnee = None
     |  
     |  oonnee__ttoo__mmaannyy = None
     |  
     |  oonnee__ttoo__oonnee = None
     |  
     |  rreellaatteedd__mmooddeell = None
     |  
     |  ssyysstteemm__cchheecckk__ddeepprreeccaatteedd__ddeettaaiillss = None
     |  
     |  ssyysstteemm__cchheecckk__rreemmoovveedd__ddeettaaiillss = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ttrraannssffoorrmm(self, lookup_name)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuuppss() from builtins.type
     |  
     |  rreeggiisstteerr__llooookkuupp(lookup, lookup_name=None) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  mmeerrggee__ddiiccttss(dicts)
     |      Merge dicts in reverse to preference the order of the original list. e.g.,
     |      merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.
    
    class DDaatteeTTiimmeeFFiieelldd(DateField)
     |  DateTimeField(verbose_name=None, name=None, auto_now=False, auto_now_add=False, **kwargs)
     |  
     |  Base class for all field types
     |  
     |  Method resolution order:
     |      DateTimeField
     |      DateField
     |      DateTimeCheckMixin
     |      Field
     |      django.db.models.query_utils.RegisterLookupMixin
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ffoorrmmffiieelldd(self, **kwargs)
     |      Return a django.forms.Field instance for this field.
     |  
     |  ggeett__ddbb__pprreepp__vvaalluuee(self, value, connection, prepared=False)
     |      Return field's value prepared for interacting with the database backend.
     |      
     |      Used by the default implementations of get_db_prep_save().
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  ggeett__pprreepp__vvaalluuee(self, value)
     |      Perform preliminary non-db specific value checks and conversions.
     |  
     |  pprree__ssaavvee(self, model_instance, add)
     |      Return field's value just before saving.
     |  
     |  ttoo__ppyytthhoonn(self, value)
     |      Convert the input value into the expected Python data type, raising
     |      django.core.exceptions.ValidationError if the data can't be converted.
     |      Return the converted value. Subclasses should override this.
     |  
     |  vvaalluuee__ttoo__ssttrriinngg(self, obj)
     |      Return a string value of this field from the passed obj.
     |      This is used by the serialization framework.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ccllaassss__llooookkuuppss = {'date': <class 'django.db.models.functions.datetime.T...
     |  
     |  ddeeffaauulltt__eerrrroorr__mmeessssaaggeess = {'invalid': "'%(value)s' value has an invalid...
     |  
     |  ddeessccrriippttiioonn = 'Date (with time)'
     |  
     |  eemmppttyy__ssttrriinnggss__aalllloowweedd = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from DateField:
     |  
     |  ____iinniitt____(self, verbose_name=None, name=None, auto_now=False, auto_now_add=False, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ccoonnttrriibbuuttee__ttoo__ccllaassss(self, cls, name, **kwargs)
     |      Register the field with the model class it belongs to.
     |      
     |      If private_only is True, create a separate instance of this field
     |      for every subclass of cls, even if cls is not an abstract model.
     |  
     |  ddeeccoonnssttrruucctt(self)
     |      Return enough information to recreate the field as a 4-tuple:
     |      
     |       * The name of the field on the model, if contribute_to_class() has
     |         been run.
     |       * The import path of the field, including the class:e.g.
     |         django.db.models.IntegerField This should be the most portable
     |         version, so less specific may be better.
     |       * A list of positional arguments.
     |       * A dict of keyword arguments.
     |      
     |      Note that the positional or keyword arguments must contain values of
     |      the following types (including inner values of collection types):
     |      
     |       * None, bool, str, int, float, complex, set, frozenset, list, tuple,
     |         dict
     |       * UUID
     |       * datetime.datetime (naive), datetime.date
     |       * top-level classes, top-level functions - will be referenced by their
     |         full import path
     |       * Storage instances - these have their own deconstruct() method
     |      
     |      This is because the values here must be serialized into a text format
     |      (possibly new Python code, possibly JSON) and these are the only types
     |      with encoding handlers defined.
     |      
     |      There's no need to return the exact way the field was instantiated this
     |      time, just ensure that the resulting field is the same - prefer keyword
     |      arguments over positional ones, and omit parameters with their default
     |      values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from DateTimeCheckMixin:
     |  
     |  cchheecckk(self, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from DateTimeCheckMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Field:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memodict)
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggee____(self, other, NotImplemented=NotImplemented)
     |      Return a >= b.  Computed by @total_ordering from (not a < b).
     |  
     |  ____ggtt____(self, other, NotImplemented=NotImplemented)
     |      Return a > b.  Computed by @total_ordering from (not a < b) and (a != b).
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____llee____(self, other, NotImplemented=NotImplemented)
     |      Return a <= b.  Computed by @total_ordering from (a < b) or (a == b).
     |  
     |  ____lltt____(self, other)
     |      Return self<value.
     |  
     |  ____rreedduuccee____(self)
     |      Pickling should return the model._meta.fields instance of the field,
     |      not a new copy of that field. So, use the app registry to load the
     |      model and then the field back.
     |  
     |  ____rreepprr____(self)
     |      Display the module, class, and name of the field.
     |  
     |  ____ssttrr____(self)
     |      Return "app_label.model_label.field_name" for fields attached to
     |      models.
     |  
     |  ccaacchheedd__ccooll = <django.utils.functional.cached_property object>
     |  ccaasstt__ddbb__ttyyppee(self, connection)
     |      Return the data type to use in the Cast() function.
     |  
     |  cclleeaann(self, value, model_instance)
     |      Convert the value's type and run validation. Validation errors
     |      from to_python() and validate() are propagated. Return the correct
     |      value if no error is raised.
     |  
     |  cclloonnee(self)
     |      Uses deconstruct() to clone a new copy of this Field.
     |      Will not preserve any class attachments/attribute names.
     |  
     |  ddbb__cchheecckk(self, connection)
     |      Return the database column check constraint for this field, for the
     |      provided connection. Works the same way as db_type() for the case that
     |      get_internal_type() does not map to a preexisting model field.
     |  
     |  ddbb__ppaarraammeetteerrss(self, connection)
     |      Extension of db_type(), providing a range of different return values
     |      (type, checks). This will look at db_type(), allowing custom model
     |      fields to override it.
     |  
     |  ddbb__ttyyppee(self, connection)
     |      Return the database column data type for this field, for the provided
     |      connection.
     |  
     |  ddbb__ttyyppee__ppaarraammeetteerrss(self, connection)
     |  
     |  ddbb__ttyyppee__ssuuffffiixx(self, connection)
     |  
     |  ggeett__aattttnnaammee(self)
     |  
     |  ggeett__aattttnnaammee__ccoolluummnn(self)
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], limit_choices_to=None, ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |  
     |  ggeett__ccooll(self, alias, output_field=None)
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ddbb__pprreepp__ssaavvee(self, value, connection)
     |      Return field's value prepared for saving into a database.
     |  
     |  ggeett__ddeeffaauulltt(self)
     |      Return the default value for this field.
     |  
     |  ggeett__ffiilltteerr__kkwwaarrggss__ffoorr__oobbjjeecctt(self, obj)
     |      Return a dict that when passed as kwargs to self.model.filter(), would
     |      yield all instances having the same value for this field as obj has.
     |  
     |  ggeett__ppkk__vvaalluuee__oonn__ssaavvee(self, instance)
     |      Hook to generate new PK values on save. This method is called when
     |      saving instances with no primary key value set. If this method returns
     |      something else than None, then the returned value is used when saving
     |      the new instance.
     |  
     |  hhaass__ddeeffaauulltt(self)
     |      Return a boolean of whether this field has a default value.
     |  
     |  rreell__ddbb__ttyyppee(self, connection)
     |      Return the data type that a related field pointing to this field should
     |      use. For example, this method is called by ForeignKey and OneToOneField
     |      to determine its data type.
     |  
     |  rruunn__vvaalliiddaattoorrss(self, value)
     |  
     |  ssaavvee__ffoorrmm__ddaattaa(self, instance, data)
     |  
     |  sseelleecctt__ffoorrmmaatt(self, compiler, sql, params)
     |      Custom format for select clauses. For example, GIS columns need to be
     |      selected as AsText(table.col) on MySQL as the table.col data can't be
     |      used by Django.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__nnaammee(self, name)
     |  
     |  vvaalliiddaattee(self, value, model_instance)
     |      Validate value and raise ValidationError if necessary. Subclasses
     |      should override this to provide validation logic.
     |  
     |  vvaalliiddaattoorrss = <django.utils.functional.cached_property object>
     |  vvaalluuee__ffrroomm__oobbjjeecctt(self, obj)
     |      Return the value of this field in the given model instance.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Field:
     |  
     |  ddbb__ttaabblleessppaaccee
     |  
     |  ffllaattcchhooiicceess
     |      Flattened version of choices tuple.
     |  
     |  uunniiqquuee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Field:
     |  
     |  aauuttoo__ccrreeaattiioonn__ccoouunntteerr = -13
     |  
     |  ccrreeaattiioonn__ccoouunntteerr = 74
     |  
     |  ddeeffaauulltt__vvaalliiddaattoorrss = []
     |  
     |  eemmppttyy__vvaalluueess = [None, '', [], (), {}]
     |  
     |  hhiiddddeenn = False
     |  
     |  mmaannyy__ttoo__mmaannyy = None
     |  
     |  mmaannyy__ttoo__oonnee = None
     |  
     |  oonnee__ttoo__mmaannyy = None
     |  
     |  oonnee__ttoo__oonnee = None
     |  
     |  rreellaatteedd__mmooddeell = None
     |  
     |  ssyysstteemm__cchheecckk__ddeepprreeccaatteedd__ddeettaaiillss = None
     |  
     |  ssyysstteemm__cchheecckk__rreemmoovveedd__ddeettaaiillss = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ttrraannssffoorrmm(self, lookup_name)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuuppss() from builtins.type
     |  
     |  rreeggiisstteerr__llooookkuupp(lookup, lookup_name=None) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  mmeerrggee__ddiiccttss(dicts)
     |      Merge dicts in reverse to preference the order of the original list. e.g.,
     |      merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.
    
    class DDeecciimmaallFFiieelldd(Field)
     |  DecimalField(verbose_name=None, name=None, max_digits=None, decimal_places=None, **kwargs)
     |  
     |  Base class for all field types
     |  
     |  Method resolution order:
     |      DecimalField
     |      Field
     |      django.db.models.query_utils.RegisterLookupMixin
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, verbose_name=None, name=None, max_digits=None, decimal_places=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  cchheecckk(self, **kwargs)
     |  
     |  ccoonntteexxtt = <django.utils.functional.cached_property object>
     |  ddeeccoonnssttrruucctt(self)
     |      Return enough information to recreate the field as a 4-tuple:
     |      
     |       * The name of the field on the model, if contribute_to_class() has
     |         been run.
     |       * The import path of the field, including the class:e.g.
     |         django.db.models.IntegerField This should be the most portable
     |         version, so less specific may be better.
     |       * A list of positional arguments.
     |       * A dict of keyword arguments.
     |      
     |      Note that the positional or keyword arguments must contain values of
     |      the following types (including inner values of collection types):
     |      
     |       * None, bool, str, int, float, complex, set, frozenset, list, tuple,
     |         dict
     |       * UUID
     |       * datetime.datetime (naive), datetime.date
     |       * top-level classes, top-level functions - will be referenced by their
     |         full import path
     |       * Storage instances - these have their own deconstruct() method
     |      
     |      This is because the values here must be serialized into a text format
     |      (possibly new Python code, possibly JSON) and these are the only types
     |      with encoding handlers defined.
     |      
     |      There's no need to return the exact way the field was instantiated this
     |      time, just ensure that the resulting field is the same - prefer keyword
     |      arguments over positional ones, and omit parameters with their default
     |      values.
     |  
     |  ffoorrmmffiieelldd(self, **kwargs)
     |      Return a django.forms.Field instance for this field.
     |  
     |  ggeett__ddbb__pprreepp__ssaavvee(self, value, connection)
     |      Return field's value prepared for saving into a database.
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  ggeett__pprreepp__vvaalluuee(self, value)
     |      Perform preliminary non-db specific value checks and conversions.
     |  
     |  ttoo__ppyytthhoonn(self, value)
     |      Convert the input value into the expected Python data type, raising
     |      django.core.exceptions.ValidationError if the data can't be converted.
     |      Return the converted value. Subclasses should override this.
     |  
     |  vvaalliiddaattoorrss = <django.utils.functional.cached_property object>
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ddeeffaauulltt__eerrrroorr__mmeessssaaggeess = {'invalid': "'%(value)s' value must be a deci...
     |  
     |  ddeessccrriippttiioonn = 'Decimal number'
     |  
     |  eemmppttyy__ssttrriinnggss__aalllloowweedd = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Field:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memodict)
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggee____(self, other, NotImplemented=NotImplemented)
     |      Return a >= b.  Computed by @total_ordering from (not a < b).
     |  
     |  ____ggtt____(self, other, NotImplemented=NotImplemented)
     |      Return a > b.  Computed by @total_ordering from (not a < b) and (a != b).
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____llee____(self, other, NotImplemented=NotImplemented)
     |      Return a <= b.  Computed by @total_ordering from (a < b) or (a == b).
     |  
     |  ____lltt____(self, other)
     |      Return self<value.
     |  
     |  ____rreedduuccee____(self)
     |      Pickling should return the model._meta.fields instance of the field,
     |      not a new copy of that field. So, use the app registry to load the
     |      model and then the field back.
     |  
     |  ____rreepprr____(self)
     |      Display the module, class, and name of the field.
     |  
     |  ____ssttrr____(self)
     |      Return "app_label.model_label.field_name" for fields attached to
     |      models.
     |  
     |  ccaacchheedd__ccooll = <django.utils.functional.cached_property object>
     |  ccaasstt__ddbb__ttyyppee(self, connection)
     |      Return the data type to use in the Cast() function.
     |  
     |  cclleeaann(self, value, model_instance)
     |      Convert the value's type and run validation. Validation errors
     |      from to_python() and validate() are propagated. Return the correct
     |      value if no error is raised.
     |  
     |  cclloonnee(self)
     |      Uses deconstruct() to clone a new copy of this Field.
     |      Will not preserve any class attachments/attribute names.
     |  
     |  ccoonnttrriibbuuttee__ttoo__ccllaassss(self, cls, name, private_only=False)
     |      Register the field with the model class it belongs to.
     |      
     |      If private_only is True, create a separate instance of this field
     |      for every subclass of cls, even if cls is not an abstract model.
     |  
     |  ddbb__cchheecckk(self, connection)
     |      Return the database column check constraint for this field, for the
     |      provided connection. Works the same way as db_type() for the case that
     |      get_internal_type() does not map to a preexisting model field.
     |  
     |  ddbb__ppaarraammeetteerrss(self, connection)
     |      Extension of db_type(), providing a range of different return values
     |      (type, checks). This will look at db_type(), allowing custom model
     |      fields to override it.
     |  
     |  ddbb__ttyyppee(self, connection)
     |      Return the database column data type for this field, for the provided
     |      connection.
     |  
     |  ddbb__ttyyppee__ppaarraammeetteerrss(self, connection)
     |  
     |  ddbb__ttyyppee__ssuuffffiixx(self, connection)
     |  
     |  ggeett__aattttnnaammee(self)
     |  
     |  ggeett__aattttnnaammee__ccoolluummnn(self)
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], limit_choices_to=None, ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |  
     |  ggeett__ccooll(self, alias, output_field=None)
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ddbb__pprreepp__vvaalluuee(self, value, connection, prepared=False)
     |      Return field's value prepared for interacting with the database backend.
     |      
     |      Used by the default implementations of get_db_prep_save().
     |  
     |  ggeett__ddeeffaauulltt(self)
     |      Return the default value for this field.
     |  
     |  ggeett__ffiilltteerr__kkwwaarrggss__ffoorr__oobbjjeecctt(self, obj)
     |      Return a dict that when passed as kwargs to self.model.filter(), would
     |      yield all instances having the same value for this field as obj has.
     |  
     |  ggeett__ppkk__vvaalluuee__oonn__ssaavvee(self, instance)
     |      Hook to generate new PK values on save. This method is called when
     |      saving instances with no primary key value set. If this method returns
     |      something else than None, then the returned value is used when saving
     |      the new instance.
     |  
     |  hhaass__ddeeffaauulltt(self)
     |      Return a boolean of whether this field has a default value.
     |  
     |  pprree__ssaavvee(self, model_instance, add)
     |      Return field's value just before saving.
     |  
     |  rreell__ddbb__ttyyppee(self, connection)
     |      Return the data type that a related field pointing to this field should
     |      use. For example, this method is called by ForeignKey and OneToOneField
     |      to determine its data type.
     |  
     |  rruunn__vvaalliiddaattoorrss(self, value)
     |  
     |  ssaavvee__ffoorrmm__ddaattaa(self, instance, data)
     |  
     |  sseelleecctt__ffoorrmmaatt(self, compiler, sql, params)
     |      Custom format for select clauses. For example, GIS columns need to be
     |      selected as AsText(table.col) on MySQL as the table.col data can't be
     |      used by Django.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__nnaammee(self, name)
     |  
     |  vvaalliiddaattee(self, value, model_instance)
     |      Validate value and raise ValidationError if necessary. Subclasses
     |      should override this to provide validation logic.
     |  
     |  vvaalluuee__ffrroomm__oobbjjeecctt(self, obj)
     |      Return the value of this field in the given model instance.
     |  
     |  vvaalluuee__ttoo__ssttrriinngg(self, obj)
     |      Return a string value of this field from the passed obj.
     |      This is used by the serialization framework.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Field:
     |  
     |  ddbb__ttaabblleessppaaccee
     |  
     |  ffllaattcchhooiicceess
     |      Flattened version of choices tuple.
     |  
     |  uunniiqquuee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Field:
     |  
     |  aauuttoo__ccrreeaattiioonn__ccoouunntteerr = -13
     |  
     |  ccllaassss__llooookkuuppss = {'contains': <class 'django.db.models.lookups.Contains...
     |  
     |  ccrreeaattiioonn__ccoouunntteerr = 74
     |  
     |  ddeeffaauulltt__vvaalliiddaattoorrss = []
     |  
     |  eemmppttyy__vvaalluueess = [None, '', [], (), {}]
     |  
     |  hhiiddddeenn = False
     |  
     |  mmaannyy__ttoo__mmaannyy = None
     |  
     |  mmaannyy__ttoo__oonnee = None
     |  
     |  oonnee__ttoo__mmaannyy = None
     |  
     |  oonnee__ttoo__oonnee = None
     |  
     |  rreellaatteedd__mmooddeell = None
     |  
     |  ssyysstteemm__cchheecckk__ddeepprreeccaatteedd__ddeettaaiillss = None
     |  
     |  ssyysstteemm__cchheecckk__rreemmoovveedd__ddeettaaiillss = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ttrraannssffoorrmm(self, lookup_name)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuuppss() from builtins.type
     |  
     |  rreeggiisstteerr__llooookkuupp(lookup, lookup_name=None) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  mmeerrggee__ddiiccttss(dicts)
     |      Merge dicts in reverse to preference the order of the original list. e.g.,
     |      merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class DDuurraattiioonnFFiieelldd(Field)
     |  DurationField(verbose_name=None, name=None, primary_key=False, max_length=None, unique=False, blank=False, null=False, db_index=False, rel=None, default=<class 'django.db.models.fields.NOT_PROVIDED'>, editable=True, serialize=True, unique_for_date=None, unique_for_month=None, unique_for_year=None, choices=None, help_text='', db_column=None, db_tablespace=None, auto_created=False, validators=(), error_messages=None)
     |  
     |  Store timedelta objects.
     |  
     |  Use interval on PostgreSQL, INTERVAL DAY TO SECOND on Oracle, and bigint
     |  of microseconds on other databases.
     |  
     |  Method resolution order:
     |      DurationField
     |      Field
     |      django.db.models.query_utils.RegisterLookupMixin
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ffoorrmmffiieelldd(self, **kwargs)
     |      Return a django.forms.Field instance for this field.
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ddbb__pprreepp__vvaalluuee(self, value, connection, prepared=False)
     |      Return field's value prepared for interacting with the database backend.
     |      
     |      Used by the default implementations of get_db_prep_save().
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  ttoo__ppyytthhoonn(self, value)
     |      Convert the input value into the expected Python data type, raising
     |      django.core.exceptions.ValidationError if the data can't be converted.
     |      Return the converted value. Subclasses should override this.
     |  
     |  vvaalluuee__ttoo__ssttrriinngg(self, obj)
     |      Return a string value of this field from the passed obj.
     |      This is used by the serialization framework.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ddeeffaauulltt__eerrrroorr__mmeessssaaggeess = {'invalid': "'%(value)s' value has an invalid...
     |  
     |  ddeessccrriippttiioonn = 'Duration'
     |  
     |  eemmppttyy__ssttrriinnggss__aalllloowweedd = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Field:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memodict)
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggee____(self, other, NotImplemented=NotImplemented)
     |      Return a >= b.  Computed by @total_ordering from (not a < b).
     |  
     |  ____ggtt____(self, other, NotImplemented=NotImplemented)
     |      Return a > b.  Computed by @total_ordering from (not a < b) and (a != b).
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____iinniitt____(self, verbose_name=None, name=None, primary_key=False, max_length=None, unique=False, blank=False, null=False, db_index=False, rel=None, default=<class 'django.db.models.fields.NOT_PROVIDED'>, editable=True, serialize=True, unique_for_date=None, unique_for_month=None, unique_for_year=None, choices=None, help_text='', db_column=None, db_tablespace=None, auto_created=False, validators=(), error_messages=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____llee____(self, other, NotImplemented=NotImplemented)
     |      Return a <= b.  Computed by @total_ordering from (a < b) or (a == b).
     |  
     |  ____lltt____(self, other)
     |      Return self<value.
     |  
     |  ____rreedduuccee____(self)
     |      Pickling should return the model._meta.fields instance of the field,
     |      not a new copy of that field. So, use the app registry to load the
     |      model and then the field back.
     |  
     |  ____rreepprr____(self)
     |      Display the module, class, and name of the field.
     |  
     |  ____ssttrr____(self)
     |      Return "app_label.model_label.field_name" for fields attached to
     |      models.
     |  
     |  ccaacchheedd__ccooll = <django.utils.functional.cached_property object>
     |  ccaasstt__ddbb__ttyyppee(self, connection)
     |      Return the data type to use in the Cast() function.
     |  
     |  cchheecckk(self, **kwargs)
     |  
     |  cclleeaann(self, value, model_instance)
     |      Convert the value's type and run validation. Validation errors
     |      from to_python() and validate() are propagated. Return the correct
     |      value if no error is raised.
     |  
     |  cclloonnee(self)
     |      Uses deconstruct() to clone a new copy of this Field.
     |      Will not preserve any class attachments/attribute names.
     |  
     |  ccoonnttrriibbuuttee__ttoo__ccllaassss(self, cls, name, private_only=False)
     |      Register the field with the model class it belongs to.
     |      
     |      If private_only is True, create a separate instance of this field
     |      for every subclass of cls, even if cls is not an abstract model.
     |  
     |  ddbb__cchheecckk(self, connection)
     |      Return the database column check constraint for this field, for the
     |      provided connection. Works the same way as db_type() for the case that
     |      get_internal_type() does not map to a preexisting model field.
     |  
     |  ddbb__ppaarraammeetteerrss(self, connection)
     |      Extension of db_type(), providing a range of different return values
     |      (type, checks). This will look at db_type(), allowing custom model
     |      fields to override it.
     |  
     |  ddbb__ttyyppee(self, connection)
     |      Return the database column data type for this field, for the provided
     |      connection.
     |  
     |  ddbb__ttyyppee__ppaarraammeetteerrss(self, connection)
     |  
     |  ddbb__ttyyppee__ssuuffffiixx(self, connection)
     |  
     |  ddeeccoonnssttrruucctt(self)
     |      Return enough information to recreate the field as a 4-tuple:
     |      
     |       * The name of the field on the model, if contribute_to_class() has
     |         been run.
     |       * The import path of the field, including the class:e.g.
     |         django.db.models.IntegerField This should be the most portable
     |         version, so less specific may be better.
     |       * A list of positional arguments.
     |       * A dict of keyword arguments.
     |      
     |      Note that the positional or keyword arguments must contain values of
     |      the following types (including inner values of collection types):
     |      
     |       * None, bool, str, int, float, complex, set, frozenset, list, tuple,
     |         dict
     |       * UUID
     |       * datetime.datetime (naive), datetime.date
     |       * top-level classes, top-level functions - will be referenced by their
     |         full import path
     |       * Storage instances - these have their own deconstruct() method
     |      
     |      This is because the values here must be serialized into a text format
     |      (possibly new Python code, possibly JSON) and these are the only types
     |      with encoding handlers defined.
     |      
     |      There's no need to return the exact way the field was instantiated this
     |      time, just ensure that the resulting field is the same - prefer keyword
     |      arguments over positional ones, and omit parameters with their default
     |      values.
     |  
     |  ggeett__aattttnnaammee(self)
     |  
     |  ggeett__aattttnnaammee__ccoolluummnn(self)
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], limit_choices_to=None, ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |  
     |  ggeett__ccooll(self, alias, output_field=None)
     |  
     |  ggeett__ddbb__pprreepp__ssaavvee(self, value, connection)
     |      Return field's value prepared for saving into a database.
     |  
     |  ggeett__ddeeffaauulltt(self)
     |      Return the default value for this field.
     |  
     |  ggeett__ffiilltteerr__kkwwaarrggss__ffoorr__oobbjjeecctt(self, obj)
     |      Return a dict that when passed as kwargs to self.model.filter(), would
     |      yield all instances having the same value for this field as obj has.
     |  
     |  ggeett__ppkk__vvaalluuee__oonn__ssaavvee(self, instance)
     |      Hook to generate new PK values on save. This method is called when
     |      saving instances with no primary key value set. If this method returns
     |      something else than None, then the returned value is used when saving
     |      the new instance.
     |  
     |  ggeett__pprreepp__vvaalluuee(self, value)
     |      Perform preliminary non-db specific value checks and conversions.
     |  
     |  hhaass__ddeeffaauulltt(self)
     |      Return a boolean of whether this field has a default value.
     |  
     |  pprree__ssaavvee(self, model_instance, add)
     |      Return field's value just before saving.
     |  
     |  rreell__ddbb__ttyyppee(self, connection)
     |      Return the data type that a related field pointing to this field should
     |      use. For example, this method is called by ForeignKey and OneToOneField
     |      to determine its data type.
     |  
     |  rruunn__vvaalliiddaattoorrss(self, value)
     |  
     |  ssaavvee__ffoorrmm__ddaattaa(self, instance, data)
     |  
     |  sseelleecctt__ffoorrmmaatt(self, compiler, sql, params)
     |      Custom format for select clauses. For example, GIS columns need to be
     |      selected as AsText(table.col) on MySQL as the table.col data can't be
     |      used by Django.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__nnaammee(self, name)
     |  
     |  vvaalliiddaattee(self, value, model_instance)
     |      Validate value and raise ValidationError if necessary. Subclasses
     |      should override this to provide validation logic.
     |  
     |  vvaalliiddaattoorrss = <django.utils.functional.cached_property object>
     |  vvaalluuee__ffrroomm__oobbjjeecctt(self, obj)
     |      Return the value of this field in the given model instance.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Field:
     |  
     |  ddbb__ttaabblleessppaaccee
     |  
     |  ffllaattcchhooiicceess
     |      Flattened version of choices tuple.
     |  
     |  uunniiqquuee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Field:
     |  
     |  aauuttoo__ccrreeaattiioonn__ccoouunntteerr = -13
     |  
     |  ccllaassss__llooookkuuppss = {'contains': <class 'django.db.models.lookups.Contains...
     |  
     |  ccrreeaattiioonn__ccoouunntteerr = 74
     |  
     |  ddeeffaauulltt__vvaalliiddaattoorrss = []
     |  
     |  eemmppttyy__vvaalluueess = [None, '', [], (), {}]
     |  
     |  hhiiddddeenn = False
     |  
     |  mmaannyy__ttoo__mmaannyy = None
     |  
     |  mmaannyy__ttoo__oonnee = None
     |  
     |  oonnee__ttoo__mmaannyy = None
     |  
     |  oonnee__ttoo__oonnee = None
     |  
     |  rreellaatteedd__mmooddeell = None
     |  
     |  ssyysstteemm__cchheecckk__ddeepprreeccaatteedd__ddeettaaiillss = None
     |  
     |  ssyysstteemm__cchheecckk__rreemmoovveedd__ddeettaaiillss = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ttrraannssffoorrmm(self, lookup_name)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuuppss() from builtins.type
     |  
     |  rreeggiisstteerr__llooookkuupp(lookup, lookup_name=None) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  mmeerrggee__ddiiccttss(dicts)
     |      Merge dicts in reverse to preference the order of the original list. e.g.,
     |      merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class EEmmaaiillFFiieelldd(CharField)
     |  EmailField(*args, **kwargs)
     |  
     |  Base class for all field types
     |  
     |  Method resolution order:
     |      EmailField
     |      CharField
     |      Field
     |      django.db.models.query_utils.RegisterLookupMixin
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ddeeccoonnssttrruucctt(self)
     |      Return enough information to recreate the field as a 4-tuple:
     |      
     |       * The name of the field on the model, if contribute_to_class() has
     |         been run.
     |       * The import path of the field, including the class:e.g.
     |         django.db.models.IntegerField This should be the most portable
     |         version, so less specific may be better.
     |       * A list of positional arguments.
     |       * A dict of keyword arguments.
     |      
     |      Note that the positional or keyword arguments must contain values of
     |      the following types (including inner values of collection types):
     |      
     |       * None, bool, str, int, float, complex, set, frozenset, list, tuple,
     |         dict
     |       * UUID
     |       * datetime.datetime (naive), datetime.date
     |       * top-level classes, top-level functions - will be referenced by their
     |         full import path
     |       * Storage instances - these have their own deconstruct() method
     |      
     |      This is because the values here must be serialized into a text format
     |      (possibly new Python code, possibly JSON) and these are the only types
     |      with encoding handlers defined.
     |      
     |      There's no need to return the exact way the field was instantiated this
     |      time, just ensure that the resulting field is the same - prefer keyword
     |      arguments over positional ones, and omit parameters with their default
     |      values.
     |  
     |  ffoorrmmffiieelldd(self, **kwargs)
     |      Return a django.forms.Field instance for this field.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ddeeffaauulltt__vvaalliiddaattoorrss = [<django.core.validators.EmailValidator object>]
     |  
     |  ddeessccrriippttiioonn = 'Email address'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from CharField:
     |  
     |  ccaasstt__ddbb__ttyyppee(self, connection)
     |      Return the data type to use in the Cast() function.
     |  
     |  cchheecckk(self, **kwargs)
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  ggeett__pprreepp__vvaalluuee(self, value)
     |      Perform preliminary non-db specific value checks and conversions.
     |  
     |  ttoo__ppyytthhoonn(self, value)
     |      Convert the input value into the expected Python data type, raising
     |      django.core.exceptions.ValidationError if the data can't be converted.
     |      Return the converted value. Subclasses should override this.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Field:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memodict)
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggee____(self, other, NotImplemented=NotImplemented)
     |      Return a >= b.  Computed by @total_ordering from (not a < b).
     |  
     |  ____ggtt____(self, other, NotImplemented=NotImplemented)
     |      Return a > b.  Computed by @total_ordering from (not a < b) and (a != b).
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____llee____(self, other, NotImplemented=NotImplemented)
     |      Return a <= b.  Computed by @total_ordering from (a < b) or (a == b).
     |  
     |  ____lltt____(self, other)
     |      Return self<value.
     |  
     |  ____rreedduuccee____(self)
     |      Pickling should return the model._meta.fields instance of the field,
     |      not a new copy of that field. So, use the app registry to load the
     |      model and then the field back.
     |  
     |  ____rreepprr____(self)
     |      Display the module, class, and name of the field.
     |  
     |  ____ssttrr____(self)
     |      Return "app_label.model_label.field_name" for fields attached to
     |      models.
     |  
     |  ccaacchheedd__ccooll = <django.utils.functional.cached_property object>
     |  cclleeaann(self, value, model_instance)
     |      Convert the value's type and run validation. Validation errors
     |      from to_python() and validate() are propagated. Return the correct
     |      value if no error is raised.
     |  
     |  cclloonnee(self)
     |      Uses deconstruct() to clone a new copy of this Field.
     |      Will not preserve any class attachments/attribute names.
     |  
     |  ccoonnttrriibbuuttee__ttoo__ccllaassss(self, cls, name, private_only=False)
     |      Register the field with the model class it belongs to.
     |      
     |      If private_only is True, create a separate instance of this field
     |      for every subclass of cls, even if cls is not an abstract model.
     |  
     |  ddbb__cchheecckk(self, connection)
     |      Return the database column check constraint for this field, for the
     |      provided connection. Works the same way as db_type() for the case that
     |      get_internal_type() does not map to a preexisting model field.
     |  
     |  ddbb__ppaarraammeetteerrss(self, connection)
     |      Extension of db_type(), providing a range of different return values
     |      (type, checks). This will look at db_type(), allowing custom model
     |      fields to override it.
     |  
     |  ddbb__ttyyppee(self, connection)
     |      Return the database column data type for this field, for the provided
     |      connection.
     |  
     |  ddbb__ttyyppee__ppaarraammeetteerrss(self, connection)
     |  
     |  ddbb__ttyyppee__ssuuffffiixx(self, connection)
     |  
     |  ggeett__aattttnnaammee(self)
     |  
     |  ggeett__aattttnnaammee__ccoolluummnn(self)
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], limit_choices_to=None, ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |  
     |  ggeett__ccooll(self, alias, output_field=None)
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ddbb__pprreepp__ssaavvee(self, value, connection)
     |      Return field's value prepared for saving into a database.
     |  
     |  ggeett__ddbb__pprreepp__vvaalluuee(self, value, connection, prepared=False)
     |      Return field's value prepared for interacting with the database backend.
     |      
     |      Used by the default implementations of get_db_prep_save().
     |  
     |  ggeett__ddeeffaauulltt(self)
     |      Return the default value for this field.
     |  
     |  ggeett__ffiilltteerr__kkwwaarrggss__ffoorr__oobbjjeecctt(self, obj)
     |      Return a dict that when passed as kwargs to self.model.filter(), would
     |      yield all instances having the same value for this field as obj has.
     |  
     |  ggeett__ppkk__vvaalluuee__oonn__ssaavvee(self, instance)
     |      Hook to generate new PK values on save. This method is called when
     |      saving instances with no primary key value set. If this method returns
     |      something else than None, then the returned value is used when saving
     |      the new instance.
     |  
     |  hhaass__ddeeffaauulltt(self)
     |      Return a boolean of whether this field has a default value.
     |  
     |  pprree__ssaavvee(self, model_instance, add)
     |      Return field's value just before saving.
     |  
     |  rreell__ddbb__ttyyppee(self, connection)
     |      Return the data type that a related field pointing to this field should
     |      use. For example, this method is called by ForeignKey and OneToOneField
     |      to determine its data type.
     |  
     |  rruunn__vvaalliiddaattoorrss(self, value)
     |  
     |  ssaavvee__ffoorrmm__ddaattaa(self, instance, data)
     |  
     |  sseelleecctt__ffoorrmmaatt(self, compiler, sql, params)
     |      Custom format for select clauses. For example, GIS columns need to be
     |      selected as AsText(table.col) on MySQL as the table.col data can't be
     |      used by Django.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__nnaammee(self, name)
     |  
     |  vvaalliiddaattee(self, value, model_instance)
     |      Validate value and raise ValidationError if necessary. Subclasses
     |      should override this to provide validation logic.
     |  
     |  vvaalliiddaattoorrss = <django.utils.functional.cached_property object>
     |  vvaalluuee__ffrroomm__oobbjjeecctt(self, obj)
     |      Return the value of this field in the given model instance.
     |  
     |  vvaalluuee__ttoo__ssttrriinngg(self, obj)
     |      Return a string value of this field from the passed obj.
     |      This is used by the serialization framework.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Field:
     |  
     |  ddbb__ttaabblleessppaaccee
     |  
     |  ffllaattcchhooiicceess
     |      Flattened version of choices tuple.
     |  
     |  uunniiqquuee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Field:
     |  
     |  aauuttoo__ccrreeaattiioonn__ccoouunntteerr = -13
     |  
     |  ccllaassss__llooookkuuppss = {'contains': <class 'django.db.models.lookups.Contains...
     |  
     |  ccrreeaattiioonn__ccoouunntteerr = 74
     |  
     |  ddeeffaauulltt__eerrrroorr__mmeessssaaggeess = {'blank': 'This field cannot be blank.', 'inv...
     |  
     |  eemmppttyy__ssttrriinnggss__aalllloowweedd = True
     |  
     |  eemmppttyy__vvaalluueess = [None, '', [], (), {}]
     |  
     |  hhiiddddeenn = False
     |  
     |  mmaannyy__ttoo__mmaannyy = None
     |  
     |  mmaannyy__ttoo__oonnee = None
     |  
     |  oonnee__ttoo__mmaannyy = None
     |  
     |  oonnee__ttoo__oonnee = None
     |  
     |  rreellaatteedd__mmooddeell = None
     |  
     |  ssyysstteemm__cchheecckk__ddeepprreeccaatteedd__ddeettaaiillss = None
     |  
     |  ssyysstteemm__cchheecckk__rreemmoovveedd__ddeettaaiillss = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ttrraannssffoorrmm(self, lookup_name)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuuppss() from builtins.type
     |  
     |  rreeggiisstteerr__llooookkuupp(lookup, lookup_name=None) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  mmeerrggee__ddiiccttss(dicts)
     |      Merge dicts in reverse to preference the order of the original list. e.g.,
     |      merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class EEmmppttyy(builtins.object)
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class EExxiissttss(Subquery)
     |  Exists(*args, **kwargs)
     |  
     |  An explicit subquery. It may contain OuterRef() references to the outer
     |  query which will be resolved when it is applied to that query.
     |  
     |  Method resolution order:
     |      Exists
     |      Subquery
     |      Expression
     |      BaseExpression
     |      Combinable
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, *args, negated=False, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____iinnvveerrtt____(self)
     |  
     |  aass__oorraaccllee(self, compiler, connection, template=None, **extra_context)
     |  
     |  aass__ssqqll(self, compiler, connection, template=None, **extra_context)
     |      Responsible for returning a (sql, [params]) tuple to be included
     |      in the current query.
     |      
     |      Different backends can provide their own implementation, by
     |      providing an `as_{vendor}` method and patching the Expression:
     |      
     |      ```
     |      def override_as_sql(self, compiler, connection):
     |          # custom logic
     |          return super().as_sql(compiler, connection)
     |      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
     |      ```
     |      
     |      Arguments:
     |       * compiler: the query compiler responsible for generating the query.
     |         Must have a compile method, returning a (sql, [params]) tuple.
     |         Calling compiler(value) will return a quoted `value`.
     |      
     |       * connection: the database connection used for the current query.
     |      
     |      Return: (sql, params)
     |        Where `sql` is a string containing ordered sql parameters to be
     |        replaced with the elements of the list `params`.
     |  
     |  rreessoollvvee__eexxpprreessssiioonn(self, query=None, *args, **kwargs)
     |      Provide the chance to do any preprocessing or validation before being
     |      added to the query.
     |      
     |      Arguments:
     |       * query: the backend query implementation
     |       * allow_joins: boolean allowing or denying use of joins
     |         in this query
     |       * reuse: a set of reusable joins for multijoins
     |       * summarize: a terminal aggregate clause
     |       * for_save: whether this expression about to be used in a save or update
     |      
     |      Return: an Expression to be added to the query.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  oouuttppuutt__ffiieelldd = <django.db.models.fields.BooleanField>
     |  
     |  tteemmppllaattee = 'EXISTS(%(subquery)s)'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Subquery:
     |  
     |  ccooppyy(self)
     |  
     |  ggeett__ssoouurrccee__eexxpprreessssiioonnss(self)
     |  
     |  rreellaabbeelleedd__cclloonnee(self, change_map)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Subquery:
     |  
     |  ccoonnttaaiinnss__aaggggrreeggaattee = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseExpression:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettssttaattee____(self)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  aasscc(self, **kwargs)
     |  
     |  ccoonnttaaiinnss__ccoolluummnn__rreeffeerreenncceess = <django.utils.functional.cached_property object>
     |  ccoonnttaaiinnss__oovveerr__ccllaauussee = <django.utils.functional.cached_property object>
     |  ccoonnvveerrtt__vvaalluuee = <django.utils.functional.cached_property object>
     |  ddeeccoonnssttrruucctt(obj)
     |      Return a 3-tuple of class import path, positional arguments,
     |      and keyword arguments.
     |  
     |  ddeesscc(self, **kwargs)
     |  
     |  ffllaatttteenn(self)
     |      Recursively yield this expression and all subexpressions, in
     |      depth-first order.
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ggrroouupp__bbyy__ccoollss(self)
     |  
     |  ggeett__llooookkuupp(self, lookup)
     |  
     |  ggeett__ssoouurrccee__ffiieellddss(self)
     |      Return the underlying field types used by this aggregate.
     |  
     |  ggeett__ttrraannssffoorrmm(self, name)
     |  
     |  iiddeennttiittyy = <django.utils.functional.cached_property object>
     |  rreevveerrssee__oorrddeerriinngg(self)
     |  
     |  sseett__ssoouurrccee__eexxpprreessssiioonnss(self, exprs)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from BaseExpression:
     |  
     |  ____nneeww____(cls, *args, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseExpression:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ffiieelldd
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from BaseExpression:
     |  
     |  ffiilltteerraabbllee = True
     |  
     |  iiss__ssuummmmaarryy = False
     |  
     |  wwiinnddooww__ccoommppaattiibbllee = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Combinable:
     |  
     |  ____aadddd____(self, other)
     |  
     |  ____aanndd____(self, other)
     |  
     |  ____mmoodd____(self, other)
     |  
     |  ____mmuull____(self, other)
     |  
     |  ____nneegg____(self)
     |  
     |  ____oorr____(self, other)
     |  
     |  ____ppooww____(self, other)
     |  
     |  ____rraadddd____(self, other)
     |  
     |  ____rraanndd____(self, other)
     |  
     |  ____rrmmoodd____(self, other)
     |  
     |  ____rrmmuull____(self, other)
     |  
     |  ____rroorr____(self, other)
     |  
     |  ____rrppooww____(self, other)
     |  
     |  ____rrssuubb____(self, other)
     |  
     |  ____rrttrruueeddiivv____(self, other)
     |  
     |  ____ssuubb____(self, other)
     |  
     |  ____ttrruueeddiivv____(self, other)
     |  
     |  bbiittaanndd(self, other)
     |  
     |  bbiittlleeffttsshhiifftt(self, other)
     |  
     |  bbiittoorr(self, other)
     |  
     |  bbiittrriigghhttsshhiifftt(self, other)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Combinable:
     |  
     |  AADDDD = '+'
     |  
     |  BBIITTAANNDD = '&'
     |  
     |  BBIITTLLEEFFTTSSHHIIFFTT = '<<'
     |  
     |  BBIITTOORR = '|'
     |  
     |  BBIITTRRIIGGHHTTSSHHIIFFTT = '>>'
     |  
     |  DDIIVV = '/'
     |  
     |  MMOODD = '%%'
     |  
     |  MMUULL = '*'
     |  
     |  PPOOWW = '^'
     |  
     |  SSUUBB = '-'
    
    class EExxpprreessssiioonn(BaseExpression, Combinable)
     |  Expression(*args, **kwargs)
     |  
     |  An expression that can be combined with other expressions.
     |  
     |  Method resolution order:
     |      Expression
     |      BaseExpression
     |      Combinable
     |      builtins.object
     |  
     |  Methods inherited from BaseExpression:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettssttaattee____(self)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____iinniitt____(self, output_field=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  aass__ssqqll(self, compiler, connection)
     |      Responsible for returning a (sql, [params]) tuple to be included
     |      in the current query.
     |      
     |      Different backends can provide their own implementation, by
     |      providing an `as_{vendor}` method and patching the Expression:
     |      
     |      ```
     |      def override_as_sql(self, compiler, connection):
     |          # custom logic
     |          return super().as_sql(compiler, connection)
     |      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
     |      ```
     |      
     |      Arguments:
     |       * compiler: the query compiler responsible for generating the query.
     |         Must have a compile method, returning a (sql, [params]) tuple.
     |         Calling compiler(value) will return a quoted `value`.
     |      
     |       * connection: the database connection used for the current query.
     |      
     |      Return: (sql, params)
     |        Where `sql` is a string containing ordered sql parameters to be
     |        replaced with the elements of the list `params`.
     |  
     |  aasscc(self, **kwargs)
     |  
     |  ccoonnttaaiinnss__aaggggrreeggaattee = <django.utils.functional.cached_property object>
     |  ccoonnttaaiinnss__ccoolluummnn__rreeffeerreenncceess = <django.utils.functional.cached_property object>
     |  ccoonnttaaiinnss__oovveerr__ccllaauussee = <django.utils.functional.cached_property object>
     |  ccoonnvveerrtt__vvaalluuee = <django.utils.functional.cached_property object>
     |  ccooppyy(self)
     |  
     |  ddeeccoonnssttrruucctt(obj)
     |      Return a 3-tuple of class import path, positional arguments,
     |      and keyword arguments.
     |  
     |  ddeesscc(self, **kwargs)
     |  
     |  ffllaatttteenn(self)
     |      Recursively yield this expression and all subexpressions, in
     |      depth-first order.
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ggrroouupp__bbyy__ccoollss(self)
     |  
     |  ggeett__llooookkuupp(self, lookup)
     |  
     |  ggeett__ssoouurrccee__eexxpprreessssiioonnss(self)
     |  
     |  ggeett__ssoouurrccee__ffiieellddss(self)
     |      Return the underlying field types used by this aggregate.
     |  
     |  ggeett__ttrraannssffoorrmm(self, name)
     |  
     |  iiddeennttiittyy = <django.utils.functional.cached_property object>
     |  oouuttppuutt__ffiieelldd = <django.utils.functional.cached_property object>
     |  rreellaabbeelleedd__cclloonnee(self, change_map)
     |  
     |  rreessoollvvee__eexxpprreessssiioonn(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)
     |      Provide the chance to do any preprocessing or validation before being
     |      added to the query.
     |      
     |      Arguments:
     |       * query: the backend query implementation
     |       * allow_joins: boolean allowing or denying use of joins
     |         in this query
     |       * reuse: a set of reusable joins for multijoins
     |       * summarize: a terminal aggregate clause
     |       * for_save: whether this expression about to be used in a save or update
     |      
     |      Return: an Expression to be added to the query.
     |  
     |  rreevveerrssee__oorrddeerriinngg(self)
     |  
     |  sseett__ssoouurrccee__eexxpprreessssiioonnss(self, exprs)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from BaseExpression:
     |  
     |  ____nneeww____(cls, *args, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseExpression:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ffiieelldd
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from BaseExpression:
     |  
     |  ffiilltteerraabbllee = True
     |  
     |  iiss__ssuummmmaarryy = False
     |  
     |  wwiinnddooww__ccoommppaattiibbllee = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Combinable:
     |  
     |  ____aadddd____(self, other)
     |  
     |  ____aanndd____(self, other)
     |  
     |  ____mmoodd____(self, other)
     |  
     |  ____mmuull____(self, other)
     |  
     |  ____nneegg____(self)
     |  
     |  ____oorr____(self, other)
     |  
     |  ____ppooww____(self, other)
     |  
     |  ____rraadddd____(self, other)
     |  
     |  ____rraanndd____(self, other)
     |  
     |  ____rrmmoodd____(self, other)
     |  
     |  ____rrmmuull____(self, other)
     |  
     |  ____rroorr____(self, other)
     |  
     |  ____rrppooww____(self, other)
     |  
     |  ____rrssuubb____(self, other)
     |  
     |  ____rrttrruueeddiivv____(self, other)
     |  
     |  ____ssuubb____(self, other)
     |  
     |  ____ttrruueeddiivv____(self, other)
     |  
     |  bbiittaanndd(self, other)
     |  
     |  bbiittlleeffttsshhiifftt(self, other)
     |  
     |  bbiittoorr(self, other)
     |  
     |  bbiittrriigghhttsshhiifftt(self, other)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Combinable:
     |  
     |  AADDDD = '+'
     |  
     |  BBIITTAANNDD = '&'
     |  
     |  BBIITTLLEEFFTTSSHHIIFFTT = '<<'
     |  
     |  BBIITTOORR = '|'
     |  
     |  BBIITTRRIIGGHHTTSSHHIIFFTT = '>>'
     |  
     |  DDIIVV = '/'
     |  
     |  MMOODD = '%%'
     |  
     |  MMUULL = '*'
     |  
     |  PPOOWW = '^'
     |  
     |  SSUUBB = '-'
    
    class EExxpprreessssiioonnLLiisstt(Func)
     |  ExpressionList(*args, **kwargs)
     |  
     |  An expression containing multiple expressions. Can be used to provide a
     |  list of expressions as an argument to another expression, like an
     |  ordering clause.
     |  
     |  Method resolution order:
     |      ExpressionList
     |      Func
     |      SQLiteNumericMixin
     |      Expression
     |      BaseExpression
     |      Combinable
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, *expressions, **extra)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  tteemmppllaattee = '%(expressions)s'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Func:
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  aass__ssqqll(self, compiler, connection, function=None, template=None, arg_joiner=None, **extra_context)
     |      Responsible for returning a (sql, [params]) tuple to be included
     |      in the current query.
     |      
     |      Different backends can provide their own implementation, by
     |      providing an `as_{vendor}` method and patching the Expression:
     |      
     |      ```
     |      def override_as_sql(self, compiler, connection):
     |          # custom logic
     |          return super().as_sql(compiler, connection)
     |      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
     |      ```
     |      
     |      Arguments:
     |       * compiler: the query compiler responsible for generating the query.
     |         Must have a compile method, returning a (sql, [params]) tuple.
     |         Calling compiler(value) will return a quoted `value`.
     |      
     |       * connection: the database connection used for the current query.
     |      
     |      Return: (sql, params)
     |        Where `sql` is a string containing ordered sql parameters to be
     |        replaced with the elements of the list `params`.
     |  
     |  ccooppyy(self)
     |  
     |  ggeett__ssoouurrccee__eexxpprreessssiioonnss(self)
     |  
     |  rreessoollvvee__eexxpprreessssiioonn(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)
     |      Provide the chance to do any preprocessing or validation before being
     |      added to the query.
     |      
     |      Arguments:
     |       * query: the backend query implementation
     |       * allow_joins: boolean allowing or denying use of joins
     |         in this query
     |       * reuse: a set of reusable joins for multijoins
     |       * summarize: a terminal aggregate clause
     |       * for_save: whether this expression about to be used in a save or update
     |      
     |      Return: an Expression to be added to the query.
     |  
     |  sseett__ssoouurrccee__eexxpprreessssiioonnss(self, exprs)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Func:
     |  
     |  aarrgg__jjooiinneerr = ', '
     |  
     |  aarriittyy = None
     |  
     |  ffuunnccttiioonn = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SQLiteNumericMixin:
     |  
     |  aass__ssqqlliittee(self, compiler, connection, **extra_context)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from SQLiteNumericMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseExpression:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettssttaattee____(self)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  aasscc(self, **kwargs)
     |  
     |  ccoonnttaaiinnss__aaggggrreeggaattee = <django.utils.functional.cached_property object>
     |  ccoonnttaaiinnss__ccoolluummnn__rreeffeerreenncceess = <django.utils.functional.cached_property object>
     |  ccoonnttaaiinnss__oovveerr__ccllaauussee = <django.utils.functional.cached_property object>
     |  ccoonnvveerrtt__vvaalluuee = <django.utils.functional.cached_property object>
     |  ddeeccoonnssttrruucctt(obj)
     |      Return a 3-tuple of class import path, positional arguments,
     |      and keyword arguments.
     |  
     |  ddeesscc(self, **kwargs)
     |  
     |  ffllaatttteenn(self)
     |      Recursively yield this expression and all subexpressions, in
     |      depth-first order.
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ggrroouupp__bbyy__ccoollss(self)
     |  
     |  ggeett__llooookkuupp(self, lookup)
     |  
     |  ggeett__ssoouurrccee__ffiieellddss(self)
     |      Return the underlying field types used by this aggregate.
     |  
     |  ggeett__ttrraannssffoorrmm(self, name)
     |  
     |  iiddeennttiittyy = <django.utils.functional.cached_property object>
     |  oouuttppuutt__ffiieelldd = <django.utils.functional.cached_property object>
     |  rreellaabbeelleedd__cclloonnee(self, change_map)
     |  
     |  rreevveerrssee__oorrddeerriinngg(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from BaseExpression:
     |  
     |  ____nneeww____(cls, *args, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseExpression:
     |  
     |  ffiieelldd
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from BaseExpression:
     |  
     |  ffiilltteerraabbllee = True
     |  
     |  iiss__ssuummmmaarryy = False
     |  
     |  wwiinnddooww__ccoommppaattiibbllee = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Combinable:
     |  
     |  ____aadddd____(self, other)
     |  
     |  ____aanndd____(self, other)
     |  
     |  ____mmoodd____(self, other)
     |  
     |  ____mmuull____(self, other)
     |  
     |  ____nneegg____(self)
     |  
     |  ____oorr____(self, other)
     |  
     |  ____ppooww____(self, other)
     |  
     |  ____rraadddd____(self, other)
     |  
     |  ____rraanndd____(self, other)
     |  
     |  ____rrmmoodd____(self, other)
     |  
     |  ____rrmmuull____(self, other)
     |  
     |  ____rroorr____(self, other)
     |  
     |  ____rrppooww____(self, other)
     |  
     |  ____rrssuubb____(self, other)
     |  
     |  ____rrttrruueeddiivv____(self, other)
     |  
     |  ____ssuubb____(self, other)
     |  
     |  ____ttrruueeddiivv____(self, other)
     |  
     |  bbiittaanndd(self, other)
     |  
     |  bbiittlleeffttsshhiifftt(self, other)
     |  
     |  bbiittoorr(self, other)
     |  
     |  bbiittrriigghhttsshhiifftt(self, other)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Combinable:
     |  
     |  AADDDD = '+'
     |  
     |  BBIITTAANNDD = '&'
     |  
     |  BBIITTLLEEFFTTSSHHIIFFTT = '<<'
     |  
     |  BBIITTOORR = '|'
     |  
     |  BBIITTRRIIGGHHTTSSHHIIFFTT = '>>'
     |  
     |  DDIIVV = '/'
     |  
     |  MMOODD = '%%'
     |  
     |  MMUULL = '*'
     |  
     |  PPOOWW = '^'
     |  
     |  SSUUBB = '-'
    
    class EExxpprreessssiioonnWWrraappppeerr(Expression)
     |  ExpressionWrapper(*args, **kwargs)
     |  
     |  An expression that can wrap another expression so that it can provide
     |  extra context to the inner expression, such as the output_field.
     |  
     |  Method resolution order:
     |      ExpressionWrapper
     |      Expression
     |      BaseExpression
     |      Combinable
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, expression, output_field)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  aass__ssqqll(self, compiler, connection)
     |      Responsible for returning a (sql, [params]) tuple to be included
     |      in the current query.
     |      
     |      Different backends can provide their own implementation, by
     |      providing an `as_{vendor}` method and patching the Expression:
     |      
     |      ```
     |      def override_as_sql(self, compiler, connection):
     |          # custom logic
     |          return super().as_sql(compiler, connection)
     |      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
     |      ```
     |      
     |      Arguments:
     |       * compiler: the query compiler responsible for generating the query.
     |         Must have a compile method, returning a (sql, [params]) tuple.
     |         Calling compiler(value) will return a quoted `value`.
     |      
     |       * connection: the database connection used for the current query.
     |      
     |      Return: (sql, params)
     |        Where `sql` is a string containing ordered sql parameters to be
     |        replaced with the elements of the list `params`.
     |  
     |  ggeett__ssoouurrccee__eexxpprreessssiioonnss(self)
     |  
     |  sseett__ssoouurrccee__eexxpprreessssiioonnss(self, exprs)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseExpression:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettssttaattee____(self)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  aasscc(self, **kwargs)
     |  
     |  ccoonnttaaiinnss__aaggggrreeggaattee = <django.utils.functional.cached_property object>
     |  ccoonnttaaiinnss__ccoolluummnn__rreeffeerreenncceess = <django.utils.functional.cached_property object>
     |  ccoonnttaaiinnss__oovveerr__ccllaauussee = <django.utils.functional.cached_property object>
     |  ccoonnvveerrtt__vvaalluuee = <django.utils.functional.cached_property object>
     |  ccooppyy(self)
     |  
     |  ddeeccoonnssttrruucctt(obj)
     |      Return a 3-tuple of class import path, positional arguments,
     |      and keyword arguments.
     |  
     |  ddeesscc(self, **kwargs)
     |  
     |  ffllaatttteenn(self)
     |      Recursively yield this expression and all subexpressions, in
     |      depth-first order.
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ggrroouupp__bbyy__ccoollss(self)
     |  
     |  ggeett__llooookkuupp(self, lookup)
     |  
     |  ggeett__ssoouurrccee__ffiieellddss(self)
     |      Return the underlying field types used by this aggregate.
     |  
     |  ggeett__ttrraannssffoorrmm(self, name)
     |  
     |  iiddeennttiittyy = <django.utils.functional.cached_property object>
     |  oouuttppuutt__ffiieelldd = <django.utils.functional.cached_property object>
     |  rreellaabbeelleedd__cclloonnee(self, change_map)
     |  
     |  rreessoollvvee__eexxpprreessssiioonn(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)
     |      Provide the chance to do any preprocessing or validation before being
     |      added to the query.
     |      
     |      Arguments:
     |       * query: the backend query implementation
     |       * allow_joins: boolean allowing or denying use of joins
     |         in this query
     |       * reuse: a set of reusable joins for multijoins
     |       * summarize: a terminal aggregate clause
     |       * for_save: whether this expression about to be used in a save or update
     |      
     |      Return: an Expression to be added to the query.
     |  
     |  rreevveerrssee__oorrddeerriinngg(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from BaseExpression:
     |  
     |  ____nneeww____(cls, *args, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseExpression:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ffiieelldd
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from BaseExpression:
     |  
     |  ffiilltteerraabbllee = True
     |  
     |  iiss__ssuummmmaarryy = False
     |  
     |  wwiinnddooww__ccoommppaattiibbllee = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Combinable:
     |  
     |  ____aadddd____(self, other)
     |  
     |  ____aanndd____(self, other)
     |  
     |  ____mmoodd____(self, other)
     |  
     |  ____mmuull____(self, other)
     |  
     |  ____nneegg____(self)
     |  
     |  ____oorr____(self, other)
     |  
     |  ____ppooww____(self, other)
     |  
     |  ____rraadddd____(self, other)
     |  
     |  ____rraanndd____(self, other)
     |  
     |  ____rrmmoodd____(self, other)
     |  
     |  ____rrmmuull____(self, other)
     |  
     |  ____rroorr____(self, other)
     |  
     |  ____rrppooww____(self, other)
     |  
     |  ____rrssuubb____(self, other)
     |  
     |  ____rrttrruueeddiivv____(self, other)
     |  
     |  ____ssuubb____(self, other)
     |  
     |  ____ttrruueeddiivv____(self, other)
     |  
     |  bbiittaanndd(self, other)
     |  
     |  bbiittlleeffttsshhiifftt(self, other)
     |  
     |  bbiittoorr(self, other)
     |  
     |  bbiittrriigghhttsshhiifftt(self, other)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Combinable:
     |  
     |  AADDDD = '+'
     |  
     |  BBIITTAANNDD = '&'
     |  
     |  BBIITTLLEEFFTTSSHHIIFFTT = '<<'
     |  
     |  BBIITTOORR = '|'
     |  
     |  BBIITTRRIIGGHHTTSSHHIIFFTT = '>>'
     |  
     |  DDIIVV = '/'
     |  
     |  MMOODD = '%%'
     |  
     |  MMUULL = '*'
     |  
     |  PPOOWW = '^'
     |  
     |  SSUUBB = '-'
    
    class FF(Combinable)
     |  F(*args, **kwargs)
     |  
     |  An object capable of resolving references to existing query objects.
     |  
     |  Method resolution order:
     |      F
     |      Combinable
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____iinniitt____(self, name)
     |      Arguments:
     |       * name: the name of the field this expression references
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  aasscc(self, **kwargs)
     |  
     |  ddeeccoonnssttrruucctt(obj)
     |      Return a 3-tuple of class import path, positional arguments,
     |      and keyword arguments.
     |  
     |  ddeesscc(self, **kwargs)
     |  
     |  rreessoollvvee__eexxpprreessssiioonn(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False, simple_col=False)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ____nneeww____(cls, *args, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ffiilltteerraabbllee = True
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Combinable:
     |  
     |  ____aadddd____(self, other)
     |  
     |  ____aanndd____(self, other)
     |  
     |  ____mmoodd____(self, other)
     |  
     |  ____mmuull____(self, other)
     |  
     |  ____nneegg____(self)
     |  
     |  ____oorr____(self, other)
     |  
     |  ____ppooww____(self, other)
     |  
     |  ____rraadddd____(self, other)
     |  
     |  ____rraanndd____(self, other)
     |  
     |  ____rrmmoodd____(self, other)
     |  
     |  ____rrmmuull____(self, other)
     |  
     |  ____rroorr____(self, other)
     |  
     |  ____rrppooww____(self, other)
     |  
     |  ____rrssuubb____(self, other)
     |  
     |  ____rrttrruueeddiivv____(self, other)
     |  
     |  ____ssuubb____(self, other)
     |  
     |  ____ttrruueeddiivv____(self, other)
     |  
     |  bbiittaanndd(self, other)
     |  
     |  bbiittlleeffttsshhiifftt(self, other)
     |  
     |  bbiittoorr(self, other)
     |  
     |  bbiittrriigghhttsshhiifftt(self, other)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Combinable:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Combinable:
     |  
     |  AADDDD = '+'
     |  
     |  BBIITTAANNDD = '&'
     |  
     |  BBIITTLLEEFFTTSSHHIIFFTT = '<<'
     |  
     |  BBIITTOORR = '|'
     |  
     |  BBIITTRRIIGGHHTTSSHHIIFFTT = '>>'
     |  
     |  DDIIVV = '/'
     |  
     |  MMOODD = '%%'
     |  
     |  MMUULL = '*'
     |  
     |  PPOOWW = '^'
     |  
     |  SSUUBB = '-'
    
    class FFiieelldd(django.db.models.query_utils.RegisterLookupMixin)
     |  Field(verbose_name=None, name=None, primary_key=False, max_length=None, unique=False, blank=False, null=False, db_index=False, rel=None, default=<class 'django.db.models.fields.NOT_PROVIDED'>, editable=True, serialize=True, unique_for_date=None, unique_for_month=None, unique_for_year=None, choices=None, help_text='', db_column=None, db_tablespace=None, auto_created=False, validators=(), error_messages=None)
     |  
     |  Base class for all field types
     |  
     |  Method resolution order:
     |      Field
     |      django.db.models.query_utils.RegisterLookupMixin
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memodict)
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggee____(self, other, NotImplemented=NotImplemented)
     |      Return a >= b.  Computed by @total_ordering from (not a < b).
     |  
     |  ____ggtt____(self, other, NotImplemented=NotImplemented)
     |      Return a > b.  Computed by @total_ordering from (not a < b) and (a != b).
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____iinniitt____(self, verbose_name=None, name=None, primary_key=False, max_length=None, unique=False, blank=False, null=False, db_index=False, rel=None, default=<class 'django.db.models.fields.NOT_PROVIDED'>, editable=True, serialize=True, unique_for_date=None, unique_for_month=None, unique_for_year=None, choices=None, help_text='', db_column=None, db_tablespace=None, auto_created=False, validators=(), error_messages=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____llee____(self, other, NotImplemented=NotImplemented)
     |      Return a <= b.  Computed by @total_ordering from (a < b) or (a == b).
     |  
     |  ____lltt____(self, other)
     |      Return self<value.
     |  
     |  ____rreedduuccee____(self)
     |      Pickling should return the model._meta.fields instance of the field,
     |      not a new copy of that field. So, use the app registry to load the
     |      model and then the field back.
     |  
     |  ____rreepprr____(self)
     |      Display the module, class, and name of the field.
     |  
     |  ____ssttrr____(self)
     |      Return "app_label.model_label.field_name" for fields attached to
     |      models.
     |  
     |  ccaacchheedd__ccooll = <django.utils.functional.cached_property object>
     |  ccaasstt__ddbb__ttyyppee(self, connection)
     |      Return the data type to use in the Cast() function.
     |  
     |  cchheecckk(self, **kwargs)
     |  
     |  cclleeaann(self, value, model_instance)
     |      Convert the value's type and run validation. Validation errors
     |      from to_python() and validate() are propagated. Return the correct
     |      value if no error is raised.
     |  
     |  cclloonnee(self)
     |      Uses deconstruct() to clone a new copy of this Field.
     |      Will not preserve any class attachments/attribute names.
     |  
     |  ccoonnttrriibbuuttee__ttoo__ccllaassss(self, cls, name, private_only=False)
     |      Register the field with the model class it belongs to.
     |      
     |      If private_only is True, create a separate instance of this field
     |      for every subclass of cls, even if cls is not an abstract model.
     |  
     |  ddbb__cchheecckk(self, connection)
     |      Return the database column check constraint for this field, for the
     |      provided connection. Works the same way as db_type() for the case that
     |      get_internal_type() does not map to a preexisting model field.
     |  
     |  ddbb__ppaarraammeetteerrss(self, connection)
     |      Extension of db_type(), providing a range of different return values
     |      (type, checks). This will look at db_type(), allowing custom model
     |      fields to override it.
     |  
     |  ddbb__ttyyppee(self, connection)
     |      Return the database column data type for this field, for the provided
     |      connection.
     |  
     |  ddbb__ttyyppee__ppaarraammeetteerrss(self, connection)
     |  
     |  ddbb__ttyyppee__ssuuffffiixx(self, connection)
     |  
     |  ddeeccoonnssttrruucctt(self)
     |      Return enough information to recreate the field as a 4-tuple:
     |      
     |       * The name of the field on the model, if contribute_to_class() has
     |         been run.
     |       * The import path of the field, including the class:e.g.
     |         django.db.models.IntegerField This should be the most portable
     |         version, so less specific may be better.
     |       * A list of positional arguments.
     |       * A dict of keyword arguments.
     |      
     |      Note that the positional or keyword arguments must contain values of
     |      the following types (including inner values of collection types):
     |      
     |       * None, bool, str, int, float, complex, set, frozenset, list, tuple,
     |         dict
     |       * UUID
     |       * datetime.datetime (naive), datetime.date
     |       * top-level classes, top-level functions - will be referenced by their
     |         full import path
     |       * Storage instances - these have their own deconstruct() method
     |      
     |      This is because the values here must be serialized into a text format
     |      (possibly new Python code, possibly JSON) and these are the only types
     |      with encoding handlers defined.
     |      
     |      There's no need to return the exact way the field was instantiated this
     |      time, just ensure that the resulting field is the same - prefer keyword
     |      arguments over positional ones, and omit parameters with their default
     |      values.
     |  
     |  ffoorrmmffiieelldd(self, form_class=None, choices_form_class=None, **kwargs)
     |      Return a django.forms.Field instance for this field.
     |  
     |  ggeett__aattttnnaammee(self)
     |  
     |  ggeett__aattttnnaammee__ccoolluummnn(self)
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], limit_choices_to=None, ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |  
     |  ggeett__ccooll(self, alias, output_field=None)
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ddbb__pprreepp__ssaavvee(self, value, connection)
     |      Return field's value prepared for saving into a database.
     |  
     |  ggeett__ddbb__pprreepp__vvaalluuee(self, value, connection, prepared=False)
     |      Return field's value prepared for interacting with the database backend.
     |      
     |      Used by the default implementations of get_db_prep_save().
     |  
     |  ggeett__ddeeffaauulltt(self)
     |      Return the default value for this field.
     |  
     |  ggeett__ffiilltteerr__kkwwaarrggss__ffoorr__oobbjjeecctt(self, obj)
     |      Return a dict that when passed as kwargs to self.model.filter(), would
     |      yield all instances having the same value for this field as obj has.
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  ggeett__ppkk__vvaalluuee__oonn__ssaavvee(self, instance)
     |      Hook to generate new PK values on save. This method is called when
     |      saving instances with no primary key value set. If this method returns
     |      something else than None, then the returned value is used when saving
     |      the new instance.
     |  
     |  ggeett__pprreepp__vvaalluuee(self, value)
     |      Perform preliminary non-db specific value checks and conversions.
     |  
     |  hhaass__ddeeffaauulltt(self)
     |      Return a boolean of whether this field has a default value.
     |  
     |  pprree__ssaavvee(self, model_instance, add)
     |      Return field's value just before saving.
     |  
     |  rreell__ddbb__ttyyppee(self, connection)
     |      Return the data type that a related field pointing to this field should
     |      use. For example, this method is called by ForeignKey and OneToOneField
     |      to determine its data type.
     |  
     |  rruunn__vvaalliiddaattoorrss(self, value)
     |  
     |  ssaavvee__ffoorrmm__ddaattaa(self, instance, data)
     |  
     |  sseelleecctt__ffoorrmmaatt(self, compiler, sql, params)
     |      Custom format for select clauses. For example, GIS columns need to be
     |      selected as AsText(table.col) on MySQL as the table.col data can't be
     |      used by Django.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__nnaammee(self, name)
     |  
     |  ttoo__ppyytthhoonn(self, value)
     |      Convert the input value into the expected Python data type, raising
     |      django.core.exceptions.ValidationError if the data can't be converted.
     |      Return the converted value. Subclasses should override this.
     |  
     |  vvaalliiddaattee(self, value, model_instance)
     |      Validate value and raise ValidationError if necessary. Subclasses
     |      should override this to provide validation logic.
     |  
     |  vvaalliiddaattoorrss = <django.utils.functional.cached_property object>
     |  vvaalluuee__ffrroomm__oobbjjeecctt(self, obj)
     |      Return the value of this field in the given model instance.
     |  
     |  vvaalluuee__ttoo__ssttrriinngg(self, obj)
     |      Return a string value of this field from the passed obj.
     |      This is used by the serialization framework.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ddbb__ttaabblleessppaaccee
     |  
     |  ddeessccrriippttiioonn
     |  
     |  ffllaattcchhooiicceess
     |      Flattened version of choices tuple.
     |  
     |  uunniiqquuee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  aauuttoo__ccrreeaattiioonn__ccoouunntteerr = -13
     |  
     |  ccllaassss__llooookkuuppss = {'contains': <class 'django.db.models.lookups.Contains...
     |  
     |  ccrreeaattiioonn__ccoouunntteerr = 74
     |  
     |  ddeeffaauulltt__eerrrroorr__mmeessssaaggeess = {'blank': 'This field cannot be blank.', 'inv...
     |  
     |  ddeeffaauulltt__vvaalliiddaattoorrss = []
     |  
     |  eemmppttyy__ssttrriinnggss__aalllloowweedd = True
     |  
     |  eemmppttyy__vvaalluueess = [None, '', [], (), {}]
     |  
     |  hhiiddddeenn = False
     |  
     |  mmaannyy__ttoo__mmaannyy = None
     |  
     |  mmaannyy__ttoo__oonnee = None
     |  
     |  oonnee__ttoo__mmaannyy = None
     |  
     |  oonnee__ttoo__oonnee = None
     |  
     |  rreellaatteedd__mmooddeell = None
     |  
     |  ssyysstteemm__cchheecckk__ddeepprreeccaatteedd__ddeettaaiillss = None
     |  
     |  ssyysstteemm__cchheecckk__rreemmoovveedd__ddeettaaiillss = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ttrraannssffoorrmm(self, lookup_name)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuuppss() from builtins.type
     |  
     |  rreeggiisstteerr__llooookkuupp(lookup, lookup_name=None) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  mmeerrggee__ddiiccttss(dicts)
     |      Merge dicts in reverse to preference the order of the original list. e.g.,
     |      merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class FFiieellddDDooeessNNoottEExxiisstt(builtins.Exception)
     |  The requested model field does not exist
     |  
     |  Method resolution order:
     |      FieldDoesNotExist
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |  
     |  ____nneeww____(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  ____ddeellaattttrr____(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  ____ggeettaattttrriibbuuttee____(self, name, /)
     |      Return getattr(self, name).
     |  
     |  ____rreedduuccee____(...)
     |      Helper for pickle.
     |  
     |  ____rreepprr____(self, /)
     |      Return repr(self).
     |  
     |  ____sseettaattttrr____(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  ____sseettssttaattee____(...)
     |  
     |  ____ssttrr____(self, /)
     |      Return str(self).
     |  
     |  wwiitthh__ttrraacceebbaacckk(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  ____ccaauussee____
     |      exception cause
     |  
     |  ____ccoonntteexxtt____
     |      exception context
     |  
     |  ____ddiicctt____
     |  
     |  ____ssuupppprreessss__ccoonntteexxtt____
     |  
     |  ____ttrraacceebbaacckk____
     |  
     |  aarrggss
    
    class FFiilleeFFiieelldd(django.db.models.fields.Field)
     |  FileField(verbose_name=None, name=None, upload_to='', storage=None, **kwargs)
     |  
     |  Base class for all field types
     |  
     |  Method resolution order:
     |      FileField
     |      django.db.models.fields.Field
     |      django.db.models.query_utils.RegisterLookupMixin
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, verbose_name=None, name=None, upload_to='', storage=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  cchheecckk(self, **kwargs)
     |  
     |  ccoonnttrriibbuuttee__ttoo__ccllaassss(self, cls, name, **kwargs)
     |      Register the field with the model class it belongs to.
     |      
     |      If private_only is True, create a separate instance of this field
     |      for every subclass of cls, even if cls is not an abstract model.
     |  
     |  ddeeccoonnssttrruucctt(self)
     |      Return enough information to recreate the field as a 4-tuple:
     |      
     |       * The name of the field on the model, if contribute_to_class() has
     |         been run.
     |       * The import path of the field, including the class:e.g.
     |         django.db.models.IntegerField This should be the most portable
     |         version, so less specific may be better.
     |       * A list of positional arguments.
     |       * A dict of keyword arguments.
     |      
     |      Note that the positional or keyword arguments must contain values of
     |      the following types (including inner values of collection types):
     |      
     |       * None, bool, str, int, float, complex, set, frozenset, list, tuple,
     |         dict
     |       * UUID
     |       * datetime.datetime (naive), datetime.date
     |       * top-level classes, top-level functions - will be referenced by their
     |         full import path
     |       * Storage instances - these have their own deconstruct() method
     |      
     |      This is because the values here must be serialized into a text format
     |      (possibly new Python code, possibly JSON) and these are the only types
     |      with encoding handlers defined.
     |      
     |      There's no need to return the exact way the field was instantiated this
     |      time, just ensure that the resulting field is the same - prefer keyword
     |      arguments over positional ones, and omit parameters with their default
     |      values.
     |  
     |  ffoorrmmffiieelldd(self, **kwargs)
     |      Return a django.forms.Field instance for this field.
     |  
     |  ggeenneerraattee__ffiilleennaammee(self, instance, filename)
     |      Apply (if callable) or prepend (if a string) upload_to to the filename,
     |      then delegate further processing of the name to the storage backend.
     |      Until the storage layer, all file paths are expected to be Unix style
     |      (with forward slashes).
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  ggeett__pprreepp__vvaalluuee(self, value)
     |      Perform preliminary non-db specific value checks and conversions.
     |  
     |  pprree__ssaavvee(self, model_instance, add)
     |      Return field's value just before saving.
     |  
     |  ssaavvee__ffoorrmm__ddaattaa(self, instance, data)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  aattttrr__ccllaassss = <class 'django.db.models.fields.files.FieldFile'>
     |      A mixin class used to forward file methods to an underlaying file
     |      object.  The internal file object has to be called "file"::
     |      
     |          class FileProxy(FileProxyMixin):
     |              def __init__(self, file):
     |                  self.file = file
     |  
     |  ddeessccrriippttiioonn = 'File'
     |  
     |  ddeessccrriippttoorr__ccllaassss = <class 'django.db.models.fields.files.FileDescripto...
     |      The descriptor for the file attribute on the model instance. Return a
     |      FieldFile when accessed so you can write code like::
     |      
     |          >>> from myapp.models import MyModel
     |          >>> instance = MyModel.objects.get(pk=1)
     |          >>> instance.file.size
     |      
     |      Assign a file object on assignment so you can do::
     |      
     |          >>> with open('/path/to/hello.world', 'r') as f:
     |          ...     instance.file = File(f)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.fields.Field:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memodict)
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggee____(self, other, NotImplemented=NotImplemented)
     |      Return a >= b.  Computed by @total_ordering from (not a < b).
     |  
     |  ____ggtt____(self, other, NotImplemented=NotImplemented)
     |      Return a > b.  Computed by @total_ordering from (not a < b) and (a != b).
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____llee____(self, other, NotImplemented=NotImplemented)
     |      Return a <= b.  Computed by @total_ordering from (a < b) or (a == b).
     |  
     |  ____lltt____(self, other)
     |      Return self<value.
     |  
     |  ____rreedduuccee____(self)
     |      Pickling should return the model._meta.fields instance of the field,
     |      not a new copy of that field. So, use the app registry to load the
     |      model and then the field back.
     |  
     |  ____rreepprr____(self)
     |      Display the module, class, and name of the field.
     |  
     |  ____ssttrr____(self)
     |      Return "app_label.model_label.field_name" for fields attached to
     |      models.
     |  
     |  ccaacchheedd__ccooll = <django.utils.functional.cached_property object>
     |  ccaasstt__ddbb__ttyyppee(self, connection)
     |      Return the data type to use in the Cast() function.
     |  
     |  cclleeaann(self, value, model_instance)
     |      Convert the value's type and run validation. Validation errors
     |      from to_python() and validate() are propagated. Return the correct
     |      value if no error is raised.
     |  
     |  cclloonnee(self)
     |      Uses deconstruct() to clone a new copy of this Field.
     |      Will not preserve any class attachments/attribute names.
     |  
     |  ddbb__cchheecckk(self, connection)
     |      Return the database column check constraint for this field, for the
     |      provided connection. Works the same way as db_type() for the case that
     |      get_internal_type() does not map to a preexisting model field.
     |  
     |  ddbb__ppaarraammeetteerrss(self, connection)
     |      Extension of db_type(), providing a range of different return values
     |      (type, checks). This will look at db_type(), allowing custom model
     |      fields to override it.
     |  
     |  ddbb__ttyyppee(self, connection)
     |      Return the database column data type for this field, for the provided
     |      connection.
     |  
     |  ddbb__ttyyppee__ppaarraammeetteerrss(self, connection)
     |  
     |  ddbb__ttyyppee__ssuuffffiixx(self, connection)
     |  
     |  ggeett__aattttnnaammee(self)
     |  
     |  ggeett__aattttnnaammee__ccoolluummnn(self)
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], limit_choices_to=None, ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |  
     |  ggeett__ccooll(self, alias, output_field=None)
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ddbb__pprreepp__ssaavvee(self, value, connection)
     |      Return field's value prepared for saving into a database.
     |  
     |  ggeett__ddbb__pprreepp__vvaalluuee(self, value, connection, prepared=False)
     |      Return field's value prepared for interacting with the database backend.
     |      
     |      Used by the default implementations of get_db_prep_save().
     |  
     |  ggeett__ddeeffaauulltt(self)
     |      Return the default value for this field.
     |  
     |  ggeett__ffiilltteerr__kkwwaarrggss__ffoorr__oobbjjeecctt(self, obj)
     |      Return a dict that when passed as kwargs to self.model.filter(), would
     |      yield all instances having the same value for this field as obj has.
     |  
     |  ggeett__ppkk__vvaalluuee__oonn__ssaavvee(self, instance)
     |      Hook to generate new PK values on save. This method is called when
     |      saving instances with no primary key value set. If this method returns
     |      something else than None, then the returned value is used when saving
     |      the new instance.
     |  
     |  hhaass__ddeeffaauulltt(self)
     |      Return a boolean of whether this field has a default value.
     |  
     |  rreell__ddbb__ttyyppee(self, connection)
     |      Return the data type that a related field pointing to this field should
     |      use. For example, this method is called by ForeignKey and OneToOneField
     |      to determine its data type.
     |  
     |  rruunn__vvaalliiddaattoorrss(self, value)
     |  
     |  sseelleecctt__ffoorrmmaatt(self, compiler, sql, params)
     |      Custom format for select clauses. For example, GIS columns need to be
     |      selected as AsText(table.col) on MySQL as the table.col data can't be
     |      used by Django.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__nnaammee(self, name)
     |  
     |  ttoo__ppyytthhoonn(self, value)
     |      Convert the input value into the expected Python data type, raising
     |      django.core.exceptions.ValidationError if the data can't be converted.
     |      Return the converted value. Subclasses should override this.
     |  
     |  vvaalliiddaattee(self, value, model_instance)
     |      Validate value and raise ValidationError if necessary. Subclasses
     |      should override this to provide validation logic.
     |  
     |  vvaalliiddaattoorrss = <django.utils.functional.cached_property object>
     |  vvaalluuee__ffrroomm__oobbjjeecctt(self, obj)
     |      Return the value of this field in the given model instance.
     |  
     |  vvaalluuee__ttoo__ssttrriinngg(self, obj)
     |      Return a string value of this field from the passed obj.
     |      This is used by the serialization framework.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.fields.Field:
     |  
     |  ddbb__ttaabblleessppaaccee
     |  
     |  ffllaattcchhooiicceess
     |      Flattened version of choices tuple.
     |  
     |  uunniiqquuee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.db.models.fields.Field:
     |  
     |  aauuttoo__ccrreeaattiioonn__ccoouunntteerr = -13
     |  
     |  ccllaassss__llooookkuuppss = {'contains': <class 'django.db.models.lookups.Contains...
     |  
     |  ccrreeaattiioonn__ccoouunntteerr = 74
     |  
     |  ddeeffaauulltt__eerrrroorr__mmeessssaaggeess = {'blank': 'This field cannot be blank.', 'inv...
     |  
     |  ddeeffaauulltt__vvaalliiddaattoorrss = []
     |  
     |  eemmppttyy__ssttrriinnggss__aalllloowweedd = True
     |  
     |  eemmppttyy__vvaalluueess = [None, '', [], (), {}]
     |  
     |  hhiiddddeenn = False
     |  
     |  mmaannyy__ttoo__mmaannyy = None
     |  
     |  mmaannyy__ttoo__oonnee = None
     |  
     |  oonnee__ttoo__mmaannyy = None
     |  
     |  oonnee__ttoo__oonnee = None
     |  
     |  rreellaatteedd__mmooddeell = None
     |  
     |  ssyysstteemm__cchheecckk__ddeepprreeccaatteedd__ddeettaaiillss = None
     |  
     |  ssyysstteemm__cchheecckk__rreemmoovveedd__ddeettaaiillss = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ttrraannssffoorrmm(self, lookup_name)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuuppss() from builtins.type
     |  
     |  rreeggiisstteerr__llooookkuupp(lookup, lookup_name=None) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  mmeerrggee__ddiiccttss(dicts)
     |      Merge dicts in reverse to preference the order of the original list. e.g.,
     |      merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class FFiilleePPaatthhFFiieelldd(Field)
     |  FilePathField(verbose_name=None, name=None, path='', match=None, recursive=False, allow_files=True, allow_folders=False, **kwargs)
     |  
     |  Base class for all field types
     |  
     |  Method resolution order:
     |      FilePathField
     |      Field
     |      django.db.models.query_utils.RegisterLookupMixin
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, verbose_name=None, name=None, path='', match=None, recursive=False, allow_files=True, allow_folders=False, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  cchheecckk(self, **kwargs)
     |  
     |  ddeeccoonnssttrruucctt(self)
     |      Return enough information to recreate the field as a 4-tuple:
     |      
     |       * The name of the field on the model, if contribute_to_class() has
     |         been run.
     |       * The import path of the field, including the class:e.g.
     |         django.db.models.IntegerField This should be the most portable
     |         version, so less specific may be better.
     |       * A list of positional arguments.
     |       * A dict of keyword arguments.
     |      
     |      Note that the positional or keyword arguments must contain values of
     |      the following types (including inner values of collection types):
     |      
     |       * None, bool, str, int, float, complex, set, frozenset, list, tuple,
     |         dict
     |       * UUID
     |       * datetime.datetime (naive), datetime.date
     |       * top-level classes, top-level functions - will be referenced by their
     |         full import path
     |       * Storage instances - these have their own deconstruct() method
     |      
     |      This is because the values here must be serialized into a text format
     |      (possibly new Python code, possibly JSON) and these are the only types
     |      with encoding handlers defined.
     |      
     |      There's no need to return the exact way the field was instantiated this
     |      time, just ensure that the resulting field is the same - prefer keyword
     |      arguments over positional ones, and omit parameters with their default
     |      values.
     |  
     |  ffoorrmmffiieelldd(self, **kwargs)
     |      Return a django.forms.Field instance for this field.
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  ggeett__pprreepp__vvaalluuee(self, value)
     |      Perform preliminary non-db specific value checks and conversions.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ddeessccrriippttiioonn = 'File path'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Field:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memodict)
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggee____(self, other, NotImplemented=NotImplemented)
     |      Return a >= b.  Computed by @total_ordering from (not a < b).
     |  
     |  ____ggtt____(self, other, NotImplemented=NotImplemented)
     |      Return a > b.  Computed by @total_ordering from (not a < b) and (a != b).
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____llee____(self, other, NotImplemented=NotImplemented)
     |      Return a <= b.  Computed by @total_ordering from (a < b) or (a == b).
     |  
     |  ____lltt____(self, other)
     |      Return self<value.
     |  
     |  ____rreedduuccee____(self)
     |      Pickling should return the model._meta.fields instance of the field,
     |      not a new copy of that field. So, use the app registry to load the
     |      model and then the field back.
     |  
     |  ____rreepprr____(self)
     |      Display the module, class, and name of the field.
     |  
     |  ____ssttrr____(self)
     |      Return "app_label.model_label.field_name" for fields attached to
     |      models.
     |  
     |  ccaacchheedd__ccooll = <django.utils.functional.cached_property object>
     |  ccaasstt__ddbb__ttyyppee(self, connection)
     |      Return the data type to use in the Cast() function.
     |  
     |  cclleeaann(self, value, model_instance)
     |      Convert the value's type and run validation. Validation errors
     |      from to_python() and validate() are propagated. Return the correct
     |      value if no error is raised.
     |  
     |  cclloonnee(self)
     |      Uses deconstruct() to clone a new copy of this Field.
     |      Will not preserve any class attachments/attribute names.
     |  
     |  ccoonnttrriibbuuttee__ttoo__ccllaassss(self, cls, name, private_only=False)
     |      Register the field with the model class it belongs to.
     |      
     |      If private_only is True, create a separate instance of this field
     |      for every subclass of cls, even if cls is not an abstract model.
     |  
     |  ddbb__cchheecckk(self, connection)
     |      Return the database column check constraint for this field, for the
     |      provided connection. Works the same way as db_type() for the case that
     |      get_internal_type() does not map to a preexisting model field.
     |  
     |  ddbb__ppaarraammeetteerrss(self, connection)
     |      Extension of db_type(), providing a range of different return values
     |      (type, checks). This will look at db_type(), allowing custom model
     |      fields to override it.
     |  
     |  ddbb__ttyyppee(self, connection)
     |      Return the database column data type for this field, for the provided
     |      connection.
     |  
     |  ddbb__ttyyppee__ppaarraammeetteerrss(self, connection)
     |  
     |  ddbb__ttyyppee__ssuuffffiixx(self, connection)
     |  
     |  ggeett__aattttnnaammee(self)
     |  
     |  ggeett__aattttnnaammee__ccoolluummnn(self)
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], limit_choices_to=None, ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |  
     |  ggeett__ccooll(self, alias, output_field=None)
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ddbb__pprreepp__ssaavvee(self, value, connection)
     |      Return field's value prepared for saving into a database.
     |  
     |  ggeett__ddbb__pprreepp__vvaalluuee(self, value, connection, prepared=False)
     |      Return field's value prepared for interacting with the database backend.
     |      
     |      Used by the default implementations of get_db_prep_save().
     |  
     |  ggeett__ddeeffaauulltt(self)
     |      Return the default value for this field.
     |  
     |  ggeett__ffiilltteerr__kkwwaarrggss__ffoorr__oobbjjeecctt(self, obj)
     |      Return a dict that when passed as kwargs to self.model.filter(), would
     |      yield all instances having the same value for this field as obj has.
     |  
     |  ggeett__ppkk__vvaalluuee__oonn__ssaavvee(self, instance)
     |      Hook to generate new PK values on save. This method is called when
     |      saving instances with no primary key value set. If this method returns
     |      something else than None, then the returned value is used when saving
     |      the new instance.
     |  
     |  hhaass__ddeeffaauulltt(self)
     |      Return a boolean of whether this field has a default value.
     |  
     |  pprree__ssaavvee(self, model_instance, add)
     |      Return field's value just before saving.
     |  
     |  rreell__ddbb__ttyyppee(self, connection)
     |      Return the data type that a related field pointing to this field should
     |      use. For example, this method is called by ForeignKey and OneToOneField
     |      to determine its data type.
     |  
     |  rruunn__vvaalliiddaattoorrss(self, value)
     |  
     |  ssaavvee__ffoorrmm__ddaattaa(self, instance, data)
     |  
     |  sseelleecctt__ffoorrmmaatt(self, compiler, sql, params)
     |      Custom format for select clauses. For example, GIS columns need to be
     |      selected as AsText(table.col) on MySQL as the table.col data can't be
     |      used by Django.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__nnaammee(self, name)
     |  
     |  ttoo__ppyytthhoonn(self, value)
     |      Convert the input value into the expected Python data type, raising
     |      django.core.exceptions.ValidationError if the data can't be converted.
     |      Return the converted value. Subclasses should override this.
     |  
     |  vvaalliiddaattee(self, value, model_instance)
     |      Validate value and raise ValidationError if necessary. Subclasses
     |      should override this to provide validation logic.
     |  
     |  vvaalliiddaattoorrss = <django.utils.functional.cached_property object>
     |  vvaalluuee__ffrroomm__oobbjjeecctt(self, obj)
     |      Return the value of this field in the given model instance.
     |  
     |  vvaalluuee__ttoo__ssttrriinngg(self, obj)
     |      Return a string value of this field from the passed obj.
     |      This is used by the serialization framework.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Field:
     |  
     |  ddbb__ttaabblleessppaaccee
     |  
     |  ffllaattcchhooiicceess
     |      Flattened version of choices tuple.
     |  
     |  uunniiqquuee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Field:
     |  
     |  aauuttoo__ccrreeaattiioonn__ccoouunntteerr = -13
     |  
     |  ccllaassss__llooookkuuppss = {'contains': <class 'django.db.models.lookups.Contains...
     |  
     |  ccrreeaattiioonn__ccoouunntteerr = 74
     |  
     |  ddeeffaauulltt__eerrrroorr__mmeessssaaggeess = {'blank': 'This field cannot be blank.', 'inv...
     |  
     |  ddeeffaauulltt__vvaalliiddaattoorrss = []
     |  
     |  eemmppttyy__ssttrriinnggss__aalllloowweedd = True
     |  
     |  eemmppttyy__vvaalluueess = [None, '', [], (), {}]
     |  
     |  hhiiddddeenn = False
     |  
     |  mmaannyy__ttoo__mmaannyy = None
     |  
     |  mmaannyy__ttoo__oonnee = None
     |  
     |  oonnee__ttoo__mmaannyy = None
     |  
     |  oonnee__ttoo__oonnee = None
     |  
     |  rreellaatteedd__mmooddeell = None
     |  
     |  ssyysstteemm__cchheecckk__ddeepprreeccaatteedd__ddeettaaiillss = None
     |  
     |  ssyysstteemm__cchheecckk__rreemmoovveedd__ddeettaaiillss = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ttrraannssffoorrmm(self, lookup_name)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuuppss() from builtins.type
     |  
     |  rreeggiisstteerr__llooookkuupp(lookup, lookup_name=None) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  mmeerrggee__ddiiccttss(dicts)
     |      Merge dicts in reverse to preference the order of the original list. e.g.,
     |      merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class FFiilltteerreeddRReellaattiioonn(builtins.object)
     |  FilteredRelation(relation_name, *, condition=<Q: (AND: )>)
     |  
     |  Specify custom filtering in the ON clause of SQL joins.
     |  
     |  Methods defined here:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____iinniitt____(self, relation_name, *, condition=<Q: (AND: )>)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  aass__ssqqll(self, compiler, connection)
     |  
     |  cclloonnee(self)
     |  
     |  rreessoollvvee__eexxpprreessssiioonn(self, *args, **kwargs)
     |      QuerySet.annotate() only accepts expression-like arguments
     |      (with a resolve_expression() method).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ____hhaasshh____ = None
    
    class FFllooaattFFiieelldd(Field)
     |  FloatField(verbose_name=None, name=None, primary_key=False, max_length=None, unique=False, blank=False, null=False, db_index=False, rel=None, default=<class 'django.db.models.fields.NOT_PROVIDED'>, editable=True, serialize=True, unique_for_date=None, unique_for_month=None, unique_for_year=None, choices=None, help_text='', db_column=None, db_tablespace=None, auto_created=False, validators=(), error_messages=None)
     |  
     |  Base class for all field types
     |  
     |  Method resolution order:
     |      FloatField
     |      Field
     |      django.db.models.query_utils.RegisterLookupMixin
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ffoorrmmffiieelldd(self, **kwargs)
     |      Return a django.forms.Field instance for this field.
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  ggeett__pprreepp__vvaalluuee(self, value)
     |      Perform preliminary non-db specific value checks and conversions.
     |  
     |  ttoo__ppyytthhoonn(self, value)
     |      Convert the input value into the expected Python data type, raising
     |      django.core.exceptions.ValidationError if the data can't be converted.
     |      Return the converted value. Subclasses should override this.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ddeeffaauulltt__eerrrroorr__mmeessssaaggeess = {'invalid': "'%(value)s' value must be a floa...
     |  
     |  ddeessccrriippttiioonn = 'Floating point number'
     |  
     |  eemmppttyy__ssttrriinnggss__aalllloowweedd = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Field:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memodict)
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggee____(self, other, NotImplemented=NotImplemented)
     |      Return a >= b.  Computed by @total_ordering from (not a < b).
     |  
     |  ____ggtt____(self, other, NotImplemented=NotImplemented)
     |      Return a > b.  Computed by @total_ordering from (not a < b) and (a != b).
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____iinniitt____(self, verbose_name=None, name=None, primary_key=False, max_length=None, unique=False, blank=False, null=False, db_index=False, rel=None, default=<class 'django.db.models.fields.NOT_PROVIDED'>, editable=True, serialize=True, unique_for_date=None, unique_for_month=None, unique_for_year=None, choices=None, help_text='', db_column=None, db_tablespace=None, auto_created=False, validators=(), error_messages=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____llee____(self, other, NotImplemented=NotImplemented)
     |      Return a <= b.  Computed by @total_ordering from (a < b) or (a == b).
     |  
     |  ____lltt____(self, other)
     |      Return self<value.
     |  
     |  ____rreedduuccee____(self)
     |      Pickling should return the model._meta.fields instance of the field,
     |      not a new copy of that field. So, use the app registry to load the
     |      model and then the field back.
     |  
     |  ____rreepprr____(self)
     |      Display the module, class, and name of the field.
     |  
     |  ____ssttrr____(self)
     |      Return "app_label.model_label.field_name" for fields attached to
     |      models.
     |  
     |  ccaacchheedd__ccooll = <django.utils.functional.cached_property object>
     |  ccaasstt__ddbb__ttyyppee(self, connection)
     |      Return the data type to use in the Cast() function.
     |  
     |  cchheecckk(self, **kwargs)
     |  
     |  cclleeaann(self, value, model_instance)
     |      Convert the value's type and run validation. Validation errors
     |      from to_python() and validate() are propagated. Return the correct
     |      value if no error is raised.
     |  
     |  cclloonnee(self)
     |      Uses deconstruct() to clone a new copy of this Field.
     |      Will not preserve any class attachments/attribute names.
     |  
     |  ccoonnttrriibbuuttee__ttoo__ccllaassss(self, cls, name, private_only=False)
     |      Register the field with the model class it belongs to.
     |      
     |      If private_only is True, create a separate instance of this field
     |      for every subclass of cls, even if cls is not an abstract model.
     |  
     |  ddbb__cchheecckk(self, connection)
     |      Return the database column check constraint for this field, for the
     |      provided connection. Works the same way as db_type() for the case that
     |      get_internal_type() does not map to a preexisting model field.
     |  
     |  ddbb__ppaarraammeetteerrss(self, connection)
     |      Extension of db_type(), providing a range of different return values
     |      (type, checks). This will look at db_type(), allowing custom model
     |      fields to override it.
     |  
     |  ddbb__ttyyppee(self, connection)
     |      Return the database column data type for this field, for the provided
     |      connection.
     |  
     |  ddbb__ttyyppee__ppaarraammeetteerrss(self, connection)
     |  
     |  ddbb__ttyyppee__ssuuffffiixx(self, connection)
     |  
     |  ddeeccoonnssttrruucctt(self)
     |      Return enough information to recreate the field as a 4-tuple:
     |      
     |       * The name of the field on the model, if contribute_to_class() has
     |         been run.
     |       * The import path of the field, including the class:e.g.
     |         django.db.models.IntegerField This should be the most portable
     |         version, so less specific may be better.
     |       * A list of positional arguments.
     |       * A dict of keyword arguments.
     |      
     |      Note that the positional or keyword arguments must contain values of
     |      the following types (including inner values of collection types):
     |      
     |       * None, bool, str, int, float, complex, set, frozenset, list, tuple,
     |         dict
     |       * UUID
     |       * datetime.datetime (naive), datetime.date
     |       * top-level classes, top-level functions - will be referenced by their
     |         full import path
     |       * Storage instances - these have their own deconstruct() method
     |      
     |      This is because the values here must be serialized into a text format
     |      (possibly new Python code, possibly JSON) and these are the only types
     |      with encoding handlers defined.
     |      
     |      There's no need to return the exact way the field was instantiated this
     |      time, just ensure that the resulting field is the same - prefer keyword
     |      arguments over positional ones, and omit parameters with their default
     |      values.
     |  
     |  ggeett__aattttnnaammee(self)
     |  
     |  ggeett__aattttnnaammee__ccoolluummnn(self)
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], limit_choices_to=None, ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |  
     |  ggeett__ccooll(self, alias, output_field=None)
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ddbb__pprreepp__ssaavvee(self, value, connection)
     |      Return field's value prepared for saving into a database.
     |  
     |  ggeett__ddbb__pprreepp__vvaalluuee(self, value, connection, prepared=False)
     |      Return field's value prepared for interacting with the database backend.
     |      
     |      Used by the default implementations of get_db_prep_save().
     |  
     |  ggeett__ddeeffaauulltt(self)
     |      Return the default value for this field.
     |  
     |  ggeett__ffiilltteerr__kkwwaarrggss__ffoorr__oobbjjeecctt(self, obj)
     |      Return a dict that when passed as kwargs to self.model.filter(), would
     |      yield all instances having the same value for this field as obj has.
     |  
     |  ggeett__ppkk__vvaalluuee__oonn__ssaavvee(self, instance)
     |      Hook to generate new PK values on save. This method is called when
     |      saving instances with no primary key value set. If this method returns
     |      something else than None, then the returned value is used when saving
     |      the new instance.
     |  
     |  hhaass__ddeeffaauulltt(self)
     |      Return a boolean of whether this field has a default value.
     |  
     |  pprree__ssaavvee(self, model_instance, add)
     |      Return field's value just before saving.
     |  
     |  rreell__ddbb__ttyyppee(self, connection)
     |      Return the data type that a related field pointing to this field should
     |      use. For example, this method is called by ForeignKey and OneToOneField
     |      to determine its data type.
     |  
     |  rruunn__vvaalliiddaattoorrss(self, value)
     |  
     |  ssaavvee__ffoorrmm__ddaattaa(self, instance, data)
     |  
     |  sseelleecctt__ffoorrmmaatt(self, compiler, sql, params)
     |      Custom format for select clauses. For example, GIS columns need to be
     |      selected as AsText(table.col) on MySQL as the table.col data can't be
     |      used by Django.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__nnaammee(self, name)
     |  
     |  vvaalliiddaattee(self, value, model_instance)
     |      Validate value and raise ValidationError if necessary. Subclasses
     |      should override this to provide validation logic.
     |  
     |  vvaalliiddaattoorrss = <django.utils.functional.cached_property object>
     |  vvaalluuee__ffrroomm__oobbjjeecctt(self, obj)
     |      Return the value of this field in the given model instance.
     |  
     |  vvaalluuee__ttoo__ssttrriinngg(self, obj)
     |      Return a string value of this field from the passed obj.
     |      This is used by the serialization framework.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Field:
     |  
     |  ddbb__ttaabblleessppaaccee
     |  
     |  ffllaattcchhooiicceess
     |      Flattened version of choices tuple.
     |  
     |  uunniiqquuee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Field:
     |  
     |  aauuttoo__ccrreeaattiioonn__ccoouunntteerr = -13
     |  
     |  ccllaassss__llooookkuuppss = {'contains': <class 'django.db.models.lookups.Contains...
     |  
     |  ccrreeaattiioonn__ccoouunntteerr = 74
     |  
     |  ddeeffaauulltt__vvaalliiddaattoorrss = []
     |  
     |  eemmppttyy__vvaalluueess = [None, '', [], (), {}]
     |  
     |  hhiiddddeenn = False
     |  
     |  mmaannyy__ttoo__mmaannyy = None
     |  
     |  mmaannyy__ttoo__oonnee = None
     |  
     |  oonnee__ttoo__mmaannyy = None
     |  
     |  oonnee__ttoo__oonnee = None
     |  
     |  rreellaatteedd__mmooddeell = None
     |  
     |  ssyysstteemm__cchheecckk__ddeepprreeccaatteedd__ddeettaaiillss = None
     |  
     |  ssyysstteemm__cchheecckk__rreemmoovveedd__ddeettaaiillss = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ttrraannssffoorrmm(self, lookup_name)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuuppss() from builtins.type
     |  
     |  rreeggiisstteerr__llooookkuupp(lookup, lookup_name=None) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  mmeerrggee__ddiiccttss(dicts)
     |      Merge dicts in reverse to preference the order of the original list. e.g.,
     |      merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class FFoorreeiiggnnKKeeyy(ForeignObject)
     |  ForeignKey(to, on_delete, related_name=None, related_query_name=None, limit_choices_to=None, parent_link=False, to_field=None, db_constraint=True, **kwargs)
     |  
     |  Provide a many-to-one relation by adding a column to the local model
     |  to hold the remote value.
     |  
     |  By default ForeignKey will target the pk of the remote model but this
     |  behavior can be changed by using the ``to_field`` argument.
     |  
     |  Method resolution order:
     |      ForeignKey
     |      ForeignObject
     |      RelatedField
     |      django.db.models.fields.mixins.FieldCacheMixin
     |      django.db.models.fields.Field
     |      django.db.models.query_utils.RegisterLookupMixin
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, to, on_delete, related_name=None, related_query_name=None, limit_choices_to=None, parent_link=False, to_field=None, db_constraint=True, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  cchheecckk(self, **kwargs)
     |  
     |  ccoonnttrriibbuuttee__ttoo__rreellaatteedd__ccllaassss(self, cls, related)
     |  
     |  ccoonnvveerrtt__eemmppttyy__ssttrriinnggss(self, value, expression, connection)
     |  
     |  ddbb__cchheecckk(self, connection)
     |      Return the database column check constraint for this field, for the
     |      provided connection. Works the same way as db_type() for the case that
     |      get_internal_type() does not map to a preexisting model field.
     |  
     |  ddbb__ppaarraammeetteerrss(self, connection)
     |      Extension of db_type(), providing a range of different return values
     |      (type, checks). This will look at db_type(), allowing custom model
     |      fields to override it.
     |  
     |  ddbb__ttyyppee(self, connection)
     |      Return the database column data type for this field, for the provided
     |      connection.
     |  
     |  ddeeccoonnssttrruucctt(self)
     |      Return enough information to recreate the field as a 4-tuple:
     |      
     |       * The name of the field on the model, if contribute_to_class() has
     |         been run.
     |       * The import path of the field, including the class:e.g.
     |         django.db.models.IntegerField This should be the most portable
     |         version, so less specific may be better.
     |       * A list of positional arguments.
     |       * A dict of keyword arguments.
     |      
     |      Note that the positional or keyword arguments must contain values of
     |      the following types (including inner values of collection types):
     |      
     |       * None, bool, str, int, float, complex, set, frozenset, list, tuple,
     |         dict
     |       * UUID
     |       * datetime.datetime (naive), datetime.date
     |       * top-level classes, top-level functions - will be referenced by their
     |         full import path
     |       * Storage instances - these have their own deconstruct() method
     |      
     |      This is because the values here must be serialized into a text format
     |      (possibly new Python code, possibly JSON) and these are the only types
     |      with encoding handlers defined.
     |      
     |      There's no need to return the exact way the field was instantiated this
     |      time, just ensure that the resulting field is the same - prefer keyword
     |      arguments over positional ones, and omit parameters with their default
     |      values.
     |  
     |  ffoorrmmffiieelldd(self, *, using=None, **kwargs)
     |      Pass ``limit_choices_to`` to the field being constructed.
     |      
     |      Only passes it if there is a type that supports related fields.
     |      This is a similar strategy used to pass the ``queryset`` to the field
     |      being constructed.
     |  
     |  ggeett__aattttnnaammee(self)
     |  
     |  ggeett__aattttnnaammee__ccoolluummnn(self)
     |  
     |  ggeett__ccooll(self, alias, output_field=None)
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ddbb__pprreepp__ssaavvee(self, value, connection)
     |      Return field's value prepared for saving into a database.
     |  
     |  ggeett__ddbb__pprreepp__vvaalluuee(self, value, connection, prepared=False)
     |      Return field's value prepared for interacting with the database backend.
     |      
     |      Used by the default implementations of get_db_prep_save().
     |  
     |  ggeett__ddeeffaauulltt(self)
     |      Return the to_field if the default value is an object.
     |  
     |  ggeett__rreevveerrssee__ppaatthh__iinnffoo(self, filtered_relation=None)
     |      Get path from the related model to this field's model.
     |  
     |  ttoo__ppyytthhoonn(self, value)
     |      Convert the input value into the expected Python data type, raising
     |      django.core.exceptions.ValidationError if the data can't be converted.
     |      Return the converted value. Subclasses should override this.
     |  
     |  vvaalliiddaattee(self, value, model_instance)
     |      Validate value and raise ValidationError if necessary. Subclasses
     |      should override this to provide validation logic.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ttaarrggeett__ffiieelldd
     |      When filtering against this relation, return the field on the remote
     |      model against which the filtering should happen.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ddeeffaauulltt__eerrrroorr__mmeessssaaggeess = {'invalid': '%(model)s instance with %(field)...
     |  
     |  ddeessccrriippttiioonn = 'Foreign Key (type determined by related field)'
     |  
     |  eemmppttyy__ssttrriinnggss__aalllloowweedd = False
     |  
     |  mmaannyy__ttoo__mmaannyy = False
     |  
     |  mmaannyy__ttoo__oonnee = True
     |  
     |  oonnee__ttoo__mmaannyy = False
     |  
     |  oonnee__ttoo__oonnee = False
     |  
     |  rreell__ccllaassss = <class 'django.db.models.fields.reverse_related.ManyToOneR...
     |      Used by the ForeignKey field to store information about the relation.
     |      
     |      ``_meta.get_fields()`` returns this class to provide access to the field
     |      flags for the reverse relation.
     |      
     |      Note: Because we somewhat abuse the Rel objects by using them as reverse
     |      fields we get the funny situation where
     |      ``ManyToOneRel.many_to_one == False`` and
     |      ``ManyToOneRel.one_to_many == True``. This is unfortunate but the actual
     |      ManyToOneRel class is a private API and there is work underway to turn
     |      reverse relations into actual fields.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ForeignObject:
     |  
     |  ccoonnttrriibbuuttee__ttoo__ccllaassss(self, cls, name, private_only=False, **kwargs)
     |      Register the field with the model class it belongs to.
     |      
     |      If private_only is True, create a separate instance of this field
     |      for every subclass of cls, even if cls is not an abstract model.
     |  
     |  ggeett__eexxttrraa__ddeessccrriippttoorr__ffiilltteerr(self, instance)
     |      Return an extra filter condition for related object fetching when
     |      user does 'instance.fieldname', that is the extra filter is used in
     |      the descriptor of the field.
     |      
     |      The filter should be either a dict usable in .filter(**kwargs) call or
     |      a Q-object. The condition will be ANDed together with the relation's
     |      joining columns.
     |      
     |      A parallel method is get_extra_restriction() which is used in
     |      JOIN and subquery conditions.
     |  
     |  ggeett__eexxttrraa__rreessttrriiccttiioonn(self, where_class, alias, related_alias)
     |      Return a pair condition used for joining and subquery pushdown. The
     |      condition is something that responds to as_sql(compiler, connection)
     |      method.
     |      
     |      Note that currently referring both the 'alias' and 'related_alias'
     |      will not work in some conditions, like subquery pushdown.
     |      
     |      A parallel method is get_extra_descriptor_filter() which is used in
     |      instance.fieldname related object fetching.
     |  
     |  ggeett__ffoorreeiiggnn__rreellaatteedd__vvaalluuee(self, instance)
     |  
     |  ggeett__jjooiinniinngg__ccoolluummnnss(self, reverse_join=False)
     |  
     |  ggeett__llooccaall__rreellaatteedd__vvaalluuee(self, instance)
     |  
     |  ggeett__ppaatthh__iinnffoo(self, filtered_relation=None)
     |      Get path from this field to the related model.
     |  
     |  ggeett__rreevveerrssee__jjooiinniinngg__ccoolluummnnss(self)
     |  
     |  rreessoollvvee__rreellaatteedd__ffiieellddss(self)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from ForeignObject:
     |  
     |  ggeett__llooookkuuppss() from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from ForeignObject:
     |  
     |  ggeett__iinnssttaannccee__vvaalluuee__ffoorr__ffiieellddss(instance, fields)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ForeignObject:
     |  
     |  ffoorreeiiggnn__rreellaatteedd__ffiieellddss
     |  
     |  llooccaall__rreellaatteedd__ffiieellddss
     |  
     |  rreellaatteedd__ffiieellddss
     |  
     |  rreevveerrssee__rreellaatteedd__ffiieellddss
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from ForeignObject:
     |  
     |  ccllaassss__llooookkuuppss = {'exact': <class 'django.db.models.fields.related_look...
     |  
     |  ffoorrwwaarrdd__rreellaatteedd__aacccceessssoorr__ccllaassss = <class 'django.db.models.fields.relat...
     |      Accessor to the related object on the forward side of a many-to-one or
     |      one-to-one (via ForwardOneToOneDescriptor subclass) relation.
     |      
     |      In the example::
     |      
     |          class Child(Model):
     |              parent = ForeignKey(Parent, related_name='children')
     |      
     |      ``Child.parent`` is a ``ForwardManyToOneDescriptor`` instance.
     |  
     |  rreellaatteedd__aacccceessssoorr__ccllaassss = <class 'django.db.models.fields.related_descr...
     |      Accessor to the related objects manager on the reverse side of a
     |      many-to-one relation.
     |      
     |      In the example::
     |      
     |          class Child(Model):
     |              parent = ForeignKey(Parent, related_name='children')
     |      
     |      ``Parent.children`` is a ``ReverseManyToOneDescriptor`` instance.
     |      
     |      Most of the implementation is delegated to a dynamically defined manager
     |      class built by ``create_forward_many_to_many_manager()`` defined below.
     |  
     |  rreeqquuiirreess__uunniiqquuee__ttaarrggeett = True
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from RelatedField:
     |  
     |  ddoo__rreellaatteedd__ccllaassss(self, other, cls)
     |  
     |  ggeett__ccaacchhee__nnaammee(self)
     |  
     |  ggeett__ffoorrwwaarrdd__rreellaatteedd__ffiilltteerr(self, obj)
     |      Return the keyword arguments that when supplied to
     |      self.model.object.filter(), would select all instances related through
     |      this field to the remote obj. This is used to build the querysets
     |      returned by related descriptors. obj is an instance of
     |      self.related_field.model.
     |  
     |  ggeett__lliimmiitt__cchhooiicceess__ttoo(self)
     |      Return ``limit_choices_to`` for this model field.
     |      
     |      If it is a callable, it will be invoked and the result will be
     |      returned.
     |  
     |  ggeett__rreevveerrssee__rreellaatteedd__ffiilltteerr(self, obj)
     |      Complement to get_forward_related_filter(). Return the keyword
     |      arguments that when passed to self.related_field.model.object.filter()
     |      select all instances of self.related_field.model related through
     |      this field to obj. obj is an instance of self.model.
     |  
     |  rreellaatteedd__mmooddeell = <django.utils.functional.cached_property object>
     |  rreellaatteedd__qquueerryy__nnaammee(self)
     |      Define the name that can be used to identify this related object in a
     |      table-spanning query.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__rreell(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from RelatedField:
     |  
     |  sswwaappppaabbllee__sseettttiinngg
     |      Get the setting that this is powered from for swapping, or None
     |      if it's not swapped in / marked with swappable=False.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.fields.mixins.FieldCacheMixin:
     |  
     |  ddeelleettee__ccaacchheedd__vvaalluuee(self, instance)
     |  
     |  ggeett__ccaacchheedd__vvaalluuee(self, instance, default=<object object at 0x7f5792241230>)
     |  
     |  iiss__ccaacchheedd(self, instance)
     |  
     |  sseett__ccaacchheedd__vvaalluuee(self, instance, value)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.fields.mixins.FieldCacheMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.fields.Field:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memodict)
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggee____(self, other, NotImplemented=NotImplemented)
     |      Return a >= b.  Computed by @total_ordering from (not a < b).
     |  
     |  ____ggtt____(self, other, NotImplemented=NotImplemented)
     |      Return a > b.  Computed by @total_ordering from (not a < b) and (a != b).
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____llee____(self, other, NotImplemented=NotImplemented)
     |      Return a <= b.  Computed by @total_ordering from (a < b) or (a == b).
     |  
     |  ____lltt____(self, other)
     |      Return self<value.
     |  
     |  ____rreedduuccee____(self)
     |      Pickling should return the model._meta.fields instance of the field,
     |      not a new copy of that field. So, use the app registry to load the
     |      model and then the field back.
     |  
     |  ____rreepprr____(self)
     |      Display the module, class, and name of the field.
     |  
     |  ____ssttrr____(self)
     |      Return "app_label.model_label.field_name" for fields attached to
     |      models.
     |  
     |  ccaacchheedd__ccooll = <django.utils.functional.cached_property object>
     |  ccaasstt__ddbb__ttyyppee(self, connection)
     |      Return the data type to use in the Cast() function.
     |  
     |  cclleeaann(self, value, model_instance)
     |      Convert the value's type and run validation. Validation errors
     |      from to_python() and validate() are propagated. Return the correct
     |      value if no error is raised.
     |  
     |  cclloonnee(self)
     |      Uses deconstruct() to clone a new copy of this Field.
     |      Will not preserve any class attachments/attribute names.
     |  
     |  ddbb__ttyyppee__ppaarraammeetteerrss(self, connection)
     |  
     |  ddbb__ttyyppee__ssuuffffiixx(self, connection)
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], limit_choices_to=None, ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |  
     |  ggeett__ffiilltteerr__kkwwaarrggss__ffoorr__oobbjjeecctt(self, obj)
     |      Return a dict that when passed as kwargs to self.model.filter(), would
     |      yield all instances having the same value for this field as obj has.
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  ggeett__ppkk__vvaalluuee__oonn__ssaavvee(self, instance)
     |      Hook to generate new PK values on save. This method is called when
     |      saving instances with no primary key value set. If this method returns
     |      something else than None, then the returned value is used when saving
     |      the new instance.
     |  
     |  ggeett__pprreepp__vvaalluuee(self, value)
     |      Perform preliminary non-db specific value checks and conversions.
     |  
     |  hhaass__ddeeffaauulltt(self)
     |      Return a boolean of whether this field has a default value.
     |  
     |  pprree__ssaavvee(self, model_instance, add)
     |      Return field's value just before saving.
     |  
     |  rreell__ddbb__ttyyppee(self, connection)
     |      Return the data type that a related field pointing to this field should
     |      use. For example, this method is called by ForeignKey and OneToOneField
     |      to determine its data type.
     |  
     |  rruunn__vvaalliiddaattoorrss(self, value)
     |  
     |  ssaavvee__ffoorrmm__ddaattaa(self, instance, data)
     |  
     |  sseelleecctt__ffoorrmmaatt(self, compiler, sql, params)
     |      Custom format for select clauses. For example, GIS columns need to be
     |      selected as AsText(table.col) on MySQL as the table.col data can't be
     |      used by Django.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__nnaammee(self, name)
     |  
     |  vvaalliiddaattoorrss = <django.utils.functional.cached_property object>
     |  vvaalluuee__ffrroomm__oobbjjeecctt(self, obj)
     |      Return the value of this field in the given model instance.
     |  
     |  vvaalluuee__ttoo__ssttrriinngg(self, obj)
     |      Return a string value of this field from the passed obj.
     |      This is used by the serialization framework.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.fields.Field:
     |  
     |  ddbb__ttaabblleessppaaccee
     |  
     |  ffllaattcchhooiicceess
     |      Flattened version of choices tuple.
     |  
     |  uunniiqquuee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.db.models.fields.Field:
     |  
     |  aauuttoo__ccrreeaattiioonn__ccoouunntteerr = -13
     |  
     |  ccrreeaattiioonn__ccoouunntteerr = 74
     |  
     |  ddeeffaauulltt__vvaalliiddaattoorrss = []
     |  
     |  eemmppttyy__vvaalluueess = [None, '', [], (), {}]
     |  
     |  hhiiddddeenn = False
     |  
     |  ssyysstteemm__cchheecckk__ddeepprreeccaatteedd__ddeettaaiillss = None
     |  
     |  ssyysstteemm__cchheecckk__rreemmoovveedd__ddeettaaiillss = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ttrraannssffoorrmm(self, lookup_name)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  rreeggiisstteerr__llooookkuupp(lookup, lookup_name=None) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  mmeerrggee__ddiiccttss(dicts)
     |      Merge dicts in reverse to preference the order of the original list. e.g.,
     |      merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.
    
    class FFoorreeiiggnnOObbjjeecctt(RelatedField)
     |  ForeignObject(to, on_delete, from_fields, to_fields, rel=None, related_name=None, related_query_name=None, limit_choices_to=None, parent_link=False, swappable=True, **kwargs)
     |  
     |  Abstraction of the ForeignKey relation to support multi-column relations.
     |  
     |  Method resolution order:
     |      ForeignObject
     |      RelatedField
     |      django.db.models.fields.mixins.FieldCacheMixin
     |      django.db.models.fields.Field
     |      django.db.models.query_utils.RegisterLookupMixin
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, to, on_delete, from_fields, to_fields, rel=None, related_name=None, related_query_name=None, limit_choices_to=None, parent_link=False, swappable=True, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  cchheecckk(self, **kwargs)
     |  
     |  ccoonnttrriibbuuttee__ttoo__ccllaassss(self, cls, name, private_only=False, **kwargs)
     |      Register the field with the model class it belongs to.
     |      
     |      If private_only is True, create a separate instance of this field
     |      for every subclass of cls, even if cls is not an abstract model.
     |  
     |  ccoonnttrriibbuuttee__ttoo__rreellaatteedd__ccllaassss(self, cls, related)
     |  
     |  ddeeccoonnssttrruucctt(self)
     |      Return enough information to recreate the field as a 4-tuple:
     |      
     |       * The name of the field on the model, if contribute_to_class() has
     |         been run.
     |       * The import path of the field, including the class:e.g.
     |         django.db.models.IntegerField This should be the most portable
     |         version, so less specific may be better.
     |       * A list of positional arguments.
     |       * A dict of keyword arguments.
     |      
     |      Note that the positional or keyword arguments must contain values of
     |      the following types (including inner values of collection types):
     |      
     |       * None, bool, str, int, float, complex, set, frozenset, list, tuple,
     |         dict
     |       * UUID
     |       * datetime.datetime (naive), datetime.date
     |       * top-level classes, top-level functions - will be referenced by their
     |         full import path
     |       * Storage instances - these have their own deconstruct() method
     |      
     |      This is because the values here must be serialized into a text format
     |      (possibly new Python code, possibly JSON) and these are the only types
     |      with encoding handlers defined.
     |      
     |      There's no need to return the exact way the field was instantiated this
     |      time, just ensure that the resulting field is the same - prefer keyword
     |      arguments over positional ones, and omit parameters with their default
     |      values.
     |  
     |  ggeett__aattttnnaammee__ccoolluummnn(self)
     |  
     |  ggeett__eexxttrraa__ddeessccrriippttoorr__ffiilltteerr(self, instance)
     |      Return an extra filter condition for related object fetching when
     |      user does 'instance.fieldname', that is the extra filter is used in
     |      the descriptor of the field.
     |      
     |      The filter should be either a dict usable in .filter(**kwargs) call or
     |      a Q-object. The condition will be ANDed together with the relation's
     |      joining columns.
     |      
     |      A parallel method is get_extra_restriction() which is used in
     |      JOIN and subquery conditions.
     |  
     |  ggeett__eexxttrraa__rreessttrriiccttiioonn(self, where_class, alias, related_alias)
     |      Return a pair condition used for joining and subquery pushdown. The
     |      condition is something that responds to as_sql(compiler, connection)
     |      method.
     |      
     |      Note that currently referring both the 'alias' and 'related_alias'
     |      will not work in some conditions, like subquery pushdown.
     |      
     |      A parallel method is get_extra_descriptor_filter() which is used in
     |      instance.fieldname related object fetching.
     |  
     |  ggeett__ffoorreeiiggnn__rreellaatteedd__vvaalluuee(self, instance)
     |  
     |  ggeett__jjooiinniinngg__ccoolluummnnss(self, reverse_join=False)
     |  
     |  ggeett__llooccaall__rreellaatteedd__vvaalluuee(self, instance)
     |  
     |  ggeett__ppaatthh__iinnffoo(self, filtered_relation=None)
     |      Get path from this field to the related model.
     |  
     |  ggeett__rreevveerrssee__jjooiinniinngg__ccoolluummnnss(self)
     |  
     |  ggeett__rreevveerrssee__ppaatthh__iinnffoo(self, filtered_relation=None)
     |      Get path from the related model to this field's model.
     |  
     |  rreessoollvvee__rreellaatteedd__ffiieellddss(self)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ggeett__llooookkuuppss() from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ggeett__iinnssttaannccee__vvaalluuee__ffoorr__ffiieellddss(instance, fields)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ffoorreeiiggnn__rreellaatteedd__ffiieellddss
     |  
     |  llooccaall__rreellaatteedd__ffiieellddss
     |  
     |  rreellaatteedd__ffiieellddss
     |  
     |  rreevveerrssee__rreellaatteedd__ffiieellddss
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ccllaassss__llooookkuuppss = {'exact': <class 'django.db.models.fields.related_look...
     |  
     |  ffoorrwwaarrdd__rreellaatteedd__aacccceessssoorr__ccllaassss = <class 'django.db.models.fields.relat...
     |      Accessor to the related object on the forward side of a many-to-one or
     |      one-to-one (via ForwardOneToOneDescriptor subclass) relation.
     |      
     |      In the example::
     |      
     |          class Child(Model):
     |              parent = ForeignKey(Parent, related_name='children')
     |      
     |      ``Child.parent`` is a ``ForwardManyToOneDescriptor`` instance.
     |  
     |  mmaannyy__ttoo__mmaannyy = False
     |  
     |  mmaannyy__ttoo__oonnee = True
     |  
     |  oonnee__ttoo__mmaannyy = False
     |  
     |  oonnee__ttoo__oonnee = False
     |  
     |  rreell__ccllaassss = <class 'django.db.models.fields.reverse_related.ForeignObj...
     |      Used by ForeignObject to store information about the relation.
     |      
     |      ``_meta.get_fields()`` returns this class to provide access to the field
     |      flags for the reverse relation.
     |  
     |  rreellaatteedd__aacccceessssoorr__ccllaassss = <class 'django.db.models.fields.related_descr...
     |      Accessor to the related objects manager on the reverse side of a
     |      many-to-one relation.
     |      
     |      In the example::
     |      
     |          class Child(Model):
     |              parent = ForeignKey(Parent, related_name='children')
     |      
     |      ``Parent.children`` is a ``ReverseManyToOneDescriptor`` instance.
     |      
     |      Most of the implementation is delegated to a dynamically defined manager
     |      class built by ``create_forward_many_to_many_manager()`` defined below.
     |  
     |  rreeqquuiirreess__uunniiqquuee__ttaarrggeett = True
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from RelatedField:
     |  
     |  ddbb__ttyyppee(self, connection)
     |      Return the database column data type for this field, for the provided
     |      connection.
     |  
     |  ddoo__rreellaatteedd__ccllaassss(self, other, cls)
     |  
     |  ffoorrmmffiieelldd(self, **kwargs)
     |      Pass ``limit_choices_to`` to the field being constructed.
     |      
     |      Only passes it if there is a type that supports related fields.
     |      This is a similar strategy used to pass the ``queryset`` to the field
     |      being constructed.
     |  
     |  ggeett__ccaacchhee__nnaammee(self)
     |  
     |  ggeett__ffoorrwwaarrdd__rreellaatteedd__ffiilltteerr(self, obj)
     |      Return the keyword arguments that when supplied to
     |      self.model.object.filter(), would select all instances related through
     |      this field to the remote obj. This is used to build the querysets
     |      returned by related descriptors. obj is an instance of
     |      self.related_field.model.
     |  
     |  ggeett__lliimmiitt__cchhooiicceess__ttoo(self)
     |      Return ``limit_choices_to`` for this model field.
     |      
     |      If it is a callable, it will be invoked and the result will be
     |      returned.
     |  
     |  ggeett__rreevveerrssee__rreellaatteedd__ffiilltteerr(self, obj)
     |      Complement to get_forward_related_filter(). Return the keyword
     |      arguments that when passed to self.related_field.model.object.filter()
     |      select all instances of self.related_field.model related through
     |      this field to obj. obj is an instance of self.model.
     |  
     |  rreellaatteedd__mmooddeell = <django.utils.functional.cached_property object>
     |  rreellaatteedd__qquueerryy__nnaammee(self)
     |      Define the name that can be used to identify this related object in a
     |      table-spanning query.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__rreell(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from RelatedField:
     |  
     |  sswwaappppaabbllee__sseettttiinngg
     |      Get the setting that this is powered from for swapping, or None
     |      if it's not swapped in / marked with swappable=False.
     |  
     |  ttaarrggeett__ffiieelldd
     |      When filtering against this relation, return the field on the remote
     |      model against which the filtering should happen.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.fields.mixins.FieldCacheMixin:
     |  
     |  ddeelleettee__ccaacchheedd__vvaalluuee(self, instance)
     |  
     |  ggeett__ccaacchheedd__vvaalluuee(self, instance, default=<object object at 0x7f5792241230>)
     |  
     |  iiss__ccaacchheedd(self, instance)
     |  
     |  sseett__ccaacchheedd__vvaalluuee(self, instance, value)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.fields.mixins.FieldCacheMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.fields.Field:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memodict)
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggee____(self, other, NotImplemented=NotImplemented)
     |      Return a >= b.  Computed by @total_ordering from (not a < b).
     |  
     |  ____ggtt____(self, other, NotImplemented=NotImplemented)
     |      Return a > b.  Computed by @total_ordering from (not a < b) and (a != b).
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____llee____(self, other, NotImplemented=NotImplemented)
     |      Return a <= b.  Computed by @total_ordering from (a < b) or (a == b).
     |  
     |  ____lltt____(self, other)
     |      Return self<value.
     |  
     |  ____rreedduuccee____(self)
     |      Pickling should return the model._meta.fields instance of the field,
     |      not a new copy of that field. So, use the app registry to load the
     |      model and then the field back.
     |  
     |  ____rreepprr____(self)
     |      Display the module, class, and name of the field.
     |  
     |  ____ssttrr____(self)
     |      Return "app_label.model_label.field_name" for fields attached to
     |      models.
     |  
     |  ccaacchheedd__ccooll = <django.utils.functional.cached_property object>
     |  ccaasstt__ddbb__ttyyppee(self, connection)
     |      Return the data type to use in the Cast() function.
     |  
     |  cclleeaann(self, value, model_instance)
     |      Convert the value's type and run validation. Validation errors
     |      from to_python() and validate() are propagated. Return the correct
     |      value if no error is raised.
     |  
     |  cclloonnee(self)
     |      Uses deconstruct() to clone a new copy of this Field.
     |      Will not preserve any class attachments/attribute names.
     |  
     |  ddbb__cchheecckk(self, connection)
     |      Return the database column check constraint for this field, for the
     |      provided connection. Works the same way as db_type() for the case that
     |      get_internal_type() does not map to a preexisting model field.
     |  
     |  ddbb__ppaarraammeetteerrss(self, connection)
     |      Extension of db_type(), providing a range of different return values
     |      (type, checks). This will look at db_type(), allowing custom model
     |      fields to override it.
     |  
     |  ddbb__ttyyppee__ppaarraammeetteerrss(self, connection)
     |  
     |  ddbb__ttyyppee__ssuuffffiixx(self, connection)
     |  
     |  ggeett__aattttnnaammee(self)
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], limit_choices_to=None, ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |  
     |  ggeett__ccooll(self, alias, output_field=None)
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ddbb__pprreepp__ssaavvee(self, value, connection)
     |      Return field's value prepared for saving into a database.
     |  
     |  ggeett__ddbb__pprreepp__vvaalluuee(self, value, connection, prepared=False)
     |      Return field's value prepared for interacting with the database backend.
     |      
     |      Used by the default implementations of get_db_prep_save().
     |  
     |  ggeett__ddeeffaauulltt(self)
     |      Return the default value for this field.
     |  
     |  ggeett__ffiilltteerr__kkwwaarrggss__ffoorr__oobbjjeecctt(self, obj)
     |      Return a dict that when passed as kwargs to self.model.filter(), would
     |      yield all instances having the same value for this field as obj has.
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  ggeett__ppkk__vvaalluuee__oonn__ssaavvee(self, instance)
     |      Hook to generate new PK values on save. This method is called when
     |      saving instances with no primary key value set. If this method returns
     |      something else than None, then the returned value is used when saving
     |      the new instance.
     |  
     |  ggeett__pprreepp__vvaalluuee(self, value)
     |      Perform preliminary non-db specific value checks and conversions.
     |  
     |  hhaass__ddeeffaauulltt(self)
     |      Return a boolean of whether this field has a default value.
     |  
     |  pprree__ssaavvee(self, model_instance, add)
     |      Return field's value just before saving.
     |  
     |  rreell__ddbb__ttyyppee(self, connection)
     |      Return the data type that a related field pointing to this field should
     |      use. For example, this method is called by ForeignKey and OneToOneField
     |      to determine its data type.
     |  
     |  rruunn__vvaalliiddaattoorrss(self, value)
     |  
     |  ssaavvee__ffoorrmm__ddaattaa(self, instance, data)
     |  
     |  sseelleecctt__ffoorrmmaatt(self, compiler, sql, params)
     |      Custom format for select clauses. For example, GIS columns need to be
     |      selected as AsText(table.col) on MySQL as the table.col data can't be
     |      used by Django.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__nnaammee(self, name)
     |  
     |  ttoo__ppyytthhoonn(self, value)
     |      Convert the input value into the expected Python data type, raising
     |      django.core.exceptions.ValidationError if the data can't be converted.
     |      Return the converted value. Subclasses should override this.
     |  
     |  vvaalliiddaattee(self, value, model_instance)
     |      Validate value and raise ValidationError if necessary. Subclasses
     |      should override this to provide validation logic.
     |  
     |  vvaalliiddaattoorrss = <django.utils.functional.cached_property object>
     |  vvaalluuee__ffrroomm__oobbjjeecctt(self, obj)
     |      Return the value of this field in the given model instance.
     |  
     |  vvaalluuee__ttoo__ssttrriinngg(self, obj)
     |      Return a string value of this field from the passed obj.
     |      This is used by the serialization framework.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.fields.Field:
     |  
     |  ddbb__ttaabblleessppaaccee
     |  
     |  ddeessccrriippttiioonn
     |  
     |  ffllaattcchhooiicceess
     |      Flattened version of choices tuple.
     |  
     |  uunniiqquuee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.db.models.fields.Field:
     |  
     |  aauuttoo__ccrreeaattiioonn__ccoouunntteerr = -13
     |  
     |  ccrreeaattiioonn__ccoouunntteerr = 74
     |  
     |  ddeeffaauulltt__eerrrroorr__mmeessssaaggeess = {'blank': 'This field cannot be blank.', 'inv...
     |  
     |  ddeeffaauulltt__vvaalliiddaattoorrss = []
     |  
     |  eemmppttyy__ssttrriinnggss__aalllloowweedd = True
     |  
     |  eemmppttyy__vvaalluueess = [None, '', [], (), {}]
     |  
     |  hhiiddddeenn = False
     |  
     |  ssyysstteemm__cchheecckk__ddeepprreeccaatteedd__ddeettaaiillss = None
     |  
     |  ssyysstteemm__cchheecckk__rreemmoovveedd__ddeettaaiillss = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ttrraannssffoorrmm(self, lookup_name)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  rreeggiisstteerr__llooookkuupp(lookup, lookup_name=None) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  mmeerrggee__ddiiccttss(dicts)
     |      Merge dicts in reverse to preference the order of the original list. e.g.,
     |      merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.
    
    class FFuunncc(SQLiteNumericMixin, Expression)
     |  Func(*args, **kwargs)
     |  
     |  An SQL function call.
     |  
     |  Method resolution order:
     |      Func
     |      SQLiteNumericMixin
     |      Expression
     |      BaseExpression
     |      Combinable
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, *expressions, output_field=None, **extra)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  aass__ssqqll(self, compiler, connection, function=None, template=None, arg_joiner=None, **extra_context)
     |      Responsible for returning a (sql, [params]) tuple to be included
     |      in the current query.
     |      
     |      Different backends can provide their own implementation, by
     |      providing an `as_{vendor}` method and patching the Expression:
     |      
     |      ```
     |      def override_as_sql(self, compiler, connection):
     |          # custom logic
     |          return super().as_sql(compiler, connection)
     |      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
     |      ```
     |      
     |      Arguments:
     |       * compiler: the query compiler responsible for generating the query.
     |         Must have a compile method, returning a (sql, [params]) tuple.
     |         Calling compiler(value) will return a quoted `value`.
     |      
     |       * connection: the database connection used for the current query.
     |      
     |      Return: (sql, params)
     |        Where `sql` is a string containing ordered sql parameters to be
     |        replaced with the elements of the list `params`.
     |  
     |  ccooppyy(self)
     |  
     |  ggeett__ssoouurrccee__eexxpprreessssiioonnss(self)
     |  
     |  rreessoollvvee__eexxpprreessssiioonn(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)
     |      Provide the chance to do any preprocessing or validation before being
     |      added to the query.
     |      
     |      Arguments:
     |       * query: the backend query implementation
     |       * allow_joins: boolean allowing or denying use of joins
     |         in this query
     |       * reuse: a set of reusable joins for multijoins
     |       * summarize: a terminal aggregate clause
     |       * for_save: whether this expression about to be used in a save or update
     |      
     |      Return: an Expression to be added to the query.
     |  
     |  sseett__ssoouurrccee__eexxpprreessssiioonnss(self, exprs)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  aarrgg__jjooiinneerr = ', '
     |  
     |  aarriittyy = None
     |  
     |  ffuunnccttiioonn = None
     |  
     |  tteemmppllaattee = '%(function)s(%(expressions)s)'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SQLiteNumericMixin:
     |  
     |  aass__ssqqlliittee(self, compiler, connection, **extra_context)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from SQLiteNumericMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseExpression:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettssttaattee____(self)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  aasscc(self, **kwargs)
     |  
     |  ccoonnttaaiinnss__aaggggrreeggaattee = <django.utils.functional.cached_property object>
     |  ccoonnttaaiinnss__ccoolluummnn__rreeffeerreenncceess = <django.utils.functional.cached_property object>
     |  ccoonnttaaiinnss__oovveerr__ccllaauussee = <django.utils.functional.cached_property object>
     |  ccoonnvveerrtt__vvaalluuee = <django.utils.functional.cached_property object>
     |  ddeeccoonnssttrruucctt(obj)
     |      Return a 3-tuple of class import path, positional arguments,
     |      and keyword arguments.
     |  
     |  ddeesscc(self, **kwargs)
     |  
     |  ffllaatttteenn(self)
     |      Recursively yield this expression and all subexpressions, in
     |      depth-first order.
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ggrroouupp__bbyy__ccoollss(self)
     |  
     |  ggeett__llooookkuupp(self, lookup)
     |  
     |  ggeett__ssoouurrccee__ffiieellddss(self)
     |      Return the underlying field types used by this aggregate.
     |  
     |  ggeett__ttrraannssffoorrmm(self, name)
     |  
     |  iiddeennttiittyy = <django.utils.functional.cached_property object>
     |  oouuttppuutt__ffiieelldd = <django.utils.functional.cached_property object>
     |  rreellaabbeelleedd__cclloonnee(self, change_map)
     |  
     |  rreevveerrssee__oorrddeerriinngg(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from BaseExpression:
     |  
     |  ____nneeww____(cls, *args, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseExpression:
     |  
     |  ffiieelldd
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from BaseExpression:
     |  
     |  ffiilltteerraabbllee = True
     |  
     |  iiss__ssuummmmaarryy = False
     |  
     |  wwiinnddooww__ccoommppaattiibbllee = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Combinable:
     |  
     |  ____aadddd____(self, other)
     |  
     |  ____aanndd____(self, other)
     |  
     |  ____mmoodd____(self, other)
     |  
     |  ____mmuull____(self, other)
     |  
     |  ____nneegg____(self)
     |  
     |  ____oorr____(self, other)
     |  
     |  ____ppooww____(self, other)
     |  
     |  ____rraadddd____(self, other)
     |  
     |  ____rraanndd____(self, other)
     |  
     |  ____rrmmoodd____(self, other)
     |  
     |  ____rrmmuull____(self, other)
     |  
     |  ____rroorr____(self, other)
     |  
     |  ____rrppooww____(self, other)
     |  
     |  ____rrssuubb____(self, other)
     |  
     |  ____rrttrruueeddiivv____(self, other)
     |  
     |  ____ssuubb____(self, other)
     |  
     |  ____ttrruueeddiivv____(self, other)
     |  
     |  bbiittaanndd(self, other)
     |  
     |  bbiittlleeffttsshhiifftt(self, other)
     |  
     |  bbiittoorr(self, other)
     |  
     |  bbiittrriigghhttsshhiifftt(self, other)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Combinable:
     |  
     |  AADDDD = '+'
     |  
     |  BBIITTAANNDD = '&'
     |  
     |  BBIITTLLEEFFTTSSHHIIFFTT = '<<'
     |  
     |  BBIITTOORR = '|'
     |  
     |  BBIITTRRIIGGHHTTSSHHIIFFTT = '>>'
     |  
     |  DDIIVV = '/'
     |  
     |  MMOODD = '%%'
     |  
     |  MMUULL = '*'
     |  
     |  PPOOWW = '^'
     |  
     |  SSUUBB = '-'
    
    class GGeenneerriiccIIPPAAddddrreessssFFiieelldd(Field)
     |  GenericIPAddressField(verbose_name=None, name=None, protocol='both', unpack_ipv4=False, *args, **kwargs)
     |  
     |  Base class for all field types
     |  
     |  Method resolution order:
     |      GenericIPAddressField
     |      Field
     |      django.db.models.query_utils.RegisterLookupMixin
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, verbose_name=None, name=None, protocol='both', unpack_ipv4=False, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  cchheecckk(self, **kwargs)
     |  
     |  ddeeccoonnssttrruucctt(self)
     |      Return enough information to recreate the field as a 4-tuple:
     |      
     |       * The name of the field on the model, if contribute_to_class() has
     |         been run.
     |       * The import path of the field, including the class:e.g.
     |         django.db.models.IntegerField This should be the most portable
     |         version, so less specific may be better.
     |       * A list of positional arguments.
     |       * A dict of keyword arguments.
     |      
     |      Note that the positional or keyword arguments must contain values of
     |      the following types (including inner values of collection types):
     |      
     |       * None, bool, str, int, float, complex, set, frozenset, list, tuple,
     |         dict
     |       * UUID
     |       * datetime.datetime (naive), datetime.date
     |       * top-level classes, top-level functions - will be referenced by their
     |         full import path
     |       * Storage instances - these have their own deconstruct() method
     |      
     |      This is because the values here must be serialized into a text format
     |      (possibly new Python code, possibly JSON) and these are the only types
     |      with encoding handlers defined.
     |      
     |      There's no need to return the exact way the field was instantiated this
     |      time, just ensure that the resulting field is the same - prefer keyword
     |      arguments over positional ones, and omit parameters with their default
     |      values.
     |  
     |  ffoorrmmffiieelldd(self, **kwargs)
     |      Return a django.forms.Field instance for this field.
     |  
     |  ggeett__ddbb__pprreepp__vvaalluuee(self, value, connection, prepared=False)
     |      Return field's value prepared for interacting with the database backend.
     |      
     |      Used by the default implementations of get_db_prep_save().
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  ggeett__pprreepp__vvaalluuee(self, value)
     |      Perform preliminary non-db specific value checks and conversions.
     |  
     |  ttoo__ppyytthhoonn(self, value)
     |      Convert the input value into the expected Python data type, raising
     |      django.core.exceptions.ValidationError if the data can't be converted.
     |      Return the converted value. Subclasses should override this.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ddeeffaauulltt__eerrrroorr__mmeessssaaggeess = {}
     |  
     |  ddeessccrriippttiioonn = 'IP address'
     |  
     |  eemmppttyy__ssttrriinnggss__aalllloowweedd = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Field:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memodict)
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggee____(self, other, NotImplemented=NotImplemented)
     |      Return a >= b.  Computed by @total_ordering from (not a < b).
     |  
     |  ____ggtt____(self, other, NotImplemented=NotImplemented)
     |      Return a > b.  Computed by @total_ordering from (not a < b) and (a != b).
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____llee____(self, other, NotImplemented=NotImplemented)
     |      Return a <= b.  Computed by @total_ordering from (a < b) or (a == b).
     |  
     |  ____lltt____(self, other)
     |      Return self<value.
     |  
     |  ____rreedduuccee____(self)
     |      Pickling should return the model._meta.fields instance of the field,
     |      not a new copy of that field. So, use the app registry to load the
     |      model and then the field back.
     |  
     |  ____rreepprr____(self)
     |      Display the module, class, and name of the field.
     |  
     |  ____ssttrr____(self)
     |      Return "app_label.model_label.field_name" for fields attached to
     |      models.
     |  
     |  ccaacchheedd__ccooll = <django.utils.functional.cached_property object>
     |  ccaasstt__ddbb__ttyyppee(self, connection)
     |      Return the data type to use in the Cast() function.
     |  
     |  cclleeaann(self, value, model_instance)
     |      Convert the value's type and run validation. Validation errors
     |      from to_python() and validate() are propagated. Return the correct
     |      value if no error is raised.
     |  
     |  cclloonnee(self)
     |      Uses deconstruct() to clone a new copy of this Field.
     |      Will not preserve any class attachments/attribute names.
     |  
     |  ccoonnttrriibbuuttee__ttoo__ccllaassss(self, cls, name, private_only=False)
     |      Register the field with the model class it belongs to.
     |      
     |      If private_only is True, create a separate instance of this field
     |      for every subclass of cls, even if cls is not an abstract model.
     |  
     |  ddbb__cchheecckk(self, connection)
     |      Return the database column check constraint for this field, for the
     |      provided connection. Works the same way as db_type() for the case that
     |      get_internal_type() does not map to a preexisting model field.
     |  
     |  ddbb__ppaarraammeetteerrss(self, connection)
     |      Extension of db_type(), providing a range of different return values
     |      (type, checks). This will look at db_type(), allowing custom model
     |      fields to override it.
     |  
     |  ddbb__ttyyppee(self, connection)
     |      Return the database column data type for this field, for the provided
     |      connection.
     |  
     |  ddbb__ttyyppee__ppaarraammeetteerrss(self, connection)
     |  
     |  ddbb__ttyyppee__ssuuffffiixx(self, connection)
     |  
     |  ggeett__aattttnnaammee(self)
     |  
     |  ggeett__aattttnnaammee__ccoolluummnn(self)
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], limit_choices_to=None, ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |  
     |  ggeett__ccooll(self, alias, output_field=None)
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ddbb__pprreepp__ssaavvee(self, value, connection)
     |      Return field's value prepared for saving into a database.
     |  
     |  ggeett__ddeeffaauulltt(self)
     |      Return the default value for this field.
     |  
     |  ggeett__ffiilltteerr__kkwwaarrggss__ffoorr__oobbjjeecctt(self, obj)
     |      Return a dict that when passed as kwargs to self.model.filter(), would
     |      yield all instances having the same value for this field as obj has.
     |  
     |  ggeett__ppkk__vvaalluuee__oonn__ssaavvee(self, instance)
     |      Hook to generate new PK values on save. This method is called when
     |      saving instances with no primary key value set. If this method returns
     |      something else than None, then the returned value is used when saving
     |      the new instance.
     |  
     |  hhaass__ddeeffaauulltt(self)
     |      Return a boolean of whether this field has a default value.
     |  
     |  pprree__ssaavvee(self, model_instance, add)
     |      Return field's value just before saving.
     |  
     |  rreell__ddbb__ttyyppee(self, connection)
     |      Return the data type that a related field pointing to this field should
     |      use. For example, this method is called by ForeignKey and OneToOneField
     |      to determine its data type.
     |  
     |  rruunn__vvaalliiddaattoorrss(self, value)
     |  
     |  ssaavvee__ffoorrmm__ddaattaa(self, instance, data)
     |  
     |  sseelleecctt__ffoorrmmaatt(self, compiler, sql, params)
     |      Custom format for select clauses. For example, GIS columns need to be
     |      selected as AsText(table.col) on MySQL as the table.col data can't be
     |      used by Django.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__nnaammee(self, name)
     |  
     |  vvaalliiddaattee(self, value, model_instance)
     |      Validate value and raise ValidationError if necessary. Subclasses
     |      should override this to provide validation logic.
     |  
     |  vvaalliiddaattoorrss = <django.utils.functional.cached_property object>
     |  vvaalluuee__ffrroomm__oobbjjeecctt(self, obj)
     |      Return the value of this field in the given model instance.
     |  
     |  vvaalluuee__ttoo__ssttrriinngg(self, obj)
     |      Return a string value of this field from the passed obj.
     |      This is used by the serialization framework.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Field:
     |  
     |  ddbb__ttaabblleessppaaccee
     |  
     |  ffllaattcchhooiicceess
     |      Flattened version of choices tuple.
     |  
     |  uunniiqquuee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Field:
     |  
     |  aauuttoo__ccrreeaattiioonn__ccoouunntteerr = -13
     |  
     |  ccllaassss__llooookkuuppss = {'contains': <class 'django.db.models.lookups.Contains...
     |  
     |  ccrreeaattiioonn__ccoouunntteerr = 74
     |  
     |  ddeeffaauulltt__vvaalliiddaattoorrss = []
     |  
     |  eemmppttyy__vvaalluueess = [None, '', [], (), {}]
     |  
     |  hhiiddddeenn = False
     |  
     |  mmaannyy__ttoo__mmaannyy = None
     |  
     |  mmaannyy__ttoo__oonnee = None
     |  
     |  oonnee__ttoo__mmaannyy = None
     |  
     |  oonnee__ttoo__oonnee = None
     |  
     |  rreellaatteedd__mmooddeell = None
     |  
     |  ssyysstteemm__cchheecckk__ddeepprreeccaatteedd__ddeettaaiillss = None
     |  
     |  ssyysstteemm__cchheecckk__rreemmoovveedd__ddeettaaiillss = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ttrraannssffoorrmm(self, lookup_name)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuuppss() from builtins.type
     |  
     |  rreeggiisstteerr__llooookkuupp(lookup, lookup_name=None) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  mmeerrggee__ddiiccttss(dicts)
     |      Merge dicts in reverse to preference the order of the original list. e.g.,
     |      merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class IIPPAAddddrreessssFFiieelldd(Field)
     |  IPAddressField(*args, **kwargs)
     |  
     |  Base class for all field types
     |  
     |  Method resolution order:
     |      IPAddressField
     |      Field
     |      django.db.models.query_utils.RegisterLookupMixin
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ddeeccoonnssttrruucctt(self)
     |      Return enough information to recreate the field as a 4-tuple:
     |      
     |       * The name of the field on the model, if contribute_to_class() has
     |         been run.
     |       * The import path of the field, including the class:e.g.
     |         django.db.models.IntegerField This should be the most portable
     |         version, so less specific may be better.
     |       * A list of positional arguments.
     |       * A dict of keyword arguments.
     |      
     |      Note that the positional or keyword arguments must contain values of
     |      the following types (including inner values of collection types):
     |      
     |       * None, bool, str, int, float, complex, set, frozenset, list, tuple,
     |         dict
     |       * UUID
     |       * datetime.datetime (naive), datetime.date
     |       * top-level classes, top-level functions - will be referenced by their
     |         full import path
     |       * Storage instances - these have their own deconstruct() method
     |      
     |      This is because the values here must be serialized into a text format
     |      (possibly new Python code, possibly JSON) and these are the only types
     |      with encoding handlers defined.
     |      
     |      There's no need to return the exact way the field was instantiated this
     |      time, just ensure that the resulting field is the same - prefer keyword
     |      arguments over positional ones, and omit parameters with their default
     |      values.
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  ggeett__pprreepp__vvaalluuee(self, value)
     |      Perform preliminary non-db specific value checks and conversions.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ddeessccrriippttiioonn = 'IPv4 address'
     |  
     |  eemmppttyy__ssttrriinnggss__aalllloowweedd = False
     |  
     |  ssyysstteemm__cchheecckk__rreemmoovveedd__ddeettaaiillss = {'hint': 'Use GenericIPAddressField ins...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Field:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memodict)
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggee____(self, other, NotImplemented=NotImplemented)
     |      Return a >= b.  Computed by @total_ordering from (not a < b).
     |  
     |  ____ggtt____(self, other, NotImplemented=NotImplemented)
     |      Return a > b.  Computed by @total_ordering from (not a < b) and (a != b).
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____llee____(self, other, NotImplemented=NotImplemented)
     |      Return a <= b.  Computed by @total_ordering from (a < b) or (a == b).
     |  
     |  ____lltt____(self, other)
     |      Return self<value.
     |  
     |  ____rreedduuccee____(self)
     |      Pickling should return the model._meta.fields instance of the field,
     |      not a new copy of that field. So, use the app registry to load the
     |      model and then the field back.
     |  
     |  ____rreepprr____(self)
     |      Display the module, class, and name of the field.
     |  
     |  ____ssttrr____(self)
     |      Return "app_label.model_label.field_name" for fields attached to
     |      models.
     |  
     |  ccaacchheedd__ccooll = <django.utils.functional.cached_property object>
     |  ccaasstt__ddbb__ttyyppee(self, connection)
     |      Return the data type to use in the Cast() function.
     |  
     |  cchheecckk(self, **kwargs)
     |  
     |  cclleeaann(self, value, model_instance)
     |      Convert the value's type and run validation. Validation errors
     |      from to_python() and validate() are propagated. Return the correct
     |      value if no error is raised.
     |  
     |  cclloonnee(self)
     |      Uses deconstruct() to clone a new copy of this Field.
     |      Will not preserve any class attachments/attribute names.
     |  
     |  ccoonnttrriibbuuttee__ttoo__ccllaassss(self, cls, name, private_only=False)
     |      Register the field with the model class it belongs to.
     |      
     |      If private_only is True, create a separate instance of this field
     |      for every subclass of cls, even if cls is not an abstract model.
     |  
     |  ddbb__cchheecckk(self, connection)
     |      Return the database column check constraint for this field, for the
     |      provided connection. Works the same way as db_type() for the case that
     |      get_internal_type() does not map to a preexisting model field.
     |  
     |  ddbb__ppaarraammeetteerrss(self, connection)
     |      Extension of db_type(), providing a range of different return values
     |      (type, checks). This will look at db_type(), allowing custom model
     |      fields to override it.
     |  
     |  ddbb__ttyyppee(self, connection)
     |      Return the database column data type for this field, for the provided
     |      connection.
     |  
     |  ddbb__ttyyppee__ppaarraammeetteerrss(self, connection)
     |  
     |  ddbb__ttyyppee__ssuuffffiixx(self, connection)
     |  
     |  ffoorrmmffiieelldd(self, form_class=None, choices_form_class=None, **kwargs)
     |      Return a django.forms.Field instance for this field.
     |  
     |  ggeett__aattttnnaammee(self)
     |  
     |  ggeett__aattttnnaammee__ccoolluummnn(self)
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], limit_choices_to=None, ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |  
     |  ggeett__ccooll(self, alias, output_field=None)
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ddbb__pprreepp__ssaavvee(self, value, connection)
     |      Return field's value prepared for saving into a database.
     |  
     |  ggeett__ddbb__pprreepp__vvaalluuee(self, value, connection, prepared=False)
     |      Return field's value prepared for interacting with the database backend.
     |      
     |      Used by the default implementations of get_db_prep_save().
     |  
     |  ggeett__ddeeffaauulltt(self)
     |      Return the default value for this field.
     |  
     |  ggeett__ffiilltteerr__kkwwaarrggss__ffoorr__oobbjjeecctt(self, obj)
     |      Return a dict that when passed as kwargs to self.model.filter(), would
     |      yield all instances having the same value for this field as obj has.
     |  
     |  ggeett__ppkk__vvaalluuee__oonn__ssaavvee(self, instance)
     |      Hook to generate new PK values on save. This method is called when
     |      saving instances with no primary key value set. If this method returns
     |      something else than None, then the returned value is used when saving
     |      the new instance.
     |  
     |  hhaass__ddeeffaauulltt(self)
     |      Return a boolean of whether this field has a default value.
     |  
     |  pprree__ssaavvee(self, model_instance, add)
     |      Return field's value just before saving.
     |  
     |  rreell__ddbb__ttyyppee(self, connection)
     |      Return the data type that a related field pointing to this field should
     |      use. For example, this method is called by ForeignKey and OneToOneField
     |      to determine its data type.
     |  
     |  rruunn__vvaalliiddaattoorrss(self, value)
     |  
     |  ssaavvee__ffoorrmm__ddaattaa(self, instance, data)
     |  
     |  sseelleecctt__ffoorrmmaatt(self, compiler, sql, params)
     |      Custom format for select clauses. For example, GIS columns need to be
     |      selected as AsText(table.col) on MySQL as the table.col data can't be
     |      used by Django.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__nnaammee(self, name)
     |  
     |  ttoo__ppyytthhoonn(self, value)
     |      Convert the input value into the expected Python data type, raising
     |      django.core.exceptions.ValidationError if the data can't be converted.
     |      Return the converted value. Subclasses should override this.
     |  
     |  vvaalliiddaattee(self, value, model_instance)
     |      Validate value and raise ValidationError if necessary. Subclasses
     |      should override this to provide validation logic.
     |  
     |  vvaalliiddaattoorrss = <django.utils.functional.cached_property object>
     |  vvaalluuee__ffrroomm__oobbjjeecctt(self, obj)
     |      Return the value of this field in the given model instance.
     |  
     |  vvaalluuee__ttoo__ssttrriinngg(self, obj)
     |      Return a string value of this field from the passed obj.
     |      This is used by the serialization framework.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Field:
     |  
     |  ddbb__ttaabblleessppaaccee
     |  
     |  ffllaattcchhooiicceess
     |      Flattened version of choices tuple.
     |  
     |  uunniiqquuee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Field:
     |  
     |  aauuttoo__ccrreeaattiioonn__ccoouunntteerr = -13
     |  
     |  ccllaassss__llooookkuuppss = {'contains': <class 'django.db.models.lookups.Contains...
     |  
     |  ccrreeaattiioonn__ccoouunntteerr = 74
     |  
     |  ddeeffaauulltt__eerrrroorr__mmeessssaaggeess = {'blank': 'This field cannot be blank.', 'inv...
     |  
     |  ddeeffaauulltt__vvaalliiddaattoorrss = []
     |  
     |  eemmppttyy__vvaalluueess = [None, '', [], (), {}]
     |  
     |  hhiiddddeenn = False
     |  
     |  mmaannyy__ttoo__mmaannyy = None
     |  
     |  mmaannyy__ttoo__oonnee = None
     |  
     |  oonnee__ttoo__mmaannyy = None
     |  
     |  oonnee__ttoo__oonnee = None
     |  
     |  rreellaatteedd__mmooddeell = None
     |  
     |  ssyysstteemm__cchheecckk__ddeepprreeccaatteedd__ddeettaaiillss = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ttrraannssffoorrmm(self, lookup_name)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuuppss() from builtins.type
     |  
     |  rreeggiisstteerr__llooookkuupp(lookup, lookup_name=None) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  mmeerrggee__ddiiccttss(dicts)
     |      Merge dicts in reverse to preference the order of the original list. e.g.,
     |      merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class IImmaaggeeFFiieelldd(FileField)
     |  ImageField(verbose_name=None, name=None, width_field=None, height_field=None, **kwargs)
     |  
     |  Base class for all field types
     |  
     |  Method resolution order:
     |      ImageField
     |      FileField
     |      django.db.models.fields.Field
     |      django.db.models.query_utils.RegisterLookupMixin
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, verbose_name=None, name=None, width_field=None, height_field=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  cchheecckk(self, **kwargs)
     |  
     |  ccoonnttrriibbuuttee__ttoo__ccllaassss(self, cls, name, **kwargs)
     |      Register the field with the model class it belongs to.
     |      
     |      If private_only is True, create a separate instance of this field
     |      for every subclass of cls, even if cls is not an abstract model.
     |  
     |  ddeeccoonnssttrruucctt(self)
     |      Return enough information to recreate the field as a 4-tuple:
     |      
     |       * The name of the field on the model, if contribute_to_class() has
     |         been run.
     |       * The import path of the field, including the class:e.g.
     |         django.db.models.IntegerField This should be the most portable
     |         version, so less specific may be better.
     |       * A list of positional arguments.
     |       * A dict of keyword arguments.
     |      
     |      Note that the positional or keyword arguments must contain values of
     |      the following types (including inner values of collection types):
     |      
     |       * None, bool, str, int, float, complex, set, frozenset, list, tuple,
     |         dict
     |       * UUID
     |       * datetime.datetime (naive), datetime.date
     |       * top-level classes, top-level functions - will be referenced by their
     |         full import path
     |       * Storage instances - these have their own deconstruct() method
     |      
     |      This is because the values here must be serialized into a text format
     |      (possibly new Python code, possibly JSON) and these are the only types
     |      with encoding handlers defined.
     |      
     |      There's no need to return the exact way the field was instantiated this
     |      time, just ensure that the resulting field is the same - prefer keyword
     |      arguments over positional ones, and omit parameters with their default
     |      values.
     |  
     |  ffoorrmmffiieelldd(self, **kwargs)
     |      Return a django.forms.Field instance for this field.
     |  
     |  uuppddaattee__ddiimmeennssiioonn__ffiieellddss(self, instance, force=False, *args, **kwargs)
     |      Update field's width and height fields, if defined.
     |      
     |      This method is hooked up to model's post_init signal to update
     |      dimensions after instantiating a model instance.  However, dimensions
     |      won't be updated if the dimensions fields are already populated.  This
     |      avoids unnecessary recalculation when loading an object from the
     |      database.
     |      
     |      Dimensions can be forced to update with force=True, which is how
     |      ImageFileDescriptor.__set__ calls this method.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  aattttrr__ccllaassss = <class 'django.db.models.fields.files.ImageFieldFile'>
     |      A mixin for use alongside django.core.files.base.File, which provides
     |      additional features for dealing with images.
     |  
     |  ddeessccrriippttiioonn = 'Image'
     |  
     |  ddeessccrriippttoorr__ccllaassss = <class 'django.db.models.fields.files.ImageFileDesc...
     |      Just like the FileDescriptor, but for ImageFields. The only difference is
     |      assigning the width/height to the width_field/height_field, if appropriate.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from FileField:
     |  
     |  ggeenneerraattee__ffiilleennaammee(self, instance, filename)
     |      Apply (if callable) or prepend (if a string) upload_to to the filename,
     |      then delegate further processing of the name to the storage backend.
     |      Until the storage layer, all file paths are expected to be Unix style
     |      (with forward slashes).
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  ggeett__pprreepp__vvaalluuee(self, value)
     |      Perform preliminary non-db specific value checks and conversions.
     |  
     |  pprree__ssaavvee(self, model_instance, add)
     |      Return field's value just before saving.
     |  
     |  ssaavvee__ffoorrmm__ddaattaa(self, instance, data)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.fields.Field:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memodict)
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggee____(self, other, NotImplemented=NotImplemented)
     |      Return a >= b.  Computed by @total_ordering from (not a < b).
     |  
     |  ____ggtt____(self, other, NotImplemented=NotImplemented)
     |      Return a > b.  Computed by @total_ordering from (not a < b) and (a != b).
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____llee____(self, other, NotImplemented=NotImplemented)
     |      Return a <= b.  Computed by @total_ordering from (a < b) or (a == b).
     |  
     |  ____lltt____(self, other)
     |      Return self<value.
     |  
     |  ____rreedduuccee____(self)
     |      Pickling should return the model._meta.fields instance of the field,
     |      not a new copy of that field. So, use the app registry to load the
     |      model and then the field back.
     |  
     |  ____rreepprr____(self)
     |      Display the module, class, and name of the field.
     |  
     |  ____ssttrr____(self)
     |      Return "app_label.model_label.field_name" for fields attached to
     |      models.
     |  
     |  ccaacchheedd__ccooll = <django.utils.functional.cached_property object>
     |  ccaasstt__ddbb__ttyyppee(self, connection)
     |      Return the data type to use in the Cast() function.
     |  
     |  cclleeaann(self, value, model_instance)
     |      Convert the value's type and run validation. Validation errors
     |      from to_python() and validate() are propagated. Return the correct
     |      value if no error is raised.
     |  
     |  cclloonnee(self)
     |      Uses deconstruct() to clone a new copy of this Field.
     |      Will not preserve any class attachments/attribute names.
     |  
     |  ddbb__cchheecckk(self, connection)
     |      Return the database column check constraint for this field, for the
     |      provided connection. Works the same way as db_type() for the case that
     |      get_internal_type() does not map to a preexisting model field.
     |  
     |  ddbb__ppaarraammeetteerrss(self, connection)
     |      Extension of db_type(), providing a range of different return values
     |      (type, checks). This will look at db_type(), allowing custom model
     |      fields to override it.
     |  
     |  ddbb__ttyyppee(self, connection)
     |      Return the database column data type for this field, for the provided
     |      connection.
     |  
     |  ddbb__ttyyppee__ppaarraammeetteerrss(self, connection)
     |  
     |  ddbb__ttyyppee__ssuuffffiixx(self, connection)
     |  
     |  ggeett__aattttnnaammee(self)
     |  
     |  ggeett__aattttnnaammee__ccoolluummnn(self)
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], limit_choices_to=None, ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |  
     |  ggeett__ccooll(self, alias, output_field=None)
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ddbb__pprreepp__ssaavvee(self, value, connection)
     |      Return field's value prepared for saving into a database.
     |  
     |  ggeett__ddbb__pprreepp__vvaalluuee(self, value, connection, prepared=False)
     |      Return field's value prepared for interacting with the database backend.
     |      
     |      Used by the default implementations of get_db_prep_save().
     |  
     |  ggeett__ddeeffaauulltt(self)
     |      Return the default value for this field.
     |  
     |  ggeett__ffiilltteerr__kkwwaarrggss__ffoorr__oobbjjeecctt(self, obj)
     |      Return a dict that when passed as kwargs to self.model.filter(), would
     |      yield all instances having the same value for this field as obj has.
     |  
     |  ggeett__ppkk__vvaalluuee__oonn__ssaavvee(self, instance)
     |      Hook to generate new PK values on save. This method is called when
     |      saving instances with no primary key value set. If this method returns
     |      something else than None, then the returned value is used when saving
     |      the new instance.
     |  
     |  hhaass__ddeeffaauulltt(self)
     |      Return a boolean of whether this field has a default value.
     |  
     |  rreell__ddbb__ttyyppee(self, connection)
     |      Return the data type that a related field pointing to this field should
     |      use. For example, this method is called by ForeignKey and OneToOneField
     |      to determine its data type.
     |  
     |  rruunn__vvaalliiddaattoorrss(self, value)
     |  
     |  sseelleecctt__ffoorrmmaatt(self, compiler, sql, params)
     |      Custom format for select clauses. For example, GIS columns need to be
     |      selected as AsText(table.col) on MySQL as the table.col data can't be
     |      used by Django.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__nnaammee(self, name)
     |  
     |  ttoo__ppyytthhoonn(self, value)
     |      Convert the input value into the expected Python data type, raising
     |      django.core.exceptions.ValidationError if the data can't be converted.
     |      Return the converted value. Subclasses should override this.
     |  
     |  vvaalliiddaattee(self, value, model_instance)
     |      Validate value and raise ValidationError if necessary. Subclasses
     |      should override this to provide validation logic.
     |  
     |  vvaalliiddaattoorrss = <django.utils.functional.cached_property object>
     |  vvaalluuee__ffrroomm__oobbjjeecctt(self, obj)
     |      Return the value of this field in the given model instance.
     |  
     |  vvaalluuee__ttoo__ssttrriinngg(self, obj)
     |      Return a string value of this field from the passed obj.
     |      This is used by the serialization framework.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.fields.Field:
     |  
     |  ddbb__ttaabblleessppaaccee
     |  
     |  ffllaattcchhooiicceess
     |      Flattened version of choices tuple.
     |  
     |  uunniiqquuee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.db.models.fields.Field:
     |  
     |  aauuttoo__ccrreeaattiioonn__ccoouunntteerr = -13
     |  
     |  ccllaassss__llooookkuuppss = {'contains': <class 'django.db.models.lookups.Contains...
     |  
     |  ccrreeaattiioonn__ccoouunntteerr = 74
     |  
     |  ddeeffaauulltt__eerrrroorr__mmeessssaaggeess = {'blank': 'This field cannot be blank.', 'inv...
     |  
     |  ddeeffaauulltt__vvaalliiddaattoorrss = []
     |  
     |  eemmppttyy__ssttrriinnggss__aalllloowweedd = True
     |  
     |  eemmppttyy__vvaalluueess = [None, '', [], (), {}]
     |  
     |  hhiiddddeenn = False
     |  
     |  mmaannyy__ttoo__mmaannyy = None
     |  
     |  mmaannyy__ttoo__oonnee = None
     |  
     |  oonnee__ttoo__mmaannyy = None
     |  
     |  oonnee__ttoo__oonnee = None
     |  
     |  rreellaatteedd__mmooddeell = None
     |  
     |  ssyysstteemm__cchheecckk__ddeepprreeccaatteedd__ddeettaaiillss = None
     |  
     |  ssyysstteemm__cchheecckk__rreemmoovveedd__ddeettaaiillss = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ttrraannssffoorrmm(self, lookup_name)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuuppss() from builtins.type
     |  
     |  rreeggiisstteerr__llooookkuupp(lookup, lookup_name=None) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  mmeerrggee__ddiiccttss(dicts)
     |      Merge dicts in reverse to preference the order of the original list. e.g.,
     |      merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class IInnddeexx(builtins.object)
     |  Index(*, fields=(), name=None, db_tablespace=None, opclasses=(), condition=None)
     |  
     |  Methods defined here:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____iinniitt____(self, *, fields=(), name=None, db_tablespace=None, opclasses=(), condition=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  cchheecckk__nnaammee(self)
     |  
     |  cclloonnee(self)
     |      Create a copy of this Index.
     |  
     |  ccrreeaattee__ssqqll(self, model, schema_editor, using='')
     |  
     |  ddeeccoonnssttrruucctt(self)
     |  
     |  rreemmoovvee__ssqqll(self, model, schema_editor)
     |  
     |  sseett__nnaammee__wwiitthh__mmooddeell(self, model)
     |      Generate a unique name for the index.
     |      
     |      The name is divided into 3 parts - table name (12 chars), field name
     |      (8 chars) and unique hash + suffix (10 chars). Each part is made to
     |      fit its size by truncating the excess length.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ____hhaasshh____ = None
     |  
     |  mmaaxx__nnaammee__lleennggtthh = 30
     |  
     |  ssuuffffiixx = 'idx'
    
    class IInntteeggeerrFFiieelldd(Field)
     |  IntegerField(verbose_name=None, name=None, primary_key=False, max_length=None, unique=False, blank=False, null=False, db_index=False, rel=None, default=<class 'django.db.models.fields.NOT_PROVIDED'>, editable=True, serialize=True, unique_for_date=None, unique_for_month=None, unique_for_year=None, choices=None, help_text='', db_column=None, db_tablespace=None, auto_created=False, validators=(), error_messages=None)
     |  
     |  Base class for all field types
     |  
     |  Method resolution order:
     |      IntegerField
     |      Field
     |      django.db.models.query_utils.RegisterLookupMixin
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  cchheecckk(self, **kwargs)
     |  
     |  ffoorrmmffiieelldd(self, **kwargs)
     |      Return a django.forms.Field instance for this field.
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  ggeett__pprreepp__vvaalluuee(self, value)
     |      Perform preliminary non-db specific value checks and conversions.
     |  
     |  ttoo__ppyytthhoonn(self, value)
     |      Convert the input value into the expected Python data type, raising
     |      django.core.exceptions.ValidationError if the data can't be converted.
     |      Return the converted value. Subclasses should override this.
     |  
     |  vvaalliiddaattoorrss = <django.utils.functional.cached_property object>
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ccllaassss__llooookkuuppss = {'gte': <class 'django.db.models.lookups.IntegerGreate...
     |  
     |  ddeeffaauulltt__eerrrroorr__mmeessssaaggeess = {'invalid': "'%(value)s' value must be an int...
     |  
     |  ddeessccrriippttiioonn = 'Integer'
     |  
     |  eemmppttyy__ssttrriinnggss__aalllloowweedd = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Field:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memodict)
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggee____(self, other, NotImplemented=NotImplemented)
     |      Return a >= b.  Computed by @total_ordering from (not a < b).
     |  
     |  ____ggtt____(self, other, NotImplemented=NotImplemented)
     |      Return a > b.  Computed by @total_ordering from (not a < b) and (a != b).
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____iinniitt____(self, verbose_name=None, name=None, primary_key=False, max_length=None, unique=False, blank=False, null=False, db_index=False, rel=None, default=<class 'django.db.models.fields.NOT_PROVIDED'>, editable=True, serialize=True, unique_for_date=None, unique_for_month=None, unique_for_year=None, choices=None, help_text='', db_column=None, db_tablespace=None, auto_created=False, validators=(), error_messages=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____llee____(self, other, NotImplemented=NotImplemented)
     |      Return a <= b.  Computed by @total_ordering from (a < b) or (a == b).
     |  
     |  ____lltt____(self, other)
     |      Return self<value.
     |  
     |  ____rreedduuccee____(self)
     |      Pickling should return the model._meta.fields instance of the field,
     |      not a new copy of that field. So, use the app registry to load the
     |      model and then the field back.
     |  
     |  ____rreepprr____(self)
     |      Display the module, class, and name of the field.
     |  
     |  ____ssttrr____(self)
     |      Return "app_label.model_label.field_name" for fields attached to
     |      models.
     |  
     |  ccaacchheedd__ccooll = <django.utils.functional.cached_property object>
     |  ccaasstt__ddbb__ttyyppee(self, connection)
     |      Return the data type to use in the Cast() function.
     |  
     |  cclleeaann(self, value, model_instance)
     |      Convert the value's type and run validation. Validation errors
     |      from to_python() and validate() are propagated. Return the correct
     |      value if no error is raised.
     |  
     |  cclloonnee(self)
     |      Uses deconstruct() to clone a new copy of this Field.
     |      Will not preserve any class attachments/attribute names.
     |  
     |  ccoonnttrriibbuuttee__ttoo__ccllaassss(self, cls, name, private_only=False)
     |      Register the field with the model class it belongs to.
     |      
     |      If private_only is True, create a separate instance of this field
     |      for every subclass of cls, even if cls is not an abstract model.
     |  
     |  ddbb__cchheecckk(self, connection)
     |      Return the database column check constraint for this field, for the
     |      provided connection. Works the same way as db_type() for the case that
     |      get_internal_type() does not map to a preexisting model field.
     |  
     |  ddbb__ppaarraammeetteerrss(self, connection)
     |      Extension of db_type(), providing a range of different return values
     |      (type, checks). This will look at db_type(), allowing custom model
     |      fields to override it.
     |  
     |  ddbb__ttyyppee(self, connection)
     |      Return the database column data type for this field, for the provided
     |      connection.
     |  
     |  ddbb__ttyyppee__ppaarraammeetteerrss(self, connection)
     |  
     |  ddbb__ttyyppee__ssuuffffiixx(self, connection)
     |  
     |  ddeeccoonnssttrruucctt(self)
     |      Return enough information to recreate the field as a 4-tuple:
     |      
     |       * The name of the field on the model, if contribute_to_class() has
     |         been run.
     |       * The import path of the field, including the class:e.g.
     |         django.db.models.IntegerField This should be the most portable
     |         version, so less specific may be better.
     |       * A list of positional arguments.
     |       * A dict of keyword arguments.
     |      
     |      Note that the positional or keyword arguments must contain values of
     |      the following types (including inner values of collection types):
     |      
     |       * None, bool, str, int, float, complex, set, frozenset, list, tuple,
     |         dict
     |       * UUID
     |       * datetime.datetime (naive), datetime.date
     |       * top-level classes, top-level functions - will be referenced by their
     |         full import path
     |       * Storage instances - these have their own deconstruct() method
     |      
     |      This is because the values here must be serialized into a text format
     |      (possibly new Python code, possibly JSON) and these are the only types
     |      with encoding handlers defined.
     |      
     |      There's no need to return the exact way the field was instantiated this
     |      time, just ensure that the resulting field is the same - prefer keyword
     |      arguments over positional ones, and omit parameters with their default
     |      values.
     |  
     |  ggeett__aattttnnaammee(self)
     |  
     |  ggeett__aattttnnaammee__ccoolluummnn(self)
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], limit_choices_to=None, ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |  
     |  ggeett__ccooll(self, alias, output_field=None)
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ddbb__pprreepp__ssaavvee(self, value, connection)
     |      Return field's value prepared for saving into a database.
     |  
     |  ggeett__ddbb__pprreepp__vvaalluuee(self, value, connection, prepared=False)
     |      Return field's value prepared for interacting with the database backend.
     |      
     |      Used by the default implementations of get_db_prep_save().
     |  
     |  ggeett__ddeeffaauulltt(self)
     |      Return the default value for this field.
     |  
     |  ggeett__ffiilltteerr__kkwwaarrggss__ffoorr__oobbjjeecctt(self, obj)
     |      Return a dict that when passed as kwargs to self.model.filter(), would
     |      yield all instances having the same value for this field as obj has.
     |  
     |  ggeett__ppkk__vvaalluuee__oonn__ssaavvee(self, instance)
     |      Hook to generate new PK values on save. This method is called when
     |      saving instances with no primary key value set. If this method returns
     |      something else than None, then the returned value is used when saving
     |      the new instance.
     |  
     |  hhaass__ddeeffaauulltt(self)
     |      Return a boolean of whether this field has a default value.
     |  
     |  pprree__ssaavvee(self, model_instance, add)
     |      Return field's value just before saving.
     |  
     |  rreell__ddbb__ttyyppee(self, connection)
     |      Return the data type that a related field pointing to this field should
     |      use. For example, this method is called by ForeignKey and OneToOneField
     |      to determine its data type.
     |  
     |  rruunn__vvaalliiddaattoorrss(self, value)
     |  
     |  ssaavvee__ffoorrmm__ddaattaa(self, instance, data)
     |  
     |  sseelleecctt__ffoorrmmaatt(self, compiler, sql, params)
     |      Custom format for select clauses. For example, GIS columns need to be
     |      selected as AsText(table.col) on MySQL as the table.col data can't be
     |      used by Django.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__nnaammee(self, name)
     |  
     |  vvaalliiddaattee(self, value, model_instance)
     |      Validate value and raise ValidationError if necessary. Subclasses
     |      should override this to provide validation logic.
     |  
     |  vvaalluuee__ffrroomm__oobbjjeecctt(self, obj)
     |      Return the value of this field in the given model instance.
     |  
     |  vvaalluuee__ttoo__ssttrriinngg(self, obj)
     |      Return a string value of this field from the passed obj.
     |      This is used by the serialization framework.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Field:
     |  
     |  ddbb__ttaabblleessppaaccee
     |  
     |  ffllaattcchhooiicceess
     |      Flattened version of choices tuple.
     |  
     |  uunniiqquuee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Field:
     |  
     |  aauuttoo__ccrreeaattiioonn__ccoouunntteerr = -13
     |  
     |  ccrreeaattiioonn__ccoouunntteerr = 74
     |  
     |  ddeeffaauulltt__vvaalliiddaattoorrss = []
     |  
     |  eemmppttyy__vvaalluueess = [None, '', [], (), {}]
     |  
     |  hhiiddddeenn = False
     |  
     |  mmaannyy__ttoo__mmaannyy = None
     |  
     |  mmaannyy__ttoo__oonnee = None
     |  
     |  oonnee__ttoo__mmaannyy = None
     |  
     |  oonnee__ttoo__oonnee = None
     |  
     |  rreellaatteedd__mmooddeell = None
     |  
     |  ssyysstteemm__cchheecckk__ddeepprreeccaatteedd__ddeettaaiillss = None
     |  
     |  ssyysstteemm__cchheecckk__rreemmoovveedd__ddeettaaiillss = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ttrraannssffoorrmm(self, lookup_name)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuuppss() from builtins.type
     |  
     |  rreeggiisstteerr__llooookkuupp(lookup, lookup_name=None) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  mmeerrggee__ddiiccttss(dicts)
     |      Merge dicts in reverse to preference the order of the original list. e.g.,
     |      merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class LLooookkuupp(builtins.object)
     |  Lookup(lhs, rhs)
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, lhs, rhs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  aappppllyy__bbiillaatteerraall__ttrraannssffoorrmmss(self, value)
     |  
     |  aass__ssqqll(self, compiler, connection)
     |  
     |  bbaattcchh__pprroocceessss__rrhhss(self, compiler, connection, rhs=None)
     |  
     |  ccoonnttaaiinnss__aaggggrreeggaattee = <django.utils.functional.cached_property object>
     |  ccoonnttaaiinnss__oovveerr__ccllaauussee = <django.utils.functional.cached_property object>
     |  ggeett__ddbb__pprreepp__llooookkuupp(self, value, connection)
     |  
     |  ggeett__ggrroouupp__bbyy__ccoollss(self)
     |  
     |  ggeett__pprreepp__llooookkuupp(self)
     |  
     |  ggeett__ssoouurrccee__eexxpprreessssiioonnss(self)
     |  
     |  pprroocceessss__llhhss(self, compiler, connection, lhs=None)
     |  
     |  pprroocceessss__rrhhss(self, compiler, connection)
     |  
     |  rreellaabbeelleedd__cclloonnee(self, relabels)
     |  
     |  rrhhss__iiss__ddiirreecctt__vvaalluuee(self)
     |  
     |  sseett__ssoouurrccee__eexxpprreessssiioonnss(self, new_exprs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  iiss__ssuummmmaarryy
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ccaann__uussee__nnoonnee__aass__rrhhss = False
     |  
     |  llooookkuupp__nnaammee = None
     |  
     |  pprreeppaarree__rrhhss = True
    
    class MMaannaaggeerr(BaseManagerFromQuerySet)
     |  Manager(*args, **kwargs)
     |  
     |  Method resolution order:
     |      Manager
     |      BaseManagerFromQuerySet
     |      BaseManager
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  ____sslloottnnaammeess____ = []
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseManagerFromQuerySet:
     |  
     |  aaggggrreeggaattee(self, *args, **kwargs)
     |      Return a dictionary containing the calculations (aggregation)
     |      over the current queryset.
     |      
     |      If args is present the expression is passed as a kwarg using
     |      the Aggregate object's default alias.
     |  
     |  aannnnoottaattee(self, *args, **kwargs)
     |      Return a query set in which the returned objects have been annotated
     |      with extra data or aggregations.
     |  
     |  bbuullkk__ccrreeaattee(self, *args, **kwargs)
     |      Insert each of the instances into the database. Do *not* call
     |      save() on each of the instances, do not send any pre/post_save
     |      signals, and do not set the primary key attribute if it is an
     |      autoincrement field (except if features.can_return_ids_from_bulk_insert=True).
     |      Multi-table models are not supported.
     |  
     |  bbuullkk__uuppddaattee(self, *args, **kwargs)
     |      Update the given fields in each of the given objects in the database.
     |  
     |  ccoommpplleexx__ffiilltteerr(self, *args, **kwargs)
     |      Return a new QuerySet instance with filter_obj added to the filters.
     |      
     |      filter_obj can be a Q object or a dictionary of keyword lookup
     |      arguments.
     |      
     |      This exists to support framework features such as 'limit_choices_to',
     |      and usually it will be more natural to use other methods.
     |  
     |  ccoouunntt(self, *args, **kwargs)
     |      Perform a SELECT COUNT() and return the number of records as an
     |      integer.
     |      
     |      If the QuerySet is already fully cached, return the length of the
     |      cached results set to avoid multiple SELECT COUNT(*) calls.
     |  
     |  ccrreeaattee(self, *args, **kwargs)
     |      Create a new object with the given kwargs, saving it to the database
     |      and returning the created object.
     |  
     |  ddaatteess(self, *args, **kwargs)
     |      Return a list of date objects representing all available dates for
     |      the given field_name, scoped to 'kind'.
     |  
     |  ddaatteettiimmeess(self, *args, **kwargs)
     |      Return a list of datetime objects representing all available
     |      datetimes for the given field_name, scoped to 'kind'.
     |  
     |  ddeeffeerr(self, *args, **kwargs)
     |      Defer the loading of data for certain fields until they are accessed.
     |      Add the set of deferred fields to any existing set of deferred fields.
     |      The only exception to this is if None is passed in as the only
     |      parameter, in which case removal all deferrals.
     |  
     |  ddiiffffeerreennccee(self, *args, **kwargs)
     |  
     |  ddiissttiinncctt(self, *args, **kwargs)
     |      Return a new QuerySet instance that will select only distinct results.
     |  
     |  eeaarrlliieesstt(self, *args, **kwargs)
     |  
     |  eexxcclluuddee(self, *args, **kwargs)
     |      Return a new QuerySet instance with NOT (args) ANDed to the existing
     |      set.
     |  
     |  eexxiissttss(self, *args, **kwargs)
     |  
     |  eexxppllaaiinn(self, *args, **kwargs)
     |  
     |  eexxttrraa(self, *args, **kwargs)
     |      Add extra SQL fragments to the query.
     |  
     |  ffiilltteerr(self, *args, **kwargs)
     |      Return a new QuerySet instance with the args ANDed to the existing
     |      set.
     |  
     |  ffiirrsstt(self, *args, **kwargs)
     |      Return the first object of a query or None if no match is found.
     |  
     |  ggeett(self, *args, **kwargs)
     |      Perform the query and return a single object matching the given
     |      keyword arguments.
     |  
     |  ggeett__oorr__ccrreeaattee(self, *args, **kwargs)
     |      Look up an object with the given kwargs, creating one if necessary.
     |      Return a tuple of (object, created), where created is a boolean
     |      specifying whether an object was created.
     |  
     |  iinn__bbuullkk(self, *args, **kwargs)
     |      Return a dictionary mapping each of the given IDs to the object with
     |      that ID. If `id_list` isn't provided, evaluate the entire QuerySet.
     |  
     |  iinntteerrsseeccttiioonn(self, *args, **kwargs)
     |  
     |  iitteerraattoorr(self, *args, **kwargs)
     |      An iterator over the results from applying this QuerySet to the
     |      database.
     |  
     |  llaasstt(self, *args, **kwargs)
     |      Return the last object of a query or None if no match is found.
     |  
     |  llaatteesstt(self, *args, **kwargs)
     |  
     |  nnoonnee(self, *args, **kwargs)
     |      Return an empty QuerySet.
     |  
     |  oonnllyy(self, *args, **kwargs)
     |      Essentially, the opposite of defer(). Only the fields passed into this
     |      method and that are not already specified as deferred are loaded
     |      immediately when the queryset is evaluated.
     |  
     |  oorrddeerr__bbyy(self, *args, **kwargs)
     |      Return a new QuerySet instance with the ordering changed.
     |  
     |  pprreeffeettcchh__rreellaatteedd(self, *args, **kwargs)
     |      Return a new QuerySet instance that will prefetch the specified
     |      Many-To-One and Many-To-Many related objects when the QuerySet is
     |      evaluated.
     |      
     |      When prefetch_related() is called more than once, append to the list of
     |      prefetch lookups. If prefetch_related(None) is called, clear the list.
     |  
     |  rraaww(self, *args, **kwargs)
     |  
     |  rreevveerrssee(self, *args, **kwargs)
     |      Reverse the ordering of the QuerySet.
     |  
     |  sseelleecctt__ffoorr__uuppddaattee(self, *args, **kwargs)
     |      Return a new QuerySet instance that will select objects with a
     |      FOR UPDATE lock.
     |  
     |  sseelleecctt__rreellaatteedd(self, *args, **kwargs)
     |      Return a new QuerySet instance that will select related objects.
     |      
     |      If fields are specified, they must be ForeignKey fields and only those
     |      related objects are included in the selection.
     |      
     |      If select_related(None) is called, clear the list.
     |  
     |  uunniioonn(self, *args, **kwargs)
     |  
     |  uuppddaattee(self, *args, **kwargs)
     |      Update all elements in the current QuerySet, setting all the given
     |      fields to the appropriate values.
     |  
     |  uuppddaattee__oorr__ccrreeaattee(self, *args, **kwargs)
     |      Look up an object with the given kwargs, updating one with defaults
     |      if it exists, otherwise create a new one.
     |      Return a tuple (object, created), where created is a boolean
     |      specifying whether an object was created.
     |  
     |  uussiinngg(self, *args, **kwargs)
     |      Select which database this QuerySet should execute against.
     |  
     |  vvaalluueess(self, *args, **kwargs)
     |  
     |  vvaalluueess__lliisstt(self, *args, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseManager:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____iinniitt____(self)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____ssttrr____(self)
     |      Return "app_label.model_label.manager_name".
     |  
     |  aallll(self)
     |  
     |  cchheecckk(self, **kwargs)
     |  
     |  ccoonnttrriibbuuttee__ttoo__ccllaassss(self, model, name)
     |  
     |  ddbb__mmaannaaggeerr(self, using=None, hints=None)
     |  
     |  ddeeccoonnssttrruucctt(self)
     |      Return a 5-tuple of the form (as_manager (True), manager_class,
     |      queryset_class, args, kwargs).
     |      
     |      Raise a ValueError if the manager is dynamically generated.
     |  
     |  ggeett__qquueerryysseett(self)
     |      Return a new QuerySet object. Subclasses can override this method to
     |      customize the behavior of the Manager.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from BaseManager:
     |  
     |  ffrroomm__qquueerryysseett(queryset_class, class_name=None) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from BaseManager:
     |  
     |  ____nneeww____(cls, *args, **kwargs)
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseManager:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ddbb
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from BaseManager:
     |  
     |  aauuttoo__ccrreeaatteedd = False
     |  
     |  ccrreeaattiioonn__ccoouunntteerr = 17
     |  
     |  uussee__iinn__mmiiggrraattiioonnss = False
    
    class MMaannyyTTooMMaannyyFFiieelldd(RelatedField)
     |  ManyToManyField(to, related_name=None, related_query_name=None, limit_choices_to=None, symmetrical=None, through=None, through_fields=None, db_constraint=True, db_table=None, swappable=True, **kwargs)
     |  
     |  Provide a many-to-many relation by using an intermediary model that
     |  holds two ForeignKey fields pointed at the two sides of the relation.
     |  
     |  Unless a ``through`` model was provided, ManyToManyField will use the
     |  create_many_to_many_intermediary_model factory to automatically generate
     |  the intermediary model.
     |  
     |  Method resolution order:
     |      ManyToManyField
     |      RelatedField
     |      django.db.models.fields.mixins.FieldCacheMixin
     |      django.db.models.fields.Field
     |      django.db.models.query_utils.RegisterLookupMixin
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, to, related_name=None, related_query_name=None, limit_choices_to=None, symmetrical=None, through=None, through_fields=None, db_constraint=True, db_table=None, swappable=True, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  cchheecckk(self, **kwargs)
     |  
     |  ccoonnttrriibbuuttee__ttoo__ccllaassss(self, cls, name, **kwargs)
     |      Register the field with the model class it belongs to.
     |      
     |      If private_only is True, create a separate instance of this field
     |      for every subclass of cls, even if cls is not an abstract model.
     |  
     |  ccoonnttrriibbuuttee__ttoo__rreellaatteedd__ccllaassss(self, cls, related)
     |  
     |  ddbb__cchheecckk(self, connection)
     |      Return the database column check constraint for this field, for the
     |      provided connection. Works the same way as db_type() for the case that
     |      get_internal_type() does not map to a preexisting model field.
     |  
     |  ddbb__ppaarraammeetteerrss(self, connection)
     |      Extension of db_type(), providing a range of different return values
     |      (type, checks). This will look at db_type(), allowing custom model
     |      fields to override it.
     |  
     |  ddbb__ttyyppee(self, connection)
     |      Return the database column data type for this field, for the provided
     |      connection.
     |  
     |  ddeeccoonnssttrruucctt(self)
     |      Return enough information to recreate the field as a 4-tuple:
     |      
     |       * The name of the field on the model, if contribute_to_class() has
     |         been run.
     |       * The import path of the field, including the class:e.g.
     |         django.db.models.IntegerField This should be the most portable
     |         version, so less specific may be better.
     |       * A list of positional arguments.
     |       * A dict of keyword arguments.
     |      
     |      Note that the positional or keyword arguments must contain values of
     |      the following types (including inner values of collection types):
     |      
     |       * None, bool, str, int, float, complex, set, frozenset, list, tuple,
     |         dict
     |       * UUID
     |       * datetime.datetime (naive), datetime.date
     |       * top-level classes, top-level functions - will be referenced by their
     |         full import path
     |       * Storage instances - these have their own deconstruct() method
     |      
     |      This is because the values here must be serialized into a text format
     |      (possibly new Python code, possibly JSON) and these are the only types
     |      with encoding handlers defined.
     |      
     |      There's no need to return the exact way the field was instantiated this
     |      time, just ensure that the resulting field is the same - prefer keyword
     |      arguments over positional ones, and omit parameters with their default
     |      values.
     |  
     |  ffoorrmmffiieelldd(self, *, using=None, **kwargs)
     |      Pass ``limit_choices_to`` to the field being constructed.
     |      
     |      Only passes it if there is a type that supports related fields.
     |      This is a similar strategy used to pass the ``queryset`` to the field
     |      being constructed.
     |  
     |  ggeett__ppaatthh__iinnffoo(self, filtered_relation=None)
     |  
     |  ggeett__rreevveerrssee__ppaatthh__iinnffoo(self, filtered_relation=None)
     |  
     |  ssaavvee__ffoorrmm__ddaattaa(self, instance, data)
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__rreell(self)
     |  
     |  vvaalluuee__ffrroomm__oobbjjeecctt(self, obj)
     |      Return the value of this field in the given model instance.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ddeessccrriippttiioonn = 'Many-to-many relationship'
     |  
     |  mmaannyy__ttoo__mmaannyy = True
     |  
     |  mmaannyy__ttoo__oonnee = False
     |  
     |  oonnee__ttoo__mmaannyy = False
     |  
     |  oonnee__ttoo__oonnee = False
     |  
     |  rreell__ccllaassss = <class 'django.db.models.fields.reverse_related.ManyToMany...
     |      Used by ManyToManyField to store information about the relation.
     |      
     |      ``_meta.get_fields()`` returns this class to provide access to the field
     |      flags for the reverse relation.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from RelatedField:
     |  
     |  ddoo__rreellaatteedd__ccllaassss(self, other, cls)
     |  
     |  ggeett__ccaacchhee__nnaammee(self)
     |  
     |  ggeett__ffoorrwwaarrdd__rreellaatteedd__ffiilltteerr(self, obj)
     |      Return the keyword arguments that when supplied to
     |      self.model.object.filter(), would select all instances related through
     |      this field to the remote obj. This is used to build the querysets
     |      returned by related descriptors. obj is an instance of
     |      self.related_field.model.
     |  
     |  ggeett__lliimmiitt__cchhooiicceess__ttoo(self)
     |      Return ``limit_choices_to`` for this model field.
     |      
     |      If it is a callable, it will be invoked and the result will be
     |      returned.
     |  
     |  ggeett__rreevveerrssee__rreellaatteedd__ffiilltteerr(self, obj)
     |      Complement to get_forward_related_filter(). Return the keyword
     |      arguments that when passed to self.related_field.model.object.filter()
     |      select all instances of self.related_field.model related through
     |      this field to obj. obj is an instance of self.model.
     |  
     |  rreellaatteedd__mmooddeell = <django.utils.functional.cached_property object>
     |  rreellaatteedd__qquueerryy__nnaammee(self)
     |      Define the name that can be used to identify this related object in a
     |      table-spanning query.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from RelatedField:
     |  
     |  sswwaappppaabbllee__sseettttiinngg
     |      Get the setting that this is powered from for swapping, or None
     |      if it's not swapped in / marked with swappable=False.
     |  
     |  ttaarrggeett__ffiieelldd
     |      When filtering against this relation, return the field on the remote
     |      model against which the filtering should happen.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.fields.mixins.FieldCacheMixin:
     |  
     |  ddeelleettee__ccaacchheedd__vvaalluuee(self, instance)
     |  
     |  ggeett__ccaacchheedd__vvaalluuee(self, instance, default=<object object at 0x7f5792241230>)
     |  
     |  iiss__ccaacchheedd(self, instance)
     |  
     |  sseett__ccaacchheedd__vvaalluuee(self, instance, value)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.fields.mixins.FieldCacheMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.fields.Field:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memodict)
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggee____(self, other, NotImplemented=NotImplemented)
     |      Return a >= b.  Computed by @total_ordering from (not a < b).
     |  
     |  ____ggtt____(self, other, NotImplemented=NotImplemented)
     |      Return a > b.  Computed by @total_ordering from (not a < b) and (a != b).
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____llee____(self, other, NotImplemented=NotImplemented)
     |      Return a <= b.  Computed by @total_ordering from (a < b) or (a == b).
     |  
     |  ____lltt____(self, other)
     |      Return self<value.
     |  
     |  ____rreedduuccee____(self)
     |      Pickling should return the model._meta.fields instance of the field,
     |      not a new copy of that field. So, use the app registry to load the
     |      model and then the field back.
     |  
     |  ____rreepprr____(self)
     |      Display the module, class, and name of the field.
     |  
     |  ____ssttrr____(self)
     |      Return "app_label.model_label.field_name" for fields attached to
     |      models.
     |  
     |  ccaacchheedd__ccooll = <django.utils.functional.cached_property object>
     |  ccaasstt__ddbb__ttyyppee(self, connection)
     |      Return the data type to use in the Cast() function.
     |  
     |  cclleeaann(self, value, model_instance)
     |      Convert the value's type and run validation. Validation errors
     |      from to_python() and validate() are propagated. Return the correct
     |      value if no error is raised.
     |  
     |  cclloonnee(self)
     |      Uses deconstruct() to clone a new copy of this Field.
     |      Will not preserve any class attachments/attribute names.
     |  
     |  ddbb__ttyyppee__ppaarraammeetteerrss(self, connection)
     |  
     |  ddbb__ttyyppee__ssuuffffiixx(self, connection)
     |  
     |  ggeett__aattttnnaammee(self)
     |  
     |  ggeett__aattttnnaammee__ccoolluummnn(self)
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], limit_choices_to=None, ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |  
     |  ggeett__ccooll(self, alias, output_field=None)
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ddbb__pprreepp__ssaavvee(self, value, connection)
     |      Return field's value prepared for saving into a database.
     |  
     |  ggeett__ddbb__pprreepp__vvaalluuee(self, value, connection, prepared=False)
     |      Return field's value prepared for interacting with the database backend.
     |      
     |      Used by the default implementations of get_db_prep_save().
     |  
     |  ggeett__ddeeffaauulltt(self)
     |      Return the default value for this field.
     |  
     |  ggeett__ffiilltteerr__kkwwaarrggss__ffoorr__oobbjjeecctt(self, obj)
     |      Return a dict that when passed as kwargs to self.model.filter(), would
     |      yield all instances having the same value for this field as obj has.
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  ggeett__ppkk__vvaalluuee__oonn__ssaavvee(self, instance)
     |      Hook to generate new PK values on save. This method is called when
     |      saving instances with no primary key value set. If this method returns
     |      something else than None, then the returned value is used when saving
     |      the new instance.
     |  
     |  ggeett__pprreepp__vvaalluuee(self, value)
     |      Perform preliminary non-db specific value checks and conversions.
     |  
     |  hhaass__ddeeffaauulltt(self)
     |      Return a boolean of whether this field has a default value.
     |  
     |  pprree__ssaavvee(self, model_instance, add)
     |      Return field's value just before saving.
     |  
     |  rreell__ddbb__ttyyppee(self, connection)
     |      Return the data type that a related field pointing to this field should
     |      use. For example, this method is called by ForeignKey and OneToOneField
     |      to determine its data type.
     |  
     |  rruunn__vvaalliiddaattoorrss(self, value)
     |  
     |  sseelleecctt__ffoorrmmaatt(self, compiler, sql, params)
     |      Custom format for select clauses. For example, GIS columns need to be
     |      selected as AsText(table.col) on MySQL as the table.col data can't be
     |      used by Django.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__nnaammee(self, name)
     |  
     |  ttoo__ppyytthhoonn(self, value)
     |      Convert the input value into the expected Python data type, raising
     |      django.core.exceptions.ValidationError if the data can't be converted.
     |      Return the converted value. Subclasses should override this.
     |  
     |  vvaalliiddaattee(self, value, model_instance)
     |      Validate value and raise ValidationError if necessary. Subclasses
     |      should override this to provide validation logic.
     |  
     |  vvaalliiddaattoorrss = <django.utils.functional.cached_property object>
     |  vvaalluuee__ttoo__ssttrriinngg(self, obj)
     |      Return a string value of this field from the passed obj.
     |      This is used by the serialization framework.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.fields.Field:
     |  
     |  ddbb__ttaabblleessppaaccee
     |  
     |  ffllaattcchhooiicceess
     |      Flattened version of choices tuple.
     |  
     |  uunniiqquuee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.db.models.fields.Field:
     |  
     |  aauuttoo__ccrreeaattiioonn__ccoouunntteerr = -13
     |  
     |  ccllaassss__llooookkuuppss = {'contains': <class 'django.db.models.lookups.Contains...
     |  
     |  ccrreeaattiioonn__ccoouunntteerr = 74
     |  
     |  ddeeffaauulltt__eerrrroorr__mmeessssaaggeess = {'blank': 'This field cannot be blank.', 'inv...
     |  
     |  ddeeffaauulltt__vvaalliiddaattoorrss = []
     |  
     |  eemmppttyy__ssttrriinnggss__aalllloowweedd = True
     |  
     |  eemmppttyy__vvaalluueess = [None, '', [], (), {}]
     |  
     |  hhiiddddeenn = False
     |  
     |  ssyysstteemm__cchheecckk__ddeepprreeccaatteedd__ddeettaaiillss = None
     |  
     |  ssyysstteemm__cchheecckk__rreemmoovveedd__ddeettaaiillss = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ttrraannssffoorrmm(self, lookup_name)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuuppss() from builtins.type
     |  
     |  rreeggiisstteerr__llooookkuupp(lookup, lookup_name=None) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  mmeerrggee__ddiiccttss(dicts)
     |      Merge dicts in reverse to preference the order of the original list. e.g.,
     |      merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.
    
    class MMaannyyTTooMMaannyyRReell(ForeignObjectRel)
     |  ManyToManyRel(field, to, related_name=None, related_query_name=None, limit_choices_to=None, symmetrical=True, through=None, through_fields=None, db_constraint=True)
     |  
     |  Used by ManyToManyField to store information about the relation.
     |  
     |  ``_meta.get_fields()`` returns this class to provide access to the field
     |  flags for the reverse relation.
     |  
     |  Method resolution order:
     |      ManyToManyRel
     |      ForeignObjectRel
     |      django.db.models.fields.mixins.FieldCacheMixin
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, field, to, related_name=None, related_query_name=None, limit_choices_to=None, symmetrical=True, through=None, through_fields=None, db_constraint=True)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ggeett__rreellaatteedd__ffiieelldd(self)
     |      Return the field in the 'to' object to which this relationship is tied.
     |      Provided for symmetry with ManyToOneRel.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ____sslloottnnaammeess____ = []
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ForeignObjectRel:
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ggeett__aacccceessssoorr__nnaammee(self, model=None)
     |  
     |  ggeett__ccaacchhee__nnaammee(self)
     |      Return the name of the cache key to use for storing an instance of the
     |      forward model on the reverse model.
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |      
     |      Analog of django.db.models.fields.Field.get_choices(), provided
     |      initially for utilization by RelatedFieldListFilter.
     |  
     |  ggeett__eexxttrraa__rreessttrriiccttiioonn(self, where_class, alias, related_alias)
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  ggeett__jjooiinniinngg__ccoolluummnnss(self)
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ppaatthh__iinnffoo(self, filtered_relation=None)
     |  
     |  hhiiddddeenn = <django.utils.functional.cached_property object>
     |  iiss__hhiiddddeenn(self)
     |      Should the related object be hidden?
     |  
     |  mmaannyy__ttoo__mmaannyy = <django.utils.functional.cached_property object>
     |  mmaannyy__ttoo__oonnee = <django.utils.functional.cached_property object>
     |  nnaammee = <django.utils.functional.cached_property object>
     |  oonnee__ttoo__mmaannyy = <django.utils.functional.cached_property object>
     |  oonnee__ttoo__oonnee = <django.utils.functional.cached_property object>
     |  rreellaatteedd__mmooddeell = <django.utils.functional.cached_property object>
     |  sseett__ffiieelldd__nnaammee(self)
     |      Set the related field's name, this is not available until later stages
     |      of app loading, so set_field_name is called from
     |      set_attributes_from_rel()
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ForeignObjectRel:
     |  
     |  ddbb__ttyyppee
     |  
     |  rreemmoottee__ffiieelldd
     |  
     |  ttaarrggeett__ffiieelldd
     |      When filtering against this relation, return the field on the remote
     |      model against which the filtering should happen.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from ForeignObjectRel:
     |  
     |  aauuttoo__ccrreeaatteedd = True
     |  
     |  ccoonnccrreettee = False
     |  
     |  eeddiittaabbllee = False
     |  
     |  iiss__rreellaattiioonn = True
     |  
     |  nnuullll = True
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.fields.mixins.FieldCacheMixin:
     |  
     |  ddeelleettee__ccaacchheedd__vvaalluuee(self, instance)
     |  
     |  ggeett__ccaacchheedd__vvaalluuee(self, instance, default=<object object at 0x7f5792241230>)
     |  
     |  iiss__ccaacchheedd(self, instance)
     |  
     |  sseett__ccaacchheedd__vvaalluuee(self, instance, value)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.fields.mixins.FieldCacheMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class MMaannyyTTooOOnneeRReell(ForeignObjectRel)
     |  ManyToOneRel(field, to, field_name, related_name=None, related_query_name=None, limit_choices_to=None, parent_link=False, on_delete=None)
     |  
     |  Used by the ForeignKey field to store information about the relation.
     |  
     |  ``_meta.get_fields()`` returns this class to provide access to the field
     |  flags for the reverse relation.
     |  
     |  Note: Because we somewhat abuse the Rel objects by using them as reverse
     |  fields we get the funny situation where
     |  ``ManyToOneRel.many_to_one == False`` and
     |  ``ManyToOneRel.one_to_many == True``. This is unfortunate but the actual
     |  ManyToOneRel class is a private API and there is work underway to turn
     |  reverse relations into actual fields.
     |  
     |  Method resolution order:
     |      ManyToOneRel
     |      ForeignObjectRel
     |      django.db.models.fields.mixins.FieldCacheMixin
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____ggeettssttaattee____(self)
     |  
     |  ____iinniitt____(self, field, to, field_name, related_name=None, related_query_name=None, limit_choices_to=None, parent_link=False, on_delete=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ggeett__rreellaatteedd__ffiieelldd(self)
     |      Return the Field in the 'to' object to which this relationship is tied.
     |  
     |  sseett__ffiieelldd__nnaammee(self)
     |      Set the related field's name, this is not available until later stages
     |      of app loading, so set_field_name is called from
     |      set_attributes_from_rel()
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ForeignObjectRel:
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ggeett__aacccceessssoorr__nnaammee(self, model=None)
     |  
     |  ggeett__ccaacchhee__nnaammee(self)
     |      Return the name of the cache key to use for storing an instance of the
     |      forward model on the reverse model.
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |      
     |      Analog of django.db.models.fields.Field.get_choices(), provided
     |      initially for utilization by RelatedFieldListFilter.
     |  
     |  ggeett__eexxttrraa__rreessttrriiccttiioonn(self, where_class, alias, related_alias)
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  ggeett__jjooiinniinngg__ccoolluummnnss(self)
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ppaatthh__iinnffoo(self, filtered_relation=None)
     |  
     |  hhiiddddeenn = <django.utils.functional.cached_property object>
     |  iiss__hhiiddddeenn(self)
     |      Should the related object be hidden?
     |  
     |  mmaannyy__ttoo__mmaannyy = <django.utils.functional.cached_property object>
     |  mmaannyy__ttoo__oonnee = <django.utils.functional.cached_property object>
     |  nnaammee = <django.utils.functional.cached_property object>
     |  oonnee__ttoo__mmaannyy = <django.utils.functional.cached_property object>
     |  oonnee__ttoo__oonnee = <django.utils.functional.cached_property object>
     |  rreellaatteedd__mmooddeell = <django.utils.functional.cached_property object>
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ForeignObjectRel:
     |  
     |  ddbb__ttyyppee
     |  
     |  rreemmoottee__ffiieelldd
     |  
     |  ttaarrggeett__ffiieelldd
     |      When filtering against this relation, return the field on the remote
     |      model against which the filtering should happen.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from ForeignObjectRel:
     |  
     |  aauuttoo__ccrreeaatteedd = True
     |  
     |  ccoonnccrreettee = False
     |  
     |  eeddiittaabbllee = False
     |  
     |  iiss__rreellaattiioonn = True
     |  
     |  nnuullll = True
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.fields.mixins.FieldCacheMixin:
     |  
     |  ddeelleettee__ccaacchheedd__vvaalluuee(self, instance)
     |  
     |  ggeett__ccaacchheedd__vvaalluuee(self, instance, default=<object object at 0x7f5792241230>)
     |  
     |  iiss__ccaacchheedd(self, instance)
     |  
     |  sseett__ccaacchheedd__vvaalluuee(self, instance, value)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.fields.mixins.FieldCacheMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class MMaaxx(Aggregate)
     |  Max(*args, **kwargs)
     |  
     |  An SQL function call.
     |  
     |  Method resolution order:
     |      Max
     |      Aggregate
     |      django.db.models.expressions.Func
     |      django.db.models.expressions.SQLiteNumericMixin
     |      django.db.models.expressions.Expression
     |      django.db.models.expressions.BaseExpression
     |      django.db.models.expressions.Combinable
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  ffuunnccttiioonn = 'MAX'
     |  
     |  nnaammee = 'Max'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Aggregate:
     |  
     |  ____iinniitt____(self, *expressions, distinct=False, filter=None, **extra)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  aass__ssqqll(self, compiler, connection, **extra_context)
     |      Responsible for returning a (sql, [params]) tuple to be included
     |      in the current query.
     |      
     |      Different backends can provide their own implementation, by
     |      providing an `as_{vendor}` method and patching the Expression:
     |      
     |      ```
     |      def override_as_sql(self, compiler, connection):
     |          # custom logic
     |          return super().as_sql(compiler, connection)
     |      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
     |      ```
     |      
     |      Arguments:
     |       * compiler: the query compiler responsible for generating the query.
     |         Must have a compile method, returning a (sql, [params]) tuple.
     |         Calling compiler(value) will return a quoted `value`.
     |      
     |       * connection: the database connection used for the current query.
     |      
     |      Return: (sql, params)
     |        Where `sql` is a string containing ordered sql parameters to be
     |        replaced with the elements of the list `params`.
     |  
     |  ggeett__ggrroouupp__bbyy__ccoollss(self)
     |  
     |  ggeett__ssoouurrccee__eexxpprreessssiioonnss(self)
     |  
     |  ggeett__ssoouurrccee__ffiieellddss(self)
     |      Return the underlying field types used by this aggregate.
     |  
     |  rreessoollvvee__eexxpprreessssiioonn(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)
     |      Provide the chance to do any preprocessing or validation before being
     |      added to the query.
     |      
     |      Arguments:
     |       * query: the backend query implementation
     |       * allow_joins: boolean allowing or denying use of joins
     |         in this query
     |       * reuse: a set of reusable joins for multijoins
     |       * summarize: a terminal aggregate clause
     |       * for_save: whether this expression about to be used in a save or update
     |      
     |      Return: an Expression to be added to the query.
     |  
     |  sseett__ssoouurrccee__eexxpprreessssiioonnss(self, exprs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Aggregate:
     |  
     |  ddeeffaauulltt__aalliiaass
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Aggregate:
     |  
     |  aallllooww__ddiissttiinncctt = False
     |  
     |  ccoonnttaaiinnss__aaggggrreeggaattee = True
     |  
     |  ffiilltteerr__tteemmppllaattee = '%s FILTER (WHERE %%(filter)s)'
     |  
     |  tteemmppllaattee = '%(function)s(%(distinct)s%(expressions)s)'
     |  
     |  wwiinnddooww__ccoommppaattiibbllee = True
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.expressions.Func:
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ccooppyy(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.db.models.expressions.Func:
     |  
     |  aarrgg__jjooiinneerr = ', '
     |  
     |  aarriittyy = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.expressions.SQLiteNumericMixin:
     |  
     |  aass__ssqqlliittee(self, compiler, connection, **extra_context)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.expressions.SQLiteNumericMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.expressions.BaseExpression:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettssttaattee____(self)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  aasscc(self, **kwargs)
     |  
     |  ccoonnttaaiinnss__ccoolluummnn__rreeffeerreenncceess = <django.utils.functional.cached_property object>
     |  ccoonnttaaiinnss__oovveerr__ccllaauussee = <django.utils.functional.cached_property object>
     |  ccoonnvveerrtt__vvaalluuee = <django.utils.functional.cached_property object>
     |  ddeeccoonnssttrruucctt(obj)
     |      Return a 3-tuple of class import path, positional arguments,
     |      and keyword arguments.
     |  
     |  ddeesscc(self, **kwargs)
     |  
     |  ffllaatttteenn(self)
     |      Recursively yield this expression and all subexpressions, in
     |      depth-first order.
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__llooookkuupp(self, lookup)
     |  
     |  ggeett__ttrraannssffoorrmm(self, name)
     |  
     |  iiddeennttiittyy = <django.utils.functional.cached_property object>
     |  oouuttppuutt__ffiieelldd = <django.utils.functional.cached_property object>
     |  rreellaabbeelleedd__cclloonnee(self, change_map)
     |  
     |  rreevveerrssee__oorrddeerriinngg(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.expressions.BaseExpression:
     |  
     |  ____nneeww____(cls, *args, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.expressions.BaseExpression:
     |  
     |  ffiieelldd
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.db.models.expressions.BaseExpression:
     |  
     |  ffiilltteerraabbllee = True
     |  
     |  iiss__ssuummmmaarryy = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.expressions.Combinable:
     |  
     |  ____aadddd____(self, other)
     |  
     |  ____aanndd____(self, other)
     |  
     |  ____mmoodd____(self, other)
     |  
     |  ____mmuull____(self, other)
     |  
     |  ____nneegg____(self)
     |  
     |  ____oorr____(self, other)
     |  
     |  ____ppooww____(self, other)
     |  
     |  ____rraadddd____(self, other)
     |  
     |  ____rraanndd____(self, other)
     |  
     |  ____rrmmoodd____(self, other)
     |  
     |  ____rrmmuull____(self, other)
     |  
     |  ____rroorr____(self, other)
     |  
     |  ____rrppooww____(self, other)
     |  
     |  ____rrssuubb____(self, other)
     |  
     |  ____rrttrruueeddiivv____(self, other)
     |  
     |  ____ssuubb____(self, other)
     |  
     |  ____ttrruueeddiivv____(self, other)
     |  
     |  bbiittaanndd(self, other)
     |  
     |  bbiittlleeffttsshhiifftt(self, other)
     |  
     |  bbiittoorr(self, other)
     |  
     |  bbiittrriigghhttsshhiifftt(self, other)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.db.models.expressions.Combinable:
     |  
     |  AADDDD = '+'
     |  
     |  BBIITTAANNDD = '&'
     |  
     |  BBIITTLLEEFFTTSSHHIIFFTT = '<<'
     |  
     |  BBIITTOORR = '|'
     |  
     |  BBIITTRRIIGGHHTTSSHHIIFFTT = '>>'
     |  
     |  DDIIVV = '/'
     |  
     |  MMOODD = '%%'
     |  
     |  MMUULL = '*'
     |  
     |  PPOOWW = '^'
     |  
     |  SSUUBB = '-'
    
    class MMiinn(Aggregate)
     |  Min(*args, **kwargs)
     |  
     |  An SQL function call.
     |  
     |  Method resolution order:
     |      Min
     |      Aggregate
     |      django.db.models.expressions.Func
     |      django.db.models.expressions.SQLiteNumericMixin
     |      django.db.models.expressions.Expression
     |      django.db.models.expressions.BaseExpression
     |      django.db.models.expressions.Combinable
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  ffuunnccttiioonn = 'MIN'
     |  
     |  nnaammee = 'Min'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Aggregate:
     |  
     |  ____iinniitt____(self, *expressions, distinct=False, filter=None, **extra)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  aass__ssqqll(self, compiler, connection, **extra_context)
     |      Responsible for returning a (sql, [params]) tuple to be included
     |      in the current query.
     |      
     |      Different backends can provide their own implementation, by
     |      providing an `as_{vendor}` method and patching the Expression:
     |      
     |      ```
     |      def override_as_sql(self, compiler, connection):
     |          # custom logic
     |          return super().as_sql(compiler, connection)
     |      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
     |      ```
     |      
     |      Arguments:
     |       * compiler: the query compiler responsible for generating the query.
     |         Must have a compile method, returning a (sql, [params]) tuple.
     |         Calling compiler(value) will return a quoted `value`.
     |      
     |       * connection: the database connection used for the current query.
     |      
     |      Return: (sql, params)
     |        Where `sql` is a string containing ordered sql parameters to be
     |        replaced with the elements of the list `params`.
     |  
     |  ggeett__ggrroouupp__bbyy__ccoollss(self)
     |  
     |  ggeett__ssoouurrccee__eexxpprreessssiioonnss(self)
     |  
     |  ggeett__ssoouurrccee__ffiieellddss(self)
     |      Return the underlying field types used by this aggregate.
     |  
     |  rreessoollvvee__eexxpprreessssiioonn(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)
     |      Provide the chance to do any preprocessing or validation before being
     |      added to the query.
     |      
     |      Arguments:
     |       * query: the backend query implementation
     |       * allow_joins: boolean allowing or denying use of joins
     |         in this query
     |       * reuse: a set of reusable joins for multijoins
     |       * summarize: a terminal aggregate clause
     |       * for_save: whether this expression about to be used in a save or update
     |      
     |      Return: an Expression to be added to the query.
     |  
     |  sseett__ssoouurrccee__eexxpprreessssiioonnss(self, exprs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Aggregate:
     |  
     |  ddeeffaauulltt__aalliiaass
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Aggregate:
     |  
     |  aallllooww__ddiissttiinncctt = False
     |  
     |  ccoonnttaaiinnss__aaggggrreeggaattee = True
     |  
     |  ffiilltteerr__tteemmppllaattee = '%s FILTER (WHERE %%(filter)s)'
     |  
     |  tteemmppllaattee = '%(function)s(%(distinct)s%(expressions)s)'
     |  
     |  wwiinnddooww__ccoommppaattiibbllee = True
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.expressions.Func:
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ccooppyy(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.db.models.expressions.Func:
     |  
     |  aarrgg__jjooiinneerr = ', '
     |  
     |  aarriittyy = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.expressions.SQLiteNumericMixin:
     |  
     |  aass__ssqqlliittee(self, compiler, connection, **extra_context)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.expressions.SQLiteNumericMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.expressions.BaseExpression:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettssttaattee____(self)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  aasscc(self, **kwargs)
     |  
     |  ccoonnttaaiinnss__ccoolluummnn__rreeffeerreenncceess = <django.utils.functional.cached_property object>
     |  ccoonnttaaiinnss__oovveerr__ccllaauussee = <django.utils.functional.cached_property object>
     |  ccoonnvveerrtt__vvaalluuee = <django.utils.functional.cached_property object>
     |  ddeeccoonnssttrruucctt(obj)
     |      Return a 3-tuple of class import path, positional arguments,
     |      and keyword arguments.
     |  
     |  ddeesscc(self, **kwargs)
     |  
     |  ffllaatttteenn(self)
     |      Recursively yield this expression and all subexpressions, in
     |      depth-first order.
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__llooookkuupp(self, lookup)
     |  
     |  ggeett__ttrraannssffoorrmm(self, name)
     |  
     |  iiddeennttiittyy = <django.utils.functional.cached_property object>
     |  oouuttppuutt__ffiieelldd = <django.utils.functional.cached_property object>
     |  rreellaabbeelleedd__cclloonnee(self, change_map)
     |  
     |  rreevveerrssee__oorrddeerriinngg(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.expressions.BaseExpression:
     |  
     |  ____nneeww____(cls, *args, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.expressions.BaseExpression:
     |  
     |  ffiieelldd
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.db.models.expressions.BaseExpression:
     |  
     |  ffiilltteerraabbllee = True
     |  
     |  iiss__ssuummmmaarryy = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.expressions.Combinable:
     |  
     |  ____aadddd____(self, other)
     |  
     |  ____aanndd____(self, other)
     |  
     |  ____mmoodd____(self, other)
     |  
     |  ____mmuull____(self, other)
     |  
     |  ____nneegg____(self)
     |  
     |  ____oorr____(self, other)
     |  
     |  ____ppooww____(self, other)
     |  
     |  ____rraadddd____(self, other)
     |  
     |  ____rraanndd____(self, other)
     |  
     |  ____rrmmoodd____(self, other)
     |  
     |  ____rrmmuull____(self, other)
     |  
     |  ____rroorr____(self, other)
     |  
     |  ____rrppooww____(self, other)
     |  
     |  ____rrssuubb____(self, other)
     |  
     |  ____rrttrruueeddiivv____(self, other)
     |  
     |  ____ssuubb____(self, other)
     |  
     |  ____ttrruueeddiivv____(self, other)
     |  
     |  bbiittaanndd(self, other)
     |  
     |  bbiittlleeffttsshhiifftt(self, other)
     |  
     |  bbiittoorr(self, other)
     |  
     |  bbiittrriigghhttsshhiifftt(self, other)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.db.models.expressions.Combinable:
     |  
     |  AADDDD = '+'
     |  
     |  BBIITTAANNDD = '&'
     |  
     |  BBIITTLLEEFFTTSSHHIIFFTT = '<<'
     |  
     |  BBIITTOORR = '|'
     |  
     |  BBIITTRRIIGGHHTTSSHHIIFFTT = '>>'
     |  
     |  DDIIVV = '/'
     |  
     |  MMOODD = '%%'
     |  
     |  MMUULL = '*'
     |  
     |  PPOOWW = '^'
     |  
     |  SSUUBB = '-'
    
    class MMooddeell(builtins.object)
     |  Model(*args, **kwargs)
     |  
     |  Methods defined here:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettssttaattee____(self)
     |      Hook to allow choosing the attributes to pickle.
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____iinniitt____(self, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____rreedduuccee____(self)
     |      Helper for pickle.
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ____sseettssttaattee____(self, state)
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  cclleeaann(self)
     |      Hook for doing any extra model-wide validation after clean() has been
     |      called on every field by self.clean_fields. Any ValidationError raised
     |      by this method will not be associated with a particular field; it will
     |      have a special-case association with the field defined by NON_FIELD_ERRORS.
     |  
     |  cclleeaann__ffiieellddss(self, exclude=None)
     |      Clean all fields and raise a ValidationError containing a dict
     |      of all validation errors if any occur.
     |  
     |  ddaattee__eerrrroorr__mmeessssaaggee(self, lookup_type, field_name, unique_for)
     |  
     |  ddeelleettee(self, using=None, keep_parents=False)
     |  
     |  ffuullll__cclleeaann(self, exclude=None, validate_unique=True)
     |      Call clean_fields(), clean(), and validate_unique() on the model.
     |      Raise a ValidationError for any errors that occur.
     |  
     |  ggeett__ddeeffeerrrreedd__ffiieellddss(self)
     |      Return a set containing names of deferred fields for this instance.
     |  
     |  pprreeppaarree__ddaattaabbaassee__ssaavvee(self, field)
     |  
     |  rreeffrreesshh__ffrroomm__ddbb(self, using=None, fields=None)
     |      Reload field values from the database.
     |      
     |      By default, the reloading happens from the database this instance was
     |      loaded from, or by the read router if this instance wasn't loaded from
     |      any database. The using parameter will override the default.
     |      
     |      Fields can be used to specify which fields to reload. The fields
     |      should be an iterable of field attnames. If fields is None, then
     |      all non-deferred fields are reloaded.
     |      
     |      When accessing deferred fields of an instance, the deferred loading
     |      of the field will call this method.
     |  
     |  ssaavvee(self, force_insert=False, force_update=False, using=None, update_fields=None)
     |      Save the current instance. Override this in a subclass if you want to
     |      control the saving process.
     |      
     |      The 'force_insert' and 'force_update' parameters can be used to insist
     |      that the "save" must be an SQL insert or update (or equivalent for
     |      non-SQL backends), respectively. Normally, they should not be set.
     |  
     |  ssaavvee__bbaassee(self, raw=False, force_insert=False, force_update=False, using=None, update_fields=None)
     |      Handle the parts of saving which should be done only once per save,
     |      yet need to be done in raw saves, too. This includes some sanity
     |      checks and signal sending.
     |      
     |      The 'raw' argument is telling save_base not to save any parent
     |      models and not to do any changes to the values before save. This
     |      is used by fixture loading.
     |  
     |  sseerriiaalliizzaabbllee__vvaalluuee(self, field_name)
     |      Return the value of the field name for this instance. If the field is
     |      a foreign key, return the id value instead of the object. If there's
     |      no Field object with this name on the model, return the model
     |      attribute's value.
     |      
     |      Used to serialize a field's value (in the serializer, or form output,
     |      for example). Normally, you would just access the attribute directly
     |      and not use this method.
     |  
     |  uunniiqquuee__eerrrroorr__mmeessssaaggee(self, model_class, unique_check)
     |  
     |  vvaalliiddaattee__uunniiqquuee(self, exclude=None)
     |      Check unique constraints on the model and raise ValidationError if any
     |      failed.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  cchheecckk(**kwargs) from django.db.models.base.ModelBase
     |  
     |  ffrroomm__ddbb(db, field_names, values) from django.db.models.base.ModelBase
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ppkk
    
    class NNOOTT__PPRROOVVIIDDEEDD(builtins.object)
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class NNuullllBBoooolleeaannFFiieelldd(BooleanField)
     |  NullBooleanField(*args, **kwargs)
     |  
     |  Base class for all field types
     |  
     |  Method resolution order:
     |      NullBooleanField
     |      BooleanField
     |      Field
     |      django.db.models.query_utils.RegisterLookupMixin
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ddeeccoonnssttrruucctt(self)
     |      Return enough information to recreate the field as a 4-tuple:
     |      
     |       * The name of the field on the model, if contribute_to_class() has
     |         been run.
     |       * The import path of the field, including the class:e.g.
     |         django.db.models.IntegerField This should be the most portable
     |         version, so less specific may be better.
     |       * A list of positional arguments.
     |       * A dict of keyword arguments.
     |      
     |      Note that the positional or keyword arguments must contain values of
     |      the following types (including inner values of collection types):
     |      
     |       * None, bool, str, int, float, complex, set, frozenset, list, tuple,
     |         dict
     |       * UUID
     |       * datetime.datetime (naive), datetime.date
     |       * top-level classes, top-level functions - will be referenced by their
     |         full import path
     |       * Storage instances - these have their own deconstruct() method
     |      
     |      This is because the values here must be serialized into a text format
     |      (possibly new Python code, possibly JSON) and these are the only types
     |      with encoding handlers defined.
     |      
     |      There's no need to return the exact way the field was instantiated this
     |      time, just ensure that the resulting field is the same - prefer keyword
     |      arguments over positional ones, and omit parameters with their default
     |      values.
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ddeeffaauulltt__eerrrroorr__mmeessssaaggeess = {'invalid': "'%(value)s' value must be either...
     |  
     |  ddeessccrriippttiioonn = 'Boolean (Either True, False or None)'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BooleanField:
     |  
     |  ffoorrmmffiieelldd(self, **kwargs)
     |      Return a django.forms.Field instance for this field.
     |  
     |  ggeett__pprreepp__vvaalluuee(self, value)
     |      Perform preliminary non-db specific value checks and conversions.
     |  
     |  ttoo__ppyytthhoonn(self, value)
     |      Convert the input value into the expected Python data type, raising
     |      django.core.exceptions.ValidationError if the data can't be converted.
     |      Return the converted value. Subclasses should override this.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from BooleanField:
     |  
     |  eemmppttyy__ssttrriinnggss__aalllloowweedd = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Field:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memodict)
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggee____(self, other, NotImplemented=NotImplemented)
     |      Return a >= b.  Computed by @total_ordering from (not a < b).
     |  
     |  ____ggtt____(self, other, NotImplemented=NotImplemented)
     |      Return a > b.  Computed by @total_ordering from (not a < b) and (a != b).
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____llee____(self, other, NotImplemented=NotImplemented)
     |      Return a <= b.  Computed by @total_ordering from (a < b) or (a == b).
     |  
     |  ____lltt____(self, other)
     |      Return self<value.
     |  
     |  ____rreedduuccee____(self)
     |      Pickling should return the model._meta.fields instance of the field,
     |      not a new copy of that field. So, use the app registry to load the
     |      model and then the field back.
     |  
     |  ____rreepprr____(self)
     |      Display the module, class, and name of the field.
     |  
     |  ____ssttrr____(self)
     |      Return "app_label.model_label.field_name" for fields attached to
     |      models.
     |  
     |  ccaacchheedd__ccooll = <django.utils.functional.cached_property object>
     |  ccaasstt__ddbb__ttyyppee(self, connection)
     |      Return the data type to use in the Cast() function.
     |  
     |  cchheecckk(self, **kwargs)
     |  
     |  cclleeaann(self, value, model_instance)
     |      Convert the value's type and run validation. Validation errors
     |      from to_python() and validate() are propagated. Return the correct
     |      value if no error is raised.
     |  
     |  cclloonnee(self)
     |      Uses deconstruct() to clone a new copy of this Field.
     |      Will not preserve any class attachments/attribute names.
     |  
     |  ccoonnttrriibbuuttee__ttoo__ccllaassss(self, cls, name, private_only=False)
     |      Register the field with the model class it belongs to.
     |      
     |      If private_only is True, create a separate instance of this field
     |      for every subclass of cls, even if cls is not an abstract model.
     |  
     |  ddbb__cchheecckk(self, connection)
     |      Return the database column check constraint for this field, for the
     |      provided connection. Works the same way as db_type() for the case that
     |      get_internal_type() does not map to a preexisting model field.
     |  
     |  ddbb__ppaarraammeetteerrss(self, connection)
     |      Extension of db_type(), providing a range of different return values
     |      (type, checks). This will look at db_type(), allowing custom model
     |      fields to override it.
     |  
     |  ddbb__ttyyppee(self, connection)
     |      Return the database column data type for this field, for the provided
     |      connection.
     |  
     |  ddbb__ttyyppee__ppaarraammeetteerrss(self, connection)
     |  
     |  ddbb__ttyyppee__ssuuffffiixx(self, connection)
     |  
     |  ggeett__aattttnnaammee(self)
     |  
     |  ggeett__aattttnnaammee__ccoolluummnn(self)
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], limit_choices_to=None, ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |  
     |  ggeett__ccooll(self, alias, output_field=None)
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ddbb__pprreepp__ssaavvee(self, value, connection)
     |      Return field's value prepared for saving into a database.
     |  
     |  ggeett__ddbb__pprreepp__vvaalluuee(self, value, connection, prepared=False)
     |      Return field's value prepared for interacting with the database backend.
     |      
     |      Used by the default implementations of get_db_prep_save().
     |  
     |  ggeett__ddeeffaauulltt(self)
     |      Return the default value for this field.
     |  
     |  ggeett__ffiilltteerr__kkwwaarrggss__ffoorr__oobbjjeecctt(self, obj)
     |      Return a dict that when passed as kwargs to self.model.filter(), would
     |      yield all instances having the same value for this field as obj has.
     |  
     |  ggeett__ppkk__vvaalluuee__oonn__ssaavvee(self, instance)
     |      Hook to generate new PK values on save. This method is called when
     |      saving instances with no primary key value set. If this method returns
     |      something else than None, then the returned value is used when saving
     |      the new instance.
     |  
     |  hhaass__ddeeffaauulltt(self)
     |      Return a boolean of whether this field has a default value.
     |  
     |  pprree__ssaavvee(self, model_instance, add)
     |      Return field's value just before saving.
     |  
     |  rreell__ddbb__ttyyppee(self, connection)
     |      Return the data type that a related field pointing to this field should
     |      use. For example, this method is called by ForeignKey and OneToOneField
     |      to determine its data type.
     |  
     |  rruunn__vvaalliiddaattoorrss(self, value)
     |  
     |  ssaavvee__ffoorrmm__ddaattaa(self, instance, data)
     |  
     |  sseelleecctt__ffoorrmmaatt(self, compiler, sql, params)
     |      Custom format for select clauses. For example, GIS columns need to be
     |      selected as AsText(table.col) on MySQL as the table.col data can't be
     |      used by Django.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__nnaammee(self, name)
     |  
     |  vvaalliiddaattee(self, value, model_instance)
     |      Validate value and raise ValidationError if necessary. Subclasses
     |      should override this to provide validation logic.
     |  
     |  vvaalliiddaattoorrss = <django.utils.functional.cached_property object>
     |  vvaalluuee__ffrroomm__oobbjjeecctt(self, obj)
     |      Return the value of this field in the given model instance.
     |  
     |  vvaalluuee__ttoo__ssttrriinngg(self, obj)
     |      Return a string value of this field from the passed obj.
     |      This is used by the serialization framework.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Field:
     |  
     |  ddbb__ttaabblleessppaaccee
     |  
     |  ffllaattcchhooiicceess
     |      Flattened version of choices tuple.
     |  
     |  uunniiqquuee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Field:
     |  
     |  aauuttoo__ccrreeaattiioonn__ccoouunntteerr = -13
     |  
     |  ccllaassss__llooookkuuppss = {'contains': <class 'django.db.models.lookups.Contains...
     |  
     |  ccrreeaattiioonn__ccoouunntteerr = 74
     |  
     |  ddeeffaauulltt__vvaalliiddaattoorrss = []
     |  
     |  eemmppttyy__vvaalluueess = [None, '', [], (), {}]
     |  
     |  hhiiddddeenn = False
     |  
     |  mmaannyy__ttoo__mmaannyy = None
     |  
     |  mmaannyy__ttoo__oonnee = None
     |  
     |  oonnee__ttoo__mmaannyy = None
     |  
     |  oonnee__ttoo__oonnee = None
     |  
     |  rreellaatteedd__mmooddeell = None
     |  
     |  ssyysstteemm__cchheecckk__ddeepprreeccaatteedd__ddeettaaiillss = None
     |  
     |  ssyysstteemm__cchheecckk__rreemmoovveedd__ddeettaaiillss = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ttrraannssffoorrmm(self, lookup_name)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuuppss() from builtins.type
     |  
     |  rreeggiisstteerr__llooookkuupp(lookup, lookup_name=None) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  mmeerrggee__ddiiccttss(dicts)
     |      Merge dicts in reverse to preference the order of the original list. e.g.,
     |      merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class OObbjjeeccttDDooeessNNoottEExxiisstt(builtins.Exception)
     |  The requested object does not exist
     |  
     |  Method resolution order:
     |      ObjectDoesNotExist
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ssiilleenntt__vvaarriiaabbllee__ffaaiilluurree = True
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |  
     |  ____nneeww____(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  ____ddeellaattttrr____(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  ____ggeettaattttrriibbuuttee____(self, name, /)
     |      Return getattr(self, name).
     |  
     |  ____rreedduuccee____(...)
     |      Helper for pickle.
     |  
     |  ____rreepprr____(self, /)
     |      Return repr(self).
     |  
     |  ____sseettaattttrr____(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  ____sseettssttaattee____(...)
     |  
     |  ____ssttrr____(self, /)
     |      Return str(self).
     |  
     |  wwiitthh__ttrraacceebbaacckk(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  ____ccaauussee____
     |      exception cause
     |  
     |  ____ccoonntteexxtt____
     |      exception context
     |  
     |  ____ddiicctt____
     |  
     |  ____ssuupppprreessss__ccoonntteexxtt____
     |  
     |  ____ttrraacceebbaacckk____
     |  
     |  aarrggss
    
    class OOnneeTTooOOnneeFFiieelldd(ForeignKey)
     |  OneToOneField(to, on_delete, to_field=None, **kwargs)
     |  
     |  A OneToOneField is essentially the same as a ForeignKey, with the exception
     |  that it always carries a "unique" constraint with it and the reverse
     |  relation always returns the object pointed to (since there will only ever
     |  be one), rather than returning a list.
     |  
     |  Method resolution order:
     |      OneToOneField
     |      ForeignKey
     |      ForeignObject
     |      RelatedField
     |      django.db.models.fields.mixins.FieldCacheMixin
     |      django.db.models.fields.Field
     |      django.db.models.query_utils.RegisterLookupMixin
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, to, on_delete, to_field=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ddeeccoonnssttrruucctt(self)
     |      Return enough information to recreate the field as a 4-tuple:
     |      
     |       * The name of the field on the model, if contribute_to_class() has
     |         been run.
     |       * The import path of the field, including the class:e.g.
     |         django.db.models.IntegerField This should be the most portable
     |         version, so less specific may be better.
     |       * A list of positional arguments.
     |       * A dict of keyword arguments.
     |      
     |      Note that the positional or keyword arguments must contain values of
     |      the following types (including inner values of collection types):
     |      
     |       * None, bool, str, int, float, complex, set, frozenset, list, tuple,
     |         dict
     |       * UUID
     |       * datetime.datetime (naive), datetime.date
     |       * top-level classes, top-level functions - will be referenced by their
     |         full import path
     |       * Storage instances - these have their own deconstruct() method
     |      
     |      This is because the values here must be serialized into a text format
     |      (possibly new Python code, possibly JSON) and these are the only types
     |      with encoding handlers defined.
     |      
     |      There's no need to return the exact way the field was instantiated this
     |      time, just ensure that the resulting field is the same - prefer keyword
     |      arguments over positional ones, and omit parameters with their default
     |      values.
     |  
     |  ffoorrmmffiieelldd(self, **kwargs)
     |      Pass ``limit_choices_to`` to the field being constructed.
     |      
     |      Only passes it if there is a type that supports related fields.
     |      This is a similar strategy used to pass the ``queryset`` to the field
     |      being constructed.
     |  
     |  ssaavvee__ffoorrmm__ddaattaa(self, instance, data)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ddeessccrriippttiioonn = 'One-to-one relationship'
     |  
     |  ffoorrwwaarrdd__rreellaatteedd__aacccceessssoorr__ccllaassss = <class 'django.db.models.fields.relat...
     |      Accessor to the related object on the forward side of a one-to-one relation.
     |      
     |      In the example::
     |      
     |          class Restaurant(Model):
     |              place = OneToOneField(Place, related_name='restaurant')
     |      
     |      ``Restaurant.place`` is a ``ForwardOneToOneDescriptor`` instance.
     |  
     |  mmaannyy__ttoo__mmaannyy = False
     |  
     |  mmaannyy__ttoo__oonnee = False
     |  
     |  oonnee__ttoo__mmaannyy = False
     |  
     |  oonnee__ttoo__oonnee = True
     |  
     |  rreell__ccllaassss = <class 'django.db.models.fields.reverse_related.OneToOneRe...
     |      Used by OneToOneField to store information about the relation.
     |      
     |      ``_meta.get_fields()`` returns this class to provide access to the field
     |      flags for the reverse relation.
     |  
     |  rreellaatteedd__aacccceessssoorr__ccllaassss = <class 'django.db.models.fields.related_descr...
     |      Accessor to the related object on the reverse side of a one-to-one
     |      relation.
     |      
     |      In the example::
     |      
     |          class Restaurant(Model):
     |              place = OneToOneField(Place, related_name='restaurant')
     |      
     |      ``Place.restaurant`` is a ``ReverseOneToOneDescriptor`` instance.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ForeignKey:
     |  
     |  cchheecckk(self, **kwargs)
     |  
     |  ccoonnttrriibbuuttee__ttoo__rreellaatteedd__ccllaassss(self, cls, related)
     |  
     |  ccoonnvveerrtt__eemmppttyy__ssttrriinnggss(self, value, expression, connection)
     |  
     |  ddbb__cchheecckk(self, connection)
     |      Return the database column check constraint for this field, for the
     |      provided connection. Works the same way as db_type() for the case that
     |      get_internal_type() does not map to a preexisting model field.
     |  
     |  ddbb__ppaarraammeetteerrss(self, connection)
     |      Extension of db_type(), providing a range of different return values
     |      (type, checks). This will look at db_type(), allowing custom model
     |      fields to override it.
     |  
     |  ddbb__ttyyppee(self, connection)
     |      Return the database column data type for this field, for the provided
     |      connection.
     |  
     |  ggeett__aattttnnaammee(self)
     |  
     |  ggeett__aattttnnaammee__ccoolluummnn(self)
     |  
     |  ggeett__ccooll(self, alias, output_field=None)
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ddbb__pprreepp__ssaavvee(self, value, connection)
     |      Return field's value prepared for saving into a database.
     |  
     |  ggeett__ddbb__pprreepp__vvaalluuee(self, value, connection, prepared=False)
     |      Return field's value prepared for interacting with the database backend.
     |      
     |      Used by the default implementations of get_db_prep_save().
     |  
     |  ggeett__ddeeffaauulltt(self)
     |      Return the to_field if the default value is an object.
     |  
     |  ggeett__rreevveerrssee__ppaatthh__iinnffoo(self, filtered_relation=None)
     |      Get path from the related model to this field's model.
     |  
     |  ttoo__ppyytthhoonn(self, value)
     |      Convert the input value into the expected Python data type, raising
     |      django.core.exceptions.ValidationError if the data can't be converted.
     |      Return the converted value. Subclasses should override this.
     |  
     |  vvaalliiddaattee(self, value, model_instance)
     |      Validate value and raise ValidationError if necessary. Subclasses
     |      should override this to provide validation logic.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ForeignKey:
     |  
     |  ttaarrggeett__ffiieelldd
     |      When filtering against this relation, return the field on the remote
     |      model against which the filtering should happen.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from ForeignKey:
     |  
     |  ddeeffaauulltt__eerrrroorr__mmeessssaaggeess = {'invalid': '%(model)s instance with %(field)...
     |  
     |  eemmppttyy__ssttrriinnggss__aalllloowweedd = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ForeignObject:
     |  
     |  ccoonnttrriibbuuttee__ttoo__ccllaassss(self, cls, name, private_only=False, **kwargs)
     |      Register the field with the model class it belongs to.
     |      
     |      If private_only is True, create a separate instance of this field
     |      for every subclass of cls, even if cls is not an abstract model.
     |  
     |  ggeett__eexxttrraa__ddeessccrriippttoorr__ffiilltteerr(self, instance)
     |      Return an extra filter condition for related object fetching when
     |      user does 'instance.fieldname', that is the extra filter is used in
     |      the descriptor of the field.
     |      
     |      The filter should be either a dict usable in .filter(**kwargs) call or
     |      a Q-object. The condition will be ANDed together with the relation's
     |      joining columns.
     |      
     |      A parallel method is get_extra_restriction() which is used in
     |      JOIN and subquery conditions.
     |  
     |  ggeett__eexxttrraa__rreessttrriiccttiioonn(self, where_class, alias, related_alias)
     |      Return a pair condition used for joining and subquery pushdown. The
     |      condition is something that responds to as_sql(compiler, connection)
     |      method.
     |      
     |      Note that currently referring both the 'alias' and 'related_alias'
     |      will not work in some conditions, like subquery pushdown.
     |      
     |      A parallel method is get_extra_descriptor_filter() which is used in
     |      instance.fieldname related object fetching.
     |  
     |  ggeett__ffoorreeiiggnn__rreellaatteedd__vvaalluuee(self, instance)
     |  
     |  ggeett__jjooiinniinngg__ccoolluummnnss(self, reverse_join=False)
     |  
     |  ggeett__llooccaall__rreellaatteedd__vvaalluuee(self, instance)
     |  
     |  ggeett__ppaatthh__iinnffoo(self, filtered_relation=None)
     |      Get path from this field to the related model.
     |  
     |  ggeett__rreevveerrssee__jjooiinniinngg__ccoolluummnnss(self)
     |  
     |  rreessoollvvee__rreellaatteedd__ffiieellddss(self)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from ForeignObject:
     |  
     |  ggeett__llooookkuuppss() from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from ForeignObject:
     |  
     |  ggeett__iinnssttaannccee__vvaalluuee__ffoorr__ffiieellddss(instance, fields)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ForeignObject:
     |  
     |  ffoorreeiiggnn__rreellaatteedd__ffiieellddss
     |  
     |  llooccaall__rreellaatteedd__ffiieellddss
     |  
     |  rreellaatteedd__ffiieellddss
     |  
     |  rreevveerrssee__rreellaatteedd__ffiieellddss
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from ForeignObject:
     |  
     |  ccllaassss__llooookkuuppss = {'exact': <class 'django.db.models.fields.related_look...
     |  
     |  rreeqquuiirreess__uunniiqquuee__ttaarrggeett = True
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from RelatedField:
     |  
     |  ddoo__rreellaatteedd__ccllaassss(self, other, cls)
     |  
     |  ggeett__ccaacchhee__nnaammee(self)
     |  
     |  ggeett__ffoorrwwaarrdd__rreellaatteedd__ffiilltteerr(self, obj)
     |      Return the keyword arguments that when supplied to
     |      self.model.object.filter(), would select all instances related through
     |      this field to the remote obj. This is used to build the querysets
     |      returned by related descriptors. obj is an instance of
     |      self.related_field.model.
     |  
     |  ggeett__lliimmiitt__cchhooiicceess__ttoo(self)
     |      Return ``limit_choices_to`` for this model field.
     |      
     |      If it is a callable, it will be invoked and the result will be
     |      returned.
     |  
     |  ggeett__rreevveerrssee__rreellaatteedd__ffiilltteerr(self, obj)
     |      Complement to get_forward_related_filter(). Return the keyword
     |      arguments that when passed to self.related_field.model.object.filter()
     |      select all instances of self.related_field.model related through
     |      this field to obj. obj is an instance of self.model.
     |  
     |  rreellaatteedd__mmooddeell = <django.utils.functional.cached_property object>
     |  rreellaatteedd__qquueerryy__nnaammee(self)
     |      Define the name that can be used to identify this related object in a
     |      table-spanning query.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__rreell(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from RelatedField:
     |  
     |  sswwaappppaabbllee__sseettttiinngg
     |      Get the setting that this is powered from for swapping, or None
     |      if it's not swapped in / marked with swappable=False.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.fields.mixins.FieldCacheMixin:
     |  
     |  ddeelleettee__ccaacchheedd__vvaalluuee(self, instance)
     |  
     |  ggeett__ccaacchheedd__vvaalluuee(self, instance, default=<object object at 0x7f5792241230>)
     |  
     |  iiss__ccaacchheedd(self, instance)
     |  
     |  sseett__ccaacchheedd__vvaalluuee(self, instance, value)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.fields.mixins.FieldCacheMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.fields.Field:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memodict)
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggee____(self, other, NotImplemented=NotImplemented)
     |      Return a >= b.  Computed by @total_ordering from (not a < b).
     |  
     |  ____ggtt____(self, other, NotImplemented=NotImplemented)
     |      Return a > b.  Computed by @total_ordering from (not a < b) and (a != b).
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____llee____(self, other, NotImplemented=NotImplemented)
     |      Return a <= b.  Computed by @total_ordering from (a < b) or (a == b).
     |  
     |  ____lltt____(self, other)
     |      Return self<value.
     |  
     |  ____rreedduuccee____(self)
     |      Pickling should return the model._meta.fields instance of the field,
     |      not a new copy of that field. So, use the app registry to load the
     |      model and then the field back.
     |  
     |  ____rreepprr____(self)
     |      Display the module, class, and name of the field.
     |  
     |  ____ssttrr____(self)
     |      Return "app_label.model_label.field_name" for fields attached to
     |      models.
     |  
     |  ccaacchheedd__ccooll = <django.utils.functional.cached_property object>
     |  ccaasstt__ddbb__ttyyppee(self, connection)
     |      Return the data type to use in the Cast() function.
     |  
     |  cclleeaann(self, value, model_instance)
     |      Convert the value's type and run validation. Validation errors
     |      from to_python() and validate() are propagated. Return the correct
     |      value if no error is raised.
     |  
     |  cclloonnee(self)
     |      Uses deconstruct() to clone a new copy of this Field.
     |      Will not preserve any class attachments/attribute names.
     |  
     |  ddbb__ttyyppee__ppaarraammeetteerrss(self, connection)
     |  
     |  ddbb__ttyyppee__ssuuffffiixx(self, connection)
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], limit_choices_to=None, ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |  
     |  ggeett__ffiilltteerr__kkwwaarrggss__ffoorr__oobbjjeecctt(self, obj)
     |      Return a dict that when passed as kwargs to self.model.filter(), would
     |      yield all instances having the same value for this field as obj has.
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  ggeett__ppkk__vvaalluuee__oonn__ssaavvee(self, instance)
     |      Hook to generate new PK values on save. This method is called when
     |      saving instances with no primary key value set. If this method returns
     |      something else than None, then the returned value is used when saving
     |      the new instance.
     |  
     |  ggeett__pprreepp__vvaalluuee(self, value)
     |      Perform preliminary non-db specific value checks and conversions.
     |  
     |  hhaass__ddeeffaauulltt(self)
     |      Return a boolean of whether this field has a default value.
     |  
     |  pprree__ssaavvee(self, model_instance, add)
     |      Return field's value just before saving.
     |  
     |  rreell__ddbb__ttyyppee(self, connection)
     |      Return the data type that a related field pointing to this field should
     |      use. For example, this method is called by ForeignKey and OneToOneField
     |      to determine its data type.
     |  
     |  rruunn__vvaalliiddaattoorrss(self, value)
     |  
     |  sseelleecctt__ffoorrmmaatt(self, compiler, sql, params)
     |      Custom format for select clauses. For example, GIS columns need to be
     |      selected as AsText(table.col) on MySQL as the table.col data can't be
     |      used by Django.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__nnaammee(self, name)
     |  
     |  vvaalliiddaattoorrss = <django.utils.functional.cached_property object>
     |  vvaalluuee__ffrroomm__oobbjjeecctt(self, obj)
     |      Return the value of this field in the given model instance.
     |  
     |  vvaalluuee__ttoo__ssttrriinngg(self, obj)
     |      Return a string value of this field from the passed obj.
     |      This is used by the serialization framework.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.fields.Field:
     |  
     |  ddbb__ttaabblleessppaaccee
     |  
     |  ffllaattcchhooiicceess
     |      Flattened version of choices tuple.
     |  
     |  uunniiqquuee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.db.models.fields.Field:
     |  
     |  aauuttoo__ccrreeaattiioonn__ccoouunntteerr = -13
     |  
     |  ccrreeaattiioonn__ccoouunntteerr = 74
     |  
     |  ddeeffaauulltt__vvaalliiddaattoorrss = []
     |  
     |  eemmppttyy__vvaalluueess = [None, '', [], (), {}]
     |  
     |  hhiiddddeenn = False
     |  
     |  ssyysstteemm__cchheecckk__ddeepprreeccaatteedd__ddeettaaiillss = None
     |  
     |  ssyysstteemm__cchheecckk__rreemmoovveedd__ddeettaaiillss = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ttrraannssffoorrmm(self, lookup_name)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  rreeggiisstteerr__llooookkuupp(lookup, lookup_name=None) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  mmeerrggee__ddiiccttss(dicts)
     |      Merge dicts in reverse to preference the order of the original list. e.g.,
     |      merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.
    
    class OOnneeTTooOOnneeRReell(ManyToOneRel)
     |  OneToOneRel(field, to, field_name, related_name=None, related_query_name=None, limit_choices_to=None, parent_link=False, on_delete=None)
     |  
     |  Used by OneToOneField to store information about the relation.
     |  
     |  ``_meta.get_fields()`` returns this class to provide access to the field
     |  flags for the reverse relation.
     |  
     |  Method resolution order:
     |      OneToOneRel
     |      ManyToOneRel
     |      ForeignObjectRel
     |      django.db.models.fields.mixins.FieldCacheMixin
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, field, to, field_name, related_name=None, related_query_name=None, limit_choices_to=None, parent_link=False, on_delete=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ManyToOneRel:
     |  
     |  ____ggeettssttaattee____(self)
     |  
     |  ggeett__rreellaatteedd__ffiieelldd(self)
     |      Return the Field in the 'to' object to which this relationship is tied.
     |  
     |  sseett__ffiieelldd__nnaammee(self)
     |      Set the related field's name, this is not available until later stages
     |      of app loading, so set_field_name is called from
     |      set_attributes_from_rel()
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ForeignObjectRel:
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ggeett__aacccceessssoorr__nnaammee(self, model=None)
     |  
     |  ggeett__ccaacchhee__nnaammee(self)
     |      Return the name of the cache key to use for storing an instance of the
     |      forward model on the reverse model.
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |      
     |      Analog of django.db.models.fields.Field.get_choices(), provided
     |      initially for utilization by RelatedFieldListFilter.
     |  
     |  ggeett__eexxttrraa__rreessttrriiccttiioonn(self, where_class, alias, related_alias)
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  ggeett__jjooiinniinngg__ccoolluummnnss(self)
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ppaatthh__iinnffoo(self, filtered_relation=None)
     |  
     |  hhiiddddeenn = <django.utils.functional.cached_property object>
     |  iiss__hhiiddddeenn(self)
     |      Should the related object be hidden?
     |  
     |  mmaannyy__ttoo__mmaannyy = <django.utils.functional.cached_property object>
     |  mmaannyy__ttoo__oonnee = <django.utils.functional.cached_property object>
     |  nnaammee = <django.utils.functional.cached_property object>
     |  oonnee__ttoo__mmaannyy = <django.utils.functional.cached_property object>
     |  oonnee__ttoo__oonnee = <django.utils.functional.cached_property object>
     |  rreellaatteedd__mmooddeell = <django.utils.functional.cached_property object>
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ForeignObjectRel:
     |  
     |  ddbb__ttyyppee
     |  
     |  rreemmoottee__ffiieelldd
     |  
     |  ttaarrggeett__ffiieelldd
     |      When filtering against this relation, return the field on the remote
     |      model against which the filtering should happen.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from ForeignObjectRel:
     |  
     |  aauuttoo__ccrreeaatteedd = True
     |  
     |  ccoonnccrreettee = False
     |  
     |  eeddiittaabbllee = False
     |  
     |  iiss__rreellaattiioonn = True
     |  
     |  nnuullll = True
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.fields.mixins.FieldCacheMixin:
     |  
     |  ddeelleettee__ccaacchheedd__vvaalluuee(self, instance)
     |  
     |  ggeett__ccaacchheedd__vvaalluuee(self, instance, default=<object object at 0x7f5792241230>)
     |  
     |  iiss__ccaacchheedd(self, instance)
     |  
     |  sseett__ccaacchheedd__vvaalluuee(self, instance, value)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.fields.mixins.FieldCacheMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class OOrrddeerrWWrrtt(django.db.models.fields.IntegerField)
     |  OrderWrt(*args, **kwargs)
     |  
     |  A proxy for the _order database field that is used when
     |  Meta.order_with_respect_to is specified.
     |  
     |  Method resolution order:
     |      OrderWrt
     |      django.db.models.fields.IntegerField
     |      django.db.models.fields.Field
     |      django.db.models.query_utils.RegisterLookupMixin
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.fields.IntegerField:
     |  
     |  cchheecckk(self, **kwargs)
     |  
     |  ffoorrmmffiieelldd(self, **kwargs)
     |      Return a django.forms.Field instance for this field.
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  ggeett__pprreepp__vvaalluuee(self, value)
     |      Perform preliminary non-db specific value checks and conversions.
     |  
     |  ttoo__ppyytthhoonn(self, value)
     |      Convert the input value into the expected Python data type, raising
     |      django.core.exceptions.ValidationError if the data can't be converted.
     |      Return the converted value. Subclasses should override this.
     |  
     |  vvaalliiddaattoorrss = <django.utils.functional.cached_property object>
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.db.models.fields.IntegerField:
     |  
     |  ccllaassss__llooookkuuppss = {'gte': <class 'django.db.models.lookups.IntegerGreate...
     |  
     |  ddeeffaauulltt__eerrrroorr__mmeessssaaggeess = {'invalid': "'%(value)s' value must be an int...
     |  
     |  ddeessccrriippttiioonn = 'Integer'
     |  
     |  eemmppttyy__ssttrriinnggss__aalllloowweedd = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.fields.Field:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memodict)
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggee____(self, other, NotImplemented=NotImplemented)
     |      Return a >= b.  Computed by @total_ordering from (not a < b).
     |  
     |  ____ggtt____(self, other, NotImplemented=NotImplemented)
     |      Return a > b.  Computed by @total_ordering from (not a < b) and (a != b).
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____llee____(self, other, NotImplemented=NotImplemented)
     |      Return a <= b.  Computed by @total_ordering from (a < b) or (a == b).
     |  
     |  ____lltt____(self, other)
     |      Return self<value.
     |  
     |  ____rreedduuccee____(self)
     |      Pickling should return the model._meta.fields instance of the field,
     |      not a new copy of that field. So, use the app registry to load the
     |      model and then the field back.
     |  
     |  ____rreepprr____(self)
     |      Display the module, class, and name of the field.
     |  
     |  ____ssttrr____(self)
     |      Return "app_label.model_label.field_name" for fields attached to
     |      models.
     |  
     |  ccaacchheedd__ccooll = <django.utils.functional.cached_property object>
     |  ccaasstt__ddbb__ttyyppee(self, connection)
     |      Return the data type to use in the Cast() function.
     |  
     |  cclleeaann(self, value, model_instance)
     |      Convert the value's type and run validation. Validation errors
     |      from to_python() and validate() are propagated. Return the correct
     |      value if no error is raised.
     |  
     |  cclloonnee(self)
     |      Uses deconstruct() to clone a new copy of this Field.
     |      Will not preserve any class attachments/attribute names.
     |  
     |  ccoonnttrriibbuuttee__ttoo__ccllaassss(self, cls, name, private_only=False)
     |      Register the field with the model class it belongs to.
     |      
     |      If private_only is True, create a separate instance of this field
     |      for every subclass of cls, even if cls is not an abstract model.
     |  
     |  ddbb__cchheecckk(self, connection)
     |      Return the database column check constraint for this field, for the
     |      provided connection. Works the same way as db_type() for the case that
     |      get_internal_type() does not map to a preexisting model field.
     |  
     |  ddbb__ppaarraammeetteerrss(self, connection)
     |      Extension of db_type(), providing a range of different return values
     |      (type, checks). This will look at db_type(), allowing custom model
     |      fields to override it.
     |  
     |  ddbb__ttyyppee(self, connection)
     |      Return the database column data type for this field, for the provided
     |      connection.
     |  
     |  ddbb__ttyyppee__ppaarraammeetteerrss(self, connection)
     |  
     |  ddbb__ttyyppee__ssuuffffiixx(self, connection)
     |  
     |  ddeeccoonnssttrruucctt(self)
     |      Return enough information to recreate the field as a 4-tuple:
     |      
     |       * The name of the field on the model, if contribute_to_class() has
     |         been run.
     |       * The import path of the field, including the class:e.g.
     |         django.db.models.IntegerField This should be the most portable
     |         version, so less specific may be better.
     |       * A list of positional arguments.
     |       * A dict of keyword arguments.
     |      
     |      Note that the positional or keyword arguments must contain values of
     |      the following types (including inner values of collection types):
     |      
     |       * None, bool, str, int, float, complex, set, frozenset, list, tuple,
     |         dict
     |       * UUID
     |       * datetime.datetime (naive), datetime.date
     |       * top-level classes, top-level functions - will be referenced by their
     |         full import path
     |       * Storage instances - these have their own deconstruct() method
     |      
     |      This is because the values here must be serialized into a text format
     |      (possibly new Python code, possibly JSON) and these are the only types
     |      with encoding handlers defined.
     |      
     |      There's no need to return the exact way the field was instantiated this
     |      time, just ensure that the resulting field is the same - prefer keyword
     |      arguments over positional ones, and omit parameters with their default
     |      values.
     |  
     |  ggeett__aattttnnaammee(self)
     |  
     |  ggeett__aattttnnaammee__ccoolluummnn(self)
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], limit_choices_to=None, ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |  
     |  ggeett__ccooll(self, alias, output_field=None)
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ddbb__pprreepp__ssaavvee(self, value, connection)
     |      Return field's value prepared for saving into a database.
     |  
     |  ggeett__ddbb__pprreepp__vvaalluuee(self, value, connection, prepared=False)
     |      Return field's value prepared for interacting with the database backend.
     |      
     |      Used by the default implementations of get_db_prep_save().
     |  
     |  ggeett__ddeeffaauulltt(self)
     |      Return the default value for this field.
     |  
     |  ggeett__ffiilltteerr__kkwwaarrggss__ffoorr__oobbjjeecctt(self, obj)
     |      Return a dict that when passed as kwargs to self.model.filter(), would
     |      yield all instances having the same value for this field as obj has.
     |  
     |  ggeett__ppkk__vvaalluuee__oonn__ssaavvee(self, instance)
     |      Hook to generate new PK values on save. This method is called when
     |      saving instances with no primary key value set. If this method returns
     |      something else than None, then the returned value is used when saving
     |      the new instance.
     |  
     |  hhaass__ddeeffaauulltt(self)
     |      Return a boolean of whether this field has a default value.
     |  
     |  pprree__ssaavvee(self, model_instance, add)
     |      Return field's value just before saving.
     |  
     |  rreell__ddbb__ttyyppee(self, connection)
     |      Return the data type that a related field pointing to this field should
     |      use. For example, this method is called by ForeignKey and OneToOneField
     |      to determine its data type.
     |  
     |  rruunn__vvaalliiddaattoorrss(self, value)
     |  
     |  ssaavvee__ffoorrmm__ddaattaa(self, instance, data)
     |  
     |  sseelleecctt__ffoorrmmaatt(self, compiler, sql, params)
     |      Custom format for select clauses. For example, GIS columns need to be
     |      selected as AsText(table.col) on MySQL as the table.col data can't be
     |      used by Django.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__nnaammee(self, name)
     |  
     |  vvaalliiddaattee(self, value, model_instance)
     |      Validate value and raise ValidationError if necessary. Subclasses
     |      should override this to provide validation logic.
     |  
     |  vvaalluuee__ffrroomm__oobbjjeecctt(self, obj)
     |      Return the value of this field in the given model instance.
     |  
     |  vvaalluuee__ttoo__ssttrriinngg(self, obj)
     |      Return a string value of this field from the passed obj.
     |      This is used by the serialization framework.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.fields.Field:
     |  
     |  ddbb__ttaabblleessppaaccee
     |  
     |  ffllaattcchhooiicceess
     |      Flattened version of choices tuple.
     |  
     |  uunniiqquuee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.db.models.fields.Field:
     |  
     |  aauuttoo__ccrreeaattiioonn__ccoouunntteerr = -13
     |  
     |  ccrreeaattiioonn__ccoouunntteerr = 74
     |  
     |  ddeeffaauulltt__vvaalliiddaattoorrss = []
     |  
     |  eemmppttyy__vvaalluueess = [None, '', [], (), {}]
     |  
     |  hhiiddddeenn = False
     |  
     |  mmaannyy__ttoo__mmaannyy = None
     |  
     |  mmaannyy__ttoo__oonnee = None
     |  
     |  oonnee__ttoo__mmaannyy = None
     |  
     |  oonnee__ttoo__oonnee = None
     |  
     |  rreellaatteedd__mmooddeell = None
     |  
     |  ssyysstteemm__cchheecckk__ddeepprreeccaatteedd__ddeettaaiillss = None
     |  
     |  ssyysstteemm__cchheecckk__rreemmoovveedd__ddeettaaiillss = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ttrraannssffoorrmm(self, lookup_name)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuuppss() from builtins.type
     |  
     |  rreeggiisstteerr__llooookkuupp(lookup, lookup_name=None) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  mmeerrggee__ddiiccttss(dicts)
     |      Merge dicts in reverse to preference the order of the original list. e.g.,
     |      merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class OOuutteerrRReeff(F)
     |  OuterRef(*args, **kwargs)
     |  
     |  An object capable of resolving references to existing query objects.
     |  
     |  Method resolution order:
     |      OuterRef
     |      F
     |      Combinable
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  rreessoollvvee__eexxpprreessssiioonn(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False, simple_col=False)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from F:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____iinniitt____(self, name)
     |      Arguments:
     |       * name: the name of the field this expression references
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  aasscc(self, **kwargs)
     |  
     |  ddeeccoonnssttrruucctt(obj)
     |      Return a 3-tuple of class import path, positional arguments,
     |      and keyword arguments.
     |  
     |  ddeesscc(self, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from F:
     |  
     |  ____nneeww____(cls, *args, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from F:
     |  
     |  ffiilltteerraabbllee = True
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Combinable:
     |  
     |  ____aadddd____(self, other)
     |  
     |  ____aanndd____(self, other)
     |  
     |  ____mmoodd____(self, other)
     |  
     |  ____mmuull____(self, other)
     |  
     |  ____nneegg____(self)
     |  
     |  ____oorr____(self, other)
     |  
     |  ____ppooww____(self, other)
     |  
     |  ____rraadddd____(self, other)
     |  
     |  ____rraanndd____(self, other)
     |  
     |  ____rrmmoodd____(self, other)
     |  
     |  ____rrmmuull____(self, other)
     |  
     |  ____rroorr____(self, other)
     |  
     |  ____rrppooww____(self, other)
     |  
     |  ____rrssuubb____(self, other)
     |  
     |  ____rrttrruueeddiivv____(self, other)
     |  
     |  ____ssuubb____(self, other)
     |  
     |  ____ttrruueeddiivv____(self, other)
     |  
     |  bbiittaanndd(self, other)
     |  
     |  bbiittlleeffttsshhiifftt(self, other)
     |  
     |  bbiittoorr(self, other)
     |  
     |  bbiittrriigghhttsshhiifftt(self, other)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Combinable:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Combinable:
     |  
     |  AADDDD = '+'
     |  
     |  BBIITTAANNDD = '&'
     |  
     |  BBIITTLLEEFFTTSSHHIIFFTT = '<<'
     |  
     |  BBIITTOORR = '|'
     |  
     |  BBIITTRRIIGGHHTTSSHHIIFFTT = '>>'
     |  
     |  DDIIVV = '/'
     |  
     |  MMOODD = '%%'
     |  
     |  MMUULL = '*'
     |  
     |  PPOOWW = '^'
     |  
     |  SSUUBB = '-'
    
    class PPoossiittiivveeIInntteeggeerrFFiieelldd(PositiveIntegerRelDbTypeMixin, IntegerField)
     |  PositiveIntegerField(verbose_name=None, name=None, primary_key=False, max_length=None, unique=False, blank=False, null=False, db_index=False, rel=None, default=<class 'django.db.models.fields.NOT_PROVIDED'>, editable=True, serialize=True, unique_for_date=None, unique_for_month=None, unique_for_year=None, choices=None, help_text='', db_column=None, db_tablespace=None, auto_created=False, validators=(), error_messages=None)
     |  
     |  Base class for all field types
     |  
     |  Method resolution order:
     |      PositiveIntegerField
     |      PositiveIntegerRelDbTypeMixin
     |      IntegerField
     |      Field
     |      django.db.models.query_utils.RegisterLookupMixin
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ffoorrmmffiieelldd(self, **kwargs)
     |      Return a django.forms.Field instance for this field.
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ddeessccrriippttiioonn = 'Positive integer'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PositiveIntegerRelDbTypeMixin:
     |  
     |  rreell__ddbb__ttyyppee(self, connection)
     |      Return the data type that a related field pointing to this field should
     |      use. In most cases, a foreign key pointing to a positive integer
     |      primary key will have an integer column data type but some databases
     |      (e.g. MySQL) have an unsigned integer type. In that case
     |      (related_fields_match_type=True), the primary key should return its
     |      db_type.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PositiveIntegerRelDbTypeMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from IntegerField:
     |  
     |  cchheecckk(self, **kwargs)
     |  
     |  ggeett__pprreepp__vvaalluuee(self, value)
     |      Perform preliminary non-db specific value checks and conversions.
     |  
     |  ttoo__ppyytthhoonn(self, value)
     |      Convert the input value into the expected Python data type, raising
     |      django.core.exceptions.ValidationError if the data can't be converted.
     |      Return the converted value. Subclasses should override this.
     |  
     |  vvaalliiddaattoorrss = <django.utils.functional.cached_property object>
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from IntegerField:
     |  
     |  ccllaassss__llooookkuuppss = {'gte': <class 'django.db.models.lookups.IntegerGreate...
     |  
     |  ddeeffaauulltt__eerrrroorr__mmeessssaaggeess = {'invalid': "'%(value)s' value must be an int...
     |  
     |  eemmppttyy__ssttrriinnggss__aalllloowweedd = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Field:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memodict)
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggee____(self, other, NotImplemented=NotImplemented)
     |      Return a >= b.  Computed by @total_ordering from (not a < b).
     |  
     |  ____ggtt____(self, other, NotImplemented=NotImplemented)
     |      Return a > b.  Computed by @total_ordering from (not a < b) and (a != b).
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____iinniitt____(self, verbose_name=None, name=None, primary_key=False, max_length=None, unique=False, blank=False, null=False, db_index=False, rel=None, default=<class 'django.db.models.fields.NOT_PROVIDED'>, editable=True, serialize=True, unique_for_date=None, unique_for_month=None, unique_for_year=None, choices=None, help_text='', db_column=None, db_tablespace=None, auto_created=False, validators=(), error_messages=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____llee____(self, other, NotImplemented=NotImplemented)
     |      Return a <= b.  Computed by @total_ordering from (a < b) or (a == b).
     |  
     |  ____lltt____(self, other)
     |      Return self<value.
     |  
     |  ____rreedduuccee____(self)
     |      Pickling should return the model._meta.fields instance of the field,
     |      not a new copy of that field. So, use the app registry to load the
     |      model and then the field back.
     |  
     |  ____rreepprr____(self)
     |      Display the module, class, and name of the field.
     |  
     |  ____ssttrr____(self)
     |      Return "app_label.model_label.field_name" for fields attached to
     |      models.
     |  
     |  ccaacchheedd__ccooll = <django.utils.functional.cached_property object>
     |  ccaasstt__ddbb__ttyyppee(self, connection)
     |      Return the data type to use in the Cast() function.
     |  
     |  cclleeaann(self, value, model_instance)
     |      Convert the value's type and run validation. Validation errors
     |      from to_python() and validate() are propagated. Return the correct
     |      value if no error is raised.
     |  
     |  cclloonnee(self)
     |      Uses deconstruct() to clone a new copy of this Field.
     |      Will not preserve any class attachments/attribute names.
     |  
     |  ccoonnttrriibbuuttee__ttoo__ccllaassss(self, cls, name, private_only=False)
     |      Register the field with the model class it belongs to.
     |      
     |      If private_only is True, create a separate instance of this field
     |      for every subclass of cls, even if cls is not an abstract model.
     |  
     |  ddbb__cchheecckk(self, connection)
     |      Return the database column check constraint for this field, for the
     |      provided connection. Works the same way as db_type() for the case that
     |      get_internal_type() does not map to a preexisting model field.
     |  
     |  ddbb__ppaarraammeetteerrss(self, connection)
     |      Extension of db_type(), providing a range of different return values
     |      (type, checks). This will look at db_type(), allowing custom model
     |      fields to override it.
     |  
     |  ddbb__ttyyppee(self, connection)
     |      Return the database column data type for this field, for the provided
     |      connection.
     |  
     |  ddbb__ttyyppee__ppaarraammeetteerrss(self, connection)
     |  
     |  ddbb__ttyyppee__ssuuffffiixx(self, connection)
     |  
     |  ddeeccoonnssttrruucctt(self)
     |      Return enough information to recreate the field as a 4-tuple:
     |      
     |       * The name of the field on the model, if contribute_to_class() has
     |         been run.
     |       * The import path of the field, including the class:e.g.
     |         django.db.models.IntegerField This should be the most portable
     |         version, so less specific may be better.
     |       * A list of positional arguments.
     |       * A dict of keyword arguments.
     |      
     |      Note that the positional or keyword arguments must contain values of
     |      the following types (including inner values of collection types):
     |      
     |       * None, bool, str, int, float, complex, set, frozenset, list, tuple,
     |         dict
     |       * UUID
     |       * datetime.datetime (naive), datetime.date
     |       * top-level classes, top-level functions - will be referenced by their
     |         full import path
     |       * Storage instances - these have their own deconstruct() method
     |      
     |      This is because the values here must be serialized into a text format
     |      (possibly new Python code, possibly JSON) and these are the only types
     |      with encoding handlers defined.
     |      
     |      There's no need to return the exact way the field was instantiated this
     |      time, just ensure that the resulting field is the same - prefer keyword
     |      arguments over positional ones, and omit parameters with their default
     |      values.
     |  
     |  ggeett__aattttnnaammee(self)
     |  
     |  ggeett__aattttnnaammee__ccoolluummnn(self)
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], limit_choices_to=None, ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |  
     |  ggeett__ccooll(self, alias, output_field=None)
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ddbb__pprreepp__ssaavvee(self, value, connection)
     |      Return field's value prepared for saving into a database.
     |  
     |  ggeett__ddbb__pprreepp__vvaalluuee(self, value, connection, prepared=False)
     |      Return field's value prepared for interacting with the database backend.
     |      
     |      Used by the default implementations of get_db_prep_save().
     |  
     |  ggeett__ddeeffaauulltt(self)
     |      Return the default value for this field.
     |  
     |  ggeett__ffiilltteerr__kkwwaarrggss__ffoorr__oobbjjeecctt(self, obj)
     |      Return a dict that when passed as kwargs to self.model.filter(), would
     |      yield all instances having the same value for this field as obj has.
     |  
     |  ggeett__ppkk__vvaalluuee__oonn__ssaavvee(self, instance)
     |      Hook to generate new PK values on save. This method is called when
     |      saving instances with no primary key value set. If this method returns
     |      something else than None, then the returned value is used when saving
     |      the new instance.
     |  
     |  hhaass__ddeeffaauulltt(self)
     |      Return a boolean of whether this field has a default value.
     |  
     |  pprree__ssaavvee(self, model_instance, add)
     |      Return field's value just before saving.
     |  
     |  rruunn__vvaalliiddaattoorrss(self, value)
     |  
     |  ssaavvee__ffoorrmm__ddaattaa(self, instance, data)
     |  
     |  sseelleecctt__ffoorrmmaatt(self, compiler, sql, params)
     |      Custom format for select clauses. For example, GIS columns need to be
     |      selected as AsText(table.col) on MySQL as the table.col data can't be
     |      used by Django.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__nnaammee(self, name)
     |  
     |  vvaalliiddaattee(self, value, model_instance)
     |      Validate value and raise ValidationError if necessary. Subclasses
     |      should override this to provide validation logic.
     |  
     |  vvaalluuee__ffrroomm__oobbjjeecctt(self, obj)
     |      Return the value of this field in the given model instance.
     |  
     |  vvaalluuee__ttoo__ssttrriinngg(self, obj)
     |      Return a string value of this field from the passed obj.
     |      This is used by the serialization framework.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Field:
     |  
     |  ddbb__ttaabblleessppaaccee
     |  
     |  ffllaattcchhooiicceess
     |      Flattened version of choices tuple.
     |  
     |  uunniiqquuee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Field:
     |  
     |  aauuttoo__ccrreeaattiioonn__ccoouunntteerr = -13
     |  
     |  ccrreeaattiioonn__ccoouunntteerr = 74
     |  
     |  ddeeffaauulltt__vvaalliiddaattoorrss = []
     |  
     |  eemmppttyy__vvaalluueess = [None, '', [], (), {}]
     |  
     |  hhiiddddeenn = False
     |  
     |  mmaannyy__ttoo__mmaannyy = None
     |  
     |  mmaannyy__ttoo__oonnee = None
     |  
     |  oonnee__ttoo__mmaannyy = None
     |  
     |  oonnee__ttoo__oonnee = None
     |  
     |  rreellaatteedd__mmooddeell = None
     |  
     |  ssyysstteemm__cchheecckk__ddeepprreeccaatteedd__ddeettaaiillss = None
     |  
     |  ssyysstteemm__cchheecckk__rreemmoovveedd__ddeettaaiillss = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ttrraannssffoorrmm(self, lookup_name)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuuppss() from builtins.type
     |  
     |  rreeggiisstteerr__llooookkuupp(lookup, lookup_name=None) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  mmeerrggee__ddiiccttss(dicts)
     |      Merge dicts in reverse to preference the order of the original list. e.g.,
     |      merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.
    
    class PPoossiittiivveeSSmmaallllIInntteeggeerrFFiieelldd(PositiveIntegerRelDbTypeMixin, IntegerField)
     |  PositiveSmallIntegerField(verbose_name=None, name=None, primary_key=False, max_length=None, unique=False, blank=False, null=False, db_index=False, rel=None, default=<class 'django.db.models.fields.NOT_PROVIDED'>, editable=True, serialize=True, unique_for_date=None, unique_for_month=None, unique_for_year=None, choices=None, help_text='', db_column=None, db_tablespace=None, auto_created=False, validators=(), error_messages=None)
     |  
     |  Base class for all field types
     |  
     |  Method resolution order:
     |      PositiveSmallIntegerField
     |      PositiveIntegerRelDbTypeMixin
     |      IntegerField
     |      Field
     |      django.db.models.query_utils.RegisterLookupMixin
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ffoorrmmffiieelldd(self, **kwargs)
     |      Return a django.forms.Field instance for this field.
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ddeessccrriippttiioonn = 'Positive small integer'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PositiveIntegerRelDbTypeMixin:
     |  
     |  rreell__ddbb__ttyyppee(self, connection)
     |      Return the data type that a related field pointing to this field should
     |      use. In most cases, a foreign key pointing to a positive integer
     |      primary key will have an integer column data type but some databases
     |      (e.g. MySQL) have an unsigned integer type. In that case
     |      (related_fields_match_type=True), the primary key should return its
     |      db_type.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PositiveIntegerRelDbTypeMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from IntegerField:
     |  
     |  cchheecckk(self, **kwargs)
     |  
     |  ggeett__pprreepp__vvaalluuee(self, value)
     |      Perform preliminary non-db specific value checks and conversions.
     |  
     |  ttoo__ppyytthhoonn(self, value)
     |      Convert the input value into the expected Python data type, raising
     |      django.core.exceptions.ValidationError if the data can't be converted.
     |      Return the converted value. Subclasses should override this.
     |  
     |  vvaalliiddaattoorrss = <django.utils.functional.cached_property object>
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from IntegerField:
     |  
     |  ccllaassss__llooookkuuppss = {'gte': <class 'django.db.models.lookups.IntegerGreate...
     |  
     |  ddeeffaauulltt__eerrrroorr__mmeessssaaggeess = {'invalid': "'%(value)s' value must be an int...
     |  
     |  eemmppttyy__ssttrriinnggss__aalllloowweedd = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Field:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memodict)
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggee____(self, other, NotImplemented=NotImplemented)
     |      Return a >= b.  Computed by @total_ordering from (not a < b).
     |  
     |  ____ggtt____(self, other, NotImplemented=NotImplemented)
     |      Return a > b.  Computed by @total_ordering from (not a < b) and (a != b).
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____iinniitt____(self, verbose_name=None, name=None, primary_key=False, max_length=None, unique=False, blank=False, null=False, db_index=False, rel=None, default=<class 'django.db.models.fields.NOT_PROVIDED'>, editable=True, serialize=True, unique_for_date=None, unique_for_month=None, unique_for_year=None, choices=None, help_text='', db_column=None, db_tablespace=None, auto_created=False, validators=(), error_messages=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____llee____(self, other, NotImplemented=NotImplemented)
     |      Return a <= b.  Computed by @total_ordering from (a < b) or (a == b).
     |  
     |  ____lltt____(self, other)
     |      Return self<value.
     |  
     |  ____rreedduuccee____(self)
     |      Pickling should return the model._meta.fields instance of the field,
     |      not a new copy of that field. So, use the app registry to load the
     |      model and then the field back.
     |  
     |  ____rreepprr____(self)
     |      Display the module, class, and name of the field.
     |  
     |  ____ssttrr____(self)
     |      Return "app_label.model_label.field_name" for fields attached to
     |      models.
     |  
     |  ccaacchheedd__ccooll = <django.utils.functional.cached_property object>
     |  ccaasstt__ddbb__ttyyppee(self, connection)
     |      Return the data type to use in the Cast() function.
     |  
     |  cclleeaann(self, value, model_instance)
     |      Convert the value's type and run validation. Validation errors
     |      from to_python() and validate() are propagated. Return the correct
     |      value if no error is raised.
     |  
     |  cclloonnee(self)
     |      Uses deconstruct() to clone a new copy of this Field.
     |      Will not preserve any class attachments/attribute names.
     |  
     |  ccoonnttrriibbuuttee__ttoo__ccllaassss(self, cls, name, private_only=False)
     |      Register the field with the model class it belongs to.
     |      
     |      If private_only is True, create a separate instance of this field
     |      for every subclass of cls, even if cls is not an abstract model.
     |  
     |  ddbb__cchheecckk(self, connection)
     |      Return the database column check constraint for this field, for the
     |      provided connection. Works the same way as db_type() for the case that
     |      get_internal_type() does not map to a preexisting model field.
     |  
     |  ddbb__ppaarraammeetteerrss(self, connection)
     |      Extension of db_type(), providing a range of different return values
     |      (type, checks). This will look at db_type(), allowing custom model
     |      fields to override it.
     |  
     |  ddbb__ttyyppee(self, connection)
     |      Return the database column data type for this field, for the provided
     |      connection.
     |  
     |  ddbb__ttyyppee__ppaarraammeetteerrss(self, connection)
     |  
     |  ddbb__ttyyppee__ssuuffffiixx(self, connection)
     |  
     |  ddeeccoonnssttrruucctt(self)
     |      Return enough information to recreate the field as a 4-tuple:
     |      
     |       * The name of the field on the model, if contribute_to_class() has
     |         been run.
     |       * The import path of the field, including the class:e.g.
     |         django.db.models.IntegerField This should be the most portable
     |         version, so less specific may be better.
     |       * A list of positional arguments.
     |       * A dict of keyword arguments.
     |      
     |      Note that the positional or keyword arguments must contain values of
     |      the following types (including inner values of collection types):
     |      
     |       * None, bool, str, int, float, complex, set, frozenset, list, tuple,
     |         dict
     |       * UUID
     |       * datetime.datetime (naive), datetime.date
     |       * top-level classes, top-level functions - will be referenced by their
     |         full import path
     |       * Storage instances - these have their own deconstruct() method
     |      
     |      This is because the values here must be serialized into a text format
     |      (possibly new Python code, possibly JSON) and these are the only types
     |      with encoding handlers defined.
     |      
     |      There's no need to return the exact way the field was instantiated this
     |      time, just ensure that the resulting field is the same - prefer keyword
     |      arguments over positional ones, and omit parameters with their default
     |      values.
     |  
     |  ggeett__aattttnnaammee(self)
     |  
     |  ggeett__aattttnnaammee__ccoolluummnn(self)
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], limit_choices_to=None, ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |  
     |  ggeett__ccooll(self, alias, output_field=None)
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ddbb__pprreepp__ssaavvee(self, value, connection)
     |      Return field's value prepared for saving into a database.
     |  
     |  ggeett__ddbb__pprreepp__vvaalluuee(self, value, connection, prepared=False)
     |      Return field's value prepared for interacting with the database backend.
     |      
     |      Used by the default implementations of get_db_prep_save().
     |  
     |  ggeett__ddeeffaauulltt(self)
     |      Return the default value for this field.
     |  
     |  ggeett__ffiilltteerr__kkwwaarrggss__ffoorr__oobbjjeecctt(self, obj)
     |      Return a dict that when passed as kwargs to self.model.filter(), would
     |      yield all instances having the same value for this field as obj has.
     |  
     |  ggeett__ppkk__vvaalluuee__oonn__ssaavvee(self, instance)
     |      Hook to generate new PK values on save. This method is called when
     |      saving instances with no primary key value set. If this method returns
     |      something else than None, then the returned value is used when saving
     |      the new instance.
     |  
     |  hhaass__ddeeffaauulltt(self)
     |      Return a boolean of whether this field has a default value.
     |  
     |  pprree__ssaavvee(self, model_instance, add)
     |      Return field's value just before saving.
     |  
     |  rruunn__vvaalliiddaattoorrss(self, value)
     |  
     |  ssaavvee__ffoorrmm__ddaattaa(self, instance, data)
     |  
     |  sseelleecctt__ffoorrmmaatt(self, compiler, sql, params)
     |      Custom format for select clauses. For example, GIS columns need to be
     |      selected as AsText(table.col) on MySQL as the table.col data can't be
     |      used by Django.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__nnaammee(self, name)
     |  
     |  vvaalliiddaattee(self, value, model_instance)
     |      Validate value and raise ValidationError if necessary. Subclasses
     |      should override this to provide validation logic.
     |  
     |  vvaalluuee__ffrroomm__oobbjjeecctt(self, obj)
     |      Return the value of this field in the given model instance.
     |  
     |  vvaalluuee__ttoo__ssttrriinngg(self, obj)
     |      Return a string value of this field from the passed obj.
     |      This is used by the serialization framework.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Field:
     |  
     |  ddbb__ttaabblleessppaaccee
     |  
     |  ffllaattcchhooiicceess
     |      Flattened version of choices tuple.
     |  
     |  uunniiqquuee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Field:
     |  
     |  aauuttoo__ccrreeaattiioonn__ccoouunntteerr = -13
     |  
     |  ccrreeaattiioonn__ccoouunntteerr = 74
     |  
     |  ddeeffaauulltt__vvaalliiddaattoorrss = []
     |  
     |  eemmppttyy__vvaalluueess = [None, '', [], (), {}]
     |  
     |  hhiiddddeenn = False
     |  
     |  mmaannyy__ttoo__mmaannyy = None
     |  
     |  mmaannyy__ttoo__oonnee = None
     |  
     |  oonnee__ttoo__mmaannyy = None
     |  
     |  oonnee__ttoo__oonnee = None
     |  
     |  rreellaatteedd__mmooddeell = None
     |  
     |  ssyysstteemm__cchheecckk__ddeepprreeccaatteedd__ddeettaaiillss = None
     |  
     |  ssyysstteemm__cchheecckk__rreemmoovveedd__ddeettaaiillss = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ttrraannssffoorrmm(self, lookup_name)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuuppss() from builtins.type
     |  
     |  rreeggiisstteerr__llooookkuupp(lookup, lookup_name=None) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  mmeerrggee__ddiiccttss(dicts)
     |      Merge dicts in reverse to preference the order of the original list. e.g.,
     |      merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.
    
    class PPrreeffeettcchh(builtins.object)
     |  Prefetch(lookup, queryset=None, to_attr=None)
     |  
     |  Methods defined here:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettssttaattee____(self)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____iinniitt____(self, lookup, queryset=None, to_attr=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  aadddd__pprreeffiixx(self, prefix)
     |  
     |  ggeett__ccuurrrreenntt__pprreeffeettcchh__ttoo(self, level)
     |  
     |  ggeett__ccuurrrreenntt__qquueerryysseett(self, level)
     |  
     |  ggeett__ccuurrrreenntt__ttoo__aattttrr(self, level)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class PPrrootteecctteeddEErrrroorr(django.db.utils.IntegrityError)
     |  ProtectedError(msg, protected_objects)
     |  
     |  Common base class for all non-exit exceptions.
     |  
     |  Method resolution order:
     |      ProtectedError
     |      django.db.utils.IntegrityError
     |      django.db.utils.DatabaseError
     |      django.db.utils.Error
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, msg, protected_objects)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.utils.Error:
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |  
     |  ____nneeww____(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  ____ddeellaattttrr____(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  ____ggeettaattttrriibbuuttee____(self, name, /)
     |      Return getattr(self, name).
     |  
     |  ____rreedduuccee____(...)
     |      Helper for pickle.
     |  
     |  ____rreepprr____(self, /)
     |      Return repr(self).
     |  
     |  ____sseettaattttrr____(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  ____sseettssttaattee____(...)
     |  
     |  ____ssttrr____(self, /)
     |      Return str(self).
     |  
     |  wwiitthh__ttrraacceebbaacckk(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  ____ccaauussee____
     |      exception cause
     |  
     |  ____ccoonntteexxtt____
     |      exception context
     |  
     |  ____ddiicctt____
     |  
     |  ____ssuupppprreessss__ccoonntteexxtt____
     |  
     |  ____ttrraacceebbaacckk____
     |  
     |  aarrggss
    
    class QQ(django.utils.tree.Node)
     |  Q(*args, _connector=None, _negated=False, **kwargs)
     |  
     |  Encapsulate filters as objects that can then be combined logically (using
     |  `&` and `|`).
     |  
     |  Method resolution order:
     |      Q
     |      django.utils.tree.Node
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____aanndd____(self, other)
     |  
     |  ____iinniitt____(self, *args, _connector=None, _negated=False, **kwargs)
     |      Construct a new Node. If no connector is given, use the default.
     |  
     |  ____iinnvveerrtt____(self)
     |  
     |  ____oorr____(self, other)
     |  
     |  ddeeccoonnssttrruucctt(self)
     |  
     |  rreessoollvvee__eexxpprreessssiioonn(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  AANNDD = 'AND'
     |  
     |  OORR = 'OR'
     |  
     |  ccoonnddiittiioonnaall = True
     |  
     |  ddeeffaauulltt = 'AND'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.utils.tree.Node:
     |  
     |  ____bbooooll____(self)
     |      Return whether or not this node has children.
     |  
     |  ____ccoonnttaaiinnss____(self, other)
     |      Return True if 'other' is a direct child of this instance.
     |  
     |  ____ddeeeeppccooppyy____(self, memodict)
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____lleenn____(self)
     |      Return the number of children this node has.
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  aadddd(self, data, conn_type, squash=True)
     |      Combine this tree and the data represented by data using the
     |      connector conn_type. The combine is done by squashing the node other
     |      away if possible.
     |      
     |      This tree (self) will never be pushed to a child node of the
     |      combined tree, nor will the connector or negated properties change.
     |      
     |      Return a node which can be used in place of data regardless if the
     |      node other got squashed or not.
     |      
     |      If `squash` is False the data is prepared and added as a child to
     |      this tree without further logic.
     |  
     |  nneeggaattee(self)
     |      Negate the sense of the root connector.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.utils.tree.Node:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class QQuueerryySSeett(builtins.object)
     |  QuerySet(model=None, query=None, using=None, hints=None)
     |  
     |  Represent a lazy database lookup for a set of objects.
     |  
     |  Methods defined here:
     |  
     |  ____aanndd____(self, other)
     |  
     |  ____bbooooll____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memo)
     |      Don't populate the QuerySet's cache.
     |  
     |  ____ggeettiitteemm____(self, k)
     |      Retrieve an item or slice from the set of results.
     |  
     |  ____ggeettssttaattee____(self)
     |  
     |  ____iinniitt____(self, model=None, query=None, using=None, hints=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____iitteerr____(self)
     |      The queryset iterator protocol uses three nested iterators in the
     |      default case:
     |          1. sql.compiler.execute_sql()
     |             - Returns 100 rows at time (constants.GET_ITERATOR_CHUNK_SIZE)
     |               using cursor.fetchmany(). This part is responsible for
     |               doing some column masking, and returning the rows in chunks.
     |          2. sql.compiler.results_iter()
     |             - Returns one row at time. At this point the rows are still just
     |               tuples. In some cases the return values are converted to
     |               Python values at this location.
     |          3. self.iterator()
     |             - Responsible for turning the rows into model objects.
     |  
     |  ____lleenn____(self)
     |  
     |  ____oorr____(self, other)
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ____sseettssttaattee____(self, state)
     |  
     |  aaggggrreeggaattee(self, *args, **kwargs)
     |      Return a dictionary containing the calculations (aggregation)
     |      over the current queryset.
     |      
     |      If args is present the expression is passed as a kwarg using
     |      the Aggregate object's default alias.
     |  
     |  aallll(self)
     |      Return a new QuerySet that is a copy of the current one. This allows a
     |      QuerySet to proxy for a model manager in some cases.
     |  
     |  aannnnoottaattee(self, *args, **kwargs)
     |      Return a query set in which the returned objects have been annotated
     |      with extra data or aggregations.
     |  
     |  bbuullkk__ccrreeaattee(self, objs, batch_size=None, ignore_conflicts=False)
     |      Insert each of the instances into the database. Do *not* call
     |      save() on each of the instances, do not send any pre/post_save
     |      signals, and do not set the primary key attribute if it is an
     |      autoincrement field (except if features.can_return_ids_from_bulk_insert=True).
     |      Multi-table models are not supported.
     |  
     |  bbuullkk__uuppddaattee(self, objs, fields, batch_size=None)
     |      Update the given fields in each of the given objects in the database.
     |  
     |  ccoommpplleexx__ffiilltteerr(self, filter_obj)
     |      Return a new QuerySet instance with filter_obj added to the filters.
     |      
     |      filter_obj can be a Q object or a dictionary of keyword lookup
     |      arguments.
     |      
     |      This exists to support framework features such as 'limit_choices_to',
     |      and usually it will be more natural to use other methods.
     |  
     |  ccoouunntt(self)
     |      Perform a SELECT COUNT() and return the number of records as an
     |      integer.
     |      
     |      If the QuerySet is already fully cached, return the length of the
     |      cached results set to avoid multiple SELECT COUNT(*) calls.
     |  
     |  ccrreeaattee(self, **kwargs)
     |      Create a new object with the given kwargs, saving it to the database
     |      and returning the created object.
     |  
     |  ddaatteess(self, field_name, kind, order='ASC')
     |      Return a list of date objects representing all available dates for
     |      the given field_name, scoped to 'kind'.
     |  
     |  ddaatteettiimmeess(self, field_name, kind, order='ASC', tzinfo=None)
     |      Return a list of datetime objects representing all available
     |      datetimes for the given field_name, scoped to 'kind'.
     |  
     |  ddeeffeerr(self, *fields)
     |      Defer the loading of data for certain fields until they are accessed.
     |      Add the set of deferred fields to any existing set of deferred fields.
     |      The only exception to this is if None is passed in as the only
     |      parameter, in which case removal all deferrals.
     |  
     |  ddeelleettee(self)
     |      Delete the records in the current QuerySet.
     |  
     |  ddiiffffeerreennccee(self, *other_qs)
     |  
     |  ddiissttiinncctt(self, *field_names)
     |      Return a new QuerySet instance that will select only distinct results.
     |  
     |  eeaarrlliieesstt(self, *fields, field_name=None)
     |  
     |  eexxcclluuddee(self, *args, **kwargs)
     |      Return a new QuerySet instance with NOT (args) ANDed to the existing
     |      set.
     |  
     |  eexxiissttss(self)
     |  
     |  eexxppllaaiinn(self, *, format=None, **options)
     |  
     |  eexxttrraa(self, select=None, where=None, params=None, tables=None, order_by=None, select_params=None)
     |      Add extra SQL fragments to the query.
     |  
     |  ffiilltteerr(self, *args, **kwargs)
     |      Return a new QuerySet instance with the args ANDed to the existing
     |      set.
     |  
     |  ffiirrsstt(self)
     |      Return the first object of a query or None if no match is found.
     |  
     |  ggeett(self, *args, **kwargs)
     |      Perform the query and return a single object matching the given
     |      keyword arguments.
     |  
     |  ggeett__oorr__ccrreeaattee(self, defaults=None, **kwargs)
     |      Look up an object with the given kwargs, creating one if necessary.
     |      Return a tuple of (object, created), where created is a boolean
     |      specifying whether an object was created.
     |  
     |  iinn__bbuullkk(self, id_list=None, *, field_name='pk')
     |      Return a dictionary mapping each of the given IDs to the object with
     |      that ID. If `id_list` isn't provided, evaluate the entire QuerySet.
     |  
     |  iinntteerrsseeccttiioonn(self, *other_qs)
     |  
     |  iitteerraattoorr(self, chunk_size=2000)
     |      An iterator over the results from applying this QuerySet to the
     |      database.
     |  
     |  llaasstt(self)
     |      Return the last object of a query or None if no match is found.
     |  
     |  llaatteesstt(self, *fields, field_name=None)
     |  
     |  nnoonnee(self)
     |      Return an empty QuerySet.
     |  
     |  oonnllyy(self, *fields)
     |      Essentially, the opposite of defer(). Only the fields passed into this
     |      method and that are not already specified as deferred are loaded
     |      immediately when the queryset is evaluated.
     |  
     |  oorrddeerr__bbyy(self, *field_names)
     |      Return a new QuerySet instance with the ordering changed.
     |  
     |  pprreeffeettcchh__rreellaatteedd(self, *lookups)
     |      Return a new QuerySet instance that will prefetch the specified
     |      Many-To-One and Many-To-Many related objects when the QuerySet is
     |      evaluated.
     |      
     |      When prefetch_related() is called more than once, append to the list of
     |      prefetch lookups. If prefetch_related(None) is called, clear the list.
     |  
     |  rraaww(self, raw_query, params=None, translations=None, using=None)
     |  
     |  rreessoollvvee__eexxpprreessssiioonn(self, *args, **kwargs)
     |  
     |  rreevveerrssee(self)
     |      Reverse the ordering of the QuerySet.
     |  
     |  sseelleecctt__ffoorr__uuppddaattee(self, nowait=False, skip_locked=False, of=())
     |      Return a new QuerySet instance that will select objects with a
     |      FOR UPDATE lock.
     |  
     |  sseelleecctt__rreellaatteedd(self, *fields)
     |      Return a new QuerySet instance that will select related objects.
     |      
     |      If fields are specified, they must be ForeignKey fields and only those
     |      related objects are included in the selection.
     |      
     |      If select_related(None) is called, clear the list.
     |  
     |  uunniioonn(self, *other_qs, all=False)
     |  
     |  uuppddaattee(self, **kwargs)
     |      Update all elements in the current QuerySet, setting all the given
     |      fields to the appropriate values.
     |  
     |  uuppddaattee__oorr__ccrreeaattee(self, defaults=None, **kwargs)
     |      Look up an object with the given kwargs, updating one with defaults
     |      if it exists, otherwise create a new one.
     |      Return a tuple (object, created), where created is a boolean
     |      specifying whether an object was created.
     |  
     |  uussiinngg(self, alias)
     |      Select which database this QuerySet should execute against.
     |  
     |  vvaalluueess(self, *fields, **expressions)
     |  
     |  vvaalluueess__lliisstt(self, *fields, flat=False, named=False)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  aass__mmaannaaggeerr() from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ddbb
     |      Return the database used if this query is executed now.
     |  
     |  oorrddeerreedd
     |      Return True if the QuerySet is ordered -- i.e. has an order_by()
     |      clause or a default ordering on the model (or is empty).
    
    class RRoowwRRaannggee(WindowFrame)
     |  RowRange(*args, **kwargs)
     |  
     |  Model the frame clause in window expressions. There are two types of frame
     |  clauses which are subclasses, however, all processing and validation (by no
     |  means intended to be complete) is done here. Thus, providing an end for a
     |  frame is optional (the default is UNBOUNDED FOLLOWING, which is the last
     |  row in the frame).
     |  
     |  Method resolution order:
     |      RowRange
     |      WindowFrame
     |      Expression
     |      BaseExpression
     |      Combinable
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  wwiinnddooww__ffrraammee__ssttaarrtt__eenndd(self, connection, start, end)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ffrraammee__ttyyppee = 'ROWS'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from WindowFrame:
     |  
     |  ____iinniitt____(self, start=None, end=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  aass__ssqqll(self, compiler, connection)
     |      Responsible for returning a (sql, [params]) tuple to be included
     |      in the current query.
     |      
     |      Different backends can provide their own implementation, by
     |      providing an `as_{vendor}` method and patching the Expression:
     |      
     |      ```
     |      def override_as_sql(self, compiler, connection):
     |          # custom logic
     |          return super().as_sql(compiler, connection)
     |      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
     |      ```
     |      
     |      Arguments:
     |       * compiler: the query compiler responsible for generating the query.
     |         Must have a compile method, returning a (sql, [params]) tuple.
     |         Calling compiler(value) will return a quoted `value`.
     |      
     |       * connection: the database connection used for the current query.
     |      
     |      Return: (sql, params)
     |        Where `sql` is a string containing ordered sql parameters to be
     |        replaced with the elements of the list `params`.
     |  
     |  ggeett__ggrroouupp__bbyy__ccoollss(self)
     |  
     |  ggeett__ssoouurrccee__eexxpprreessssiioonnss(self)
     |  
     |  sseett__ssoouurrccee__eexxpprreessssiioonnss(self, exprs)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from WindowFrame:
     |  
     |  tteemmppllaattee = '%(frame_type)s BETWEEN %(start)s AND %(end)s'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseExpression:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettssttaattee____(self)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  aasscc(self, **kwargs)
     |  
     |  ccoonnttaaiinnss__aaggggrreeggaattee = <django.utils.functional.cached_property object>
     |  ccoonnttaaiinnss__ccoolluummnn__rreeffeerreenncceess = <django.utils.functional.cached_property object>
     |  ccoonnttaaiinnss__oovveerr__ccllaauussee = <django.utils.functional.cached_property object>
     |  ccoonnvveerrtt__vvaalluuee = <django.utils.functional.cached_property object>
     |  ccooppyy(self)
     |  
     |  ddeeccoonnssttrruucctt(obj)
     |      Return a 3-tuple of class import path, positional arguments,
     |      and keyword arguments.
     |  
     |  ddeesscc(self, **kwargs)
     |  
     |  ffllaatttteenn(self)
     |      Recursively yield this expression and all subexpressions, in
     |      depth-first order.
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__llooookkuupp(self, lookup)
     |  
     |  ggeett__ssoouurrccee__ffiieellddss(self)
     |      Return the underlying field types used by this aggregate.
     |  
     |  ggeett__ttrraannssffoorrmm(self, name)
     |  
     |  iiddeennttiittyy = <django.utils.functional.cached_property object>
     |  oouuttppuutt__ffiieelldd = <django.utils.functional.cached_property object>
     |  rreellaabbeelleedd__cclloonnee(self, change_map)
     |  
     |  rreessoollvvee__eexxpprreessssiioonn(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)
     |      Provide the chance to do any preprocessing or validation before being
     |      added to the query.
     |      
     |      Arguments:
     |       * query: the backend query implementation
     |       * allow_joins: boolean allowing or denying use of joins
     |         in this query
     |       * reuse: a set of reusable joins for multijoins
     |       * summarize: a terminal aggregate clause
     |       * for_save: whether this expression about to be used in a save or update
     |      
     |      Return: an Expression to be added to the query.
     |  
     |  rreevveerrssee__oorrddeerriinngg(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from BaseExpression:
     |  
     |  ____nneeww____(cls, *args, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseExpression:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ffiieelldd
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from BaseExpression:
     |  
     |  ffiilltteerraabbllee = True
     |  
     |  iiss__ssuummmmaarryy = False
     |  
     |  wwiinnddooww__ccoommppaattiibbllee = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Combinable:
     |  
     |  ____aadddd____(self, other)
     |  
     |  ____aanndd____(self, other)
     |  
     |  ____mmoodd____(self, other)
     |  
     |  ____mmuull____(self, other)
     |  
     |  ____nneegg____(self)
     |  
     |  ____oorr____(self, other)
     |  
     |  ____ppooww____(self, other)
     |  
     |  ____rraadddd____(self, other)
     |  
     |  ____rraanndd____(self, other)
     |  
     |  ____rrmmoodd____(self, other)
     |  
     |  ____rrmmuull____(self, other)
     |  
     |  ____rroorr____(self, other)
     |  
     |  ____rrppooww____(self, other)
     |  
     |  ____rrssuubb____(self, other)
     |  
     |  ____rrttrruueeddiivv____(self, other)
     |  
     |  ____ssuubb____(self, other)
     |  
     |  ____ttrruueeddiivv____(self, other)
     |  
     |  bbiittaanndd(self, other)
     |  
     |  bbiittlleeffttsshhiifftt(self, other)
     |  
     |  bbiittoorr(self, other)
     |  
     |  bbiittrriigghhttsshhiifftt(self, other)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Combinable:
     |  
     |  AADDDD = '+'
     |  
     |  BBIITTAANNDD = '&'
     |  
     |  BBIITTLLEEFFTTSSHHIIFFTT = '<<'
     |  
     |  BBIITTOORR = '|'
     |  
     |  BBIITTRRIIGGHHTTSSHHIIFFTT = '>>'
     |  
     |  DDIIVV = '/'
     |  
     |  MMOODD = '%%'
     |  
     |  MMUULL = '*'
     |  
     |  PPOOWW = '^'
     |  
     |  SSUUBB = '-'
    
    class SSlluuggFFiieelldd(CharField)
     |  SlugField(*args, max_length=50, db_index=True, allow_unicode=False, **kwargs)
     |  
     |  Base class for all field types
     |  
     |  Method resolution order:
     |      SlugField
     |      CharField
     |      Field
     |      django.db.models.query_utils.RegisterLookupMixin
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, *args, max_length=50, db_index=True, allow_unicode=False, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ddeeccoonnssttrruucctt(self)
     |      Return enough information to recreate the field as a 4-tuple:
     |      
     |       * The name of the field on the model, if contribute_to_class() has
     |         been run.
     |       * The import path of the field, including the class:e.g.
     |         django.db.models.IntegerField This should be the most portable
     |         version, so less specific may be better.
     |       * A list of positional arguments.
     |       * A dict of keyword arguments.
     |      
     |      Note that the positional or keyword arguments must contain values of
     |      the following types (including inner values of collection types):
     |      
     |       * None, bool, str, int, float, complex, set, frozenset, list, tuple,
     |         dict
     |       * UUID
     |       * datetime.datetime (naive), datetime.date
     |       * top-level classes, top-level functions - will be referenced by their
     |         full import path
     |       * Storage instances - these have their own deconstruct() method
     |      
     |      This is because the values here must be serialized into a text format
     |      (possibly new Python code, possibly JSON) and these are the only types
     |      with encoding handlers defined.
     |      
     |      There's no need to return the exact way the field was instantiated this
     |      time, just ensure that the resulting field is the same - prefer keyword
     |      arguments over positional ones, and omit parameters with their default
     |      values.
     |  
     |  ffoorrmmffiieelldd(self, **kwargs)
     |      Return a django.forms.Field instance for this field.
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ddeeffaauulltt__vvaalliiddaattoorrss = [<django.core.validators.RegexValidator object>]
     |  
     |  ddeessccrriippttiioonn = 'Slug (up to %(max_length)s)'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from CharField:
     |  
     |  ccaasstt__ddbb__ttyyppee(self, connection)
     |      Return the data type to use in the Cast() function.
     |  
     |  cchheecckk(self, **kwargs)
     |  
     |  ggeett__pprreepp__vvaalluuee(self, value)
     |      Perform preliminary non-db specific value checks and conversions.
     |  
     |  ttoo__ppyytthhoonn(self, value)
     |      Convert the input value into the expected Python data type, raising
     |      django.core.exceptions.ValidationError if the data can't be converted.
     |      Return the converted value. Subclasses should override this.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Field:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memodict)
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggee____(self, other, NotImplemented=NotImplemented)
     |      Return a >= b.  Computed by @total_ordering from (not a < b).
     |  
     |  ____ggtt____(self, other, NotImplemented=NotImplemented)
     |      Return a > b.  Computed by @total_ordering from (not a < b) and (a != b).
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____llee____(self, other, NotImplemented=NotImplemented)
     |      Return a <= b.  Computed by @total_ordering from (a < b) or (a == b).
     |  
     |  ____lltt____(self, other)
     |      Return self<value.
     |  
     |  ____rreedduuccee____(self)
     |      Pickling should return the model._meta.fields instance of the field,
     |      not a new copy of that field. So, use the app registry to load the
     |      model and then the field back.
     |  
     |  ____rreepprr____(self)
     |      Display the module, class, and name of the field.
     |  
     |  ____ssttrr____(self)
     |      Return "app_label.model_label.field_name" for fields attached to
     |      models.
     |  
     |  ccaacchheedd__ccooll = <django.utils.functional.cached_property object>
     |  cclleeaann(self, value, model_instance)
     |      Convert the value's type and run validation. Validation errors
     |      from to_python() and validate() are propagated. Return the correct
     |      value if no error is raised.
     |  
     |  cclloonnee(self)
     |      Uses deconstruct() to clone a new copy of this Field.
     |      Will not preserve any class attachments/attribute names.
     |  
     |  ccoonnttrriibbuuttee__ttoo__ccllaassss(self, cls, name, private_only=False)
     |      Register the field with the model class it belongs to.
     |      
     |      If private_only is True, create a separate instance of this field
     |      for every subclass of cls, even if cls is not an abstract model.
     |  
     |  ddbb__cchheecckk(self, connection)
     |      Return the database column check constraint for this field, for the
     |      provided connection. Works the same way as db_type() for the case that
     |      get_internal_type() does not map to a preexisting model field.
     |  
     |  ddbb__ppaarraammeetteerrss(self, connection)
     |      Extension of db_type(), providing a range of different return values
     |      (type, checks). This will look at db_type(), allowing custom model
     |      fields to override it.
     |  
     |  ddbb__ttyyppee(self, connection)
     |      Return the database column data type for this field, for the provided
     |      connection.
     |  
     |  ddbb__ttyyppee__ppaarraammeetteerrss(self, connection)
     |  
     |  ddbb__ttyyppee__ssuuffffiixx(self, connection)
     |  
     |  ggeett__aattttnnaammee(self)
     |  
     |  ggeett__aattttnnaammee__ccoolluummnn(self)
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], limit_choices_to=None, ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |  
     |  ggeett__ccooll(self, alias, output_field=None)
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ddbb__pprreepp__ssaavvee(self, value, connection)
     |      Return field's value prepared for saving into a database.
     |  
     |  ggeett__ddbb__pprreepp__vvaalluuee(self, value, connection, prepared=False)
     |      Return field's value prepared for interacting with the database backend.
     |      
     |      Used by the default implementations of get_db_prep_save().
     |  
     |  ggeett__ddeeffaauulltt(self)
     |      Return the default value for this field.
     |  
     |  ggeett__ffiilltteerr__kkwwaarrggss__ffoorr__oobbjjeecctt(self, obj)
     |      Return a dict that when passed as kwargs to self.model.filter(), would
     |      yield all instances having the same value for this field as obj has.
     |  
     |  ggeett__ppkk__vvaalluuee__oonn__ssaavvee(self, instance)
     |      Hook to generate new PK values on save. This method is called when
     |      saving instances with no primary key value set. If this method returns
     |      something else than None, then the returned value is used when saving
     |      the new instance.
     |  
     |  hhaass__ddeeffaauulltt(self)
     |      Return a boolean of whether this field has a default value.
     |  
     |  pprree__ssaavvee(self, model_instance, add)
     |      Return field's value just before saving.
     |  
     |  rreell__ddbb__ttyyppee(self, connection)
     |      Return the data type that a related field pointing to this field should
     |      use. For example, this method is called by ForeignKey and OneToOneField
     |      to determine its data type.
     |  
     |  rruunn__vvaalliiddaattoorrss(self, value)
     |  
     |  ssaavvee__ffoorrmm__ddaattaa(self, instance, data)
     |  
     |  sseelleecctt__ffoorrmmaatt(self, compiler, sql, params)
     |      Custom format for select clauses. For example, GIS columns need to be
     |      selected as AsText(table.col) on MySQL as the table.col data can't be
     |      used by Django.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__nnaammee(self, name)
     |  
     |  vvaalliiddaattee(self, value, model_instance)
     |      Validate value and raise ValidationError if necessary. Subclasses
     |      should override this to provide validation logic.
     |  
     |  vvaalliiddaattoorrss = <django.utils.functional.cached_property object>
     |  vvaalluuee__ffrroomm__oobbjjeecctt(self, obj)
     |      Return the value of this field in the given model instance.
     |  
     |  vvaalluuee__ttoo__ssttrriinngg(self, obj)
     |      Return a string value of this field from the passed obj.
     |      This is used by the serialization framework.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Field:
     |  
     |  ddbb__ttaabblleessppaaccee
     |  
     |  ffllaattcchhooiicceess
     |      Flattened version of choices tuple.
     |  
     |  uunniiqquuee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Field:
     |  
     |  aauuttoo__ccrreeaattiioonn__ccoouunntteerr = -13
     |  
     |  ccllaassss__llooookkuuppss = {'contains': <class 'django.db.models.lookups.Contains...
     |  
     |  ccrreeaattiioonn__ccoouunntteerr = 74
     |  
     |  ddeeffaauulltt__eerrrroorr__mmeessssaaggeess = {'blank': 'This field cannot be blank.', 'inv...
     |  
     |  eemmppttyy__ssttrriinnggss__aalllloowweedd = True
     |  
     |  eemmppttyy__vvaalluueess = [None, '', [], (), {}]
     |  
     |  hhiiddddeenn = False
     |  
     |  mmaannyy__ttoo__mmaannyy = None
     |  
     |  mmaannyy__ttoo__oonnee = None
     |  
     |  oonnee__ttoo__mmaannyy = None
     |  
     |  oonnee__ttoo__oonnee = None
     |  
     |  rreellaatteedd__mmooddeell = None
     |  
     |  ssyysstteemm__cchheecckk__ddeepprreeccaatteedd__ddeettaaiillss = None
     |  
     |  ssyysstteemm__cchheecckk__rreemmoovveedd__ddeettaaiillss = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ttrraannssffoorrmm(self, lookup_name)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuuppss() from builtins.type
     |  
     |  rreeggiisstteerr__llooookkuupp(lookup, lookup_name=None) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  mmeerrggee__ddiiccttss(dicts)
     |      Merge dicts in reverse to preference the order of the original list. e.g.,
     |      merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class SSmmaallllIInntteeggeerrFFiieelldd(IntegerField)
     |  SmallIntegerField(verbose_name=None, name=None, primary_key=False, max_length=None, unique=False, blank=False, null=False, db_index=False, rel=None, default=<class 'django.db.models.fields.NOT_PROVIDED'>, editable=True, serialize=True, unique_for_date=None, unique_for_month=None, unique_for_year=None, choices=None, help_text='', db_column=None, db_tablespace=None, auto_created=False, validators=(), error_messages=None)
     |  
     |  Base class for all field types
     |  
     |  Method resolution order:
     |      SmallIntegerField
     |      IntegerField
     |      Field
     |      django.db.models.query_utils.RegisterLookupMixin
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ddeessccrriippttiioonn = 'Small integer'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from IntegerField:
     |  
     |  cchheecckk(self, **kwargs)
     |  
     |  ffoorrmmffiieelldd(self, **kwargs)
     |      Return a django.forms.Field instance for this field.
     |  
     |  ggeett__pprreepp__vvaalluuee(self, value)
     |      Perform preliminary non-db specific value checks and conversions.
     |  
     |  ttoo__ppyytthhoonn(self, value)
     |      Convert the input value into the expected Python data type, raising
     |      django.core.exceptions.ValidationError if the data can't be converted.
     |      Return the converted value. Subclasses should override this.
     |  
     |  vvaalliiddaattoorrss = <django.utils.functional.cached_property object>
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from IntegerField:
     |  
     |  ccllaassss__llooookkuuppss = {'gte': <class 'django.db.models.lookups.IntegerGreate...
     |  
     |  ddeeffaauulltt__eerrrroorr__mmeessssaaggeess = {'invalid': "'%(value)s' value must be an int...
     |  
     |  eemmppttyy__ssttrriinnggss__aalllloowweedd = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Field:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memodict)
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggee____(self, other, NotImplemented=NotImplemented)
     |      Return a >= b.  Computed by @total_ordering from (not a < b).
     |  
     |  ____ggtt____(self, other, NotImplemented=NotImplemented)
     |      Return a > b.  Computed by @total_ordering from (not a < b) and (a != b).
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____iinniitt____(self, verbose_name=None, name=None, primary_key=False, max_length=None, unique=False, blank=False, null=False, db_index=False, rel=None, default=<class 'django.db.models.fields.NOT_PROVIDED'>, editable=True, serialize=True, unique_for_date=None, unique_for_month=None, unique_for_year=None, choices=None, help_text='', db_column=None, db_tablespace=None, auto_created=False, validators=(), error_messages=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____llee____(self, other, NotImplemented=NotImplemented)
     |      Return a <= b.  Computed by @total_ordering from (a < b) or (a == b).
     |  
     |  ____lltt____(self, other)
     |      Return self<value.
     |  
     |  ____rreedduuccee____(self)
     |      Pickling should return the model._meta.fields instance of the field,
     |      not a new copy of that field. So, use the app registry to load the
     |      model and then the field back.
     |  
     |  ____rreepprr____(self)
     |      Display the module, class, and name of the field.
     |  
     |  ____ssttrr____(self)
     |      Return "app_label.model_label.field_name" for fields attached to
     |      models.
     |  
     |  ccaacchheedd__ccooll = <django.utils.functional.cached_property object>
     |  ccaasstt__ddbb__ttyyppee(self, connection)
     |      Return the data type to use in the Cast() function.
     |  
     |  cclleeaann(self, value, model_instance)
     |      Convert the value's type and run validation. Validation errors
     |      from to_python() and validate() are propagated. Return the correct
     |      value if no error is raised.
     |  
     |  cclloonnee(self)
     |      Uses deconstruct() to clone a new copy of this Field.
     |      Will not preserve any class attachments/attribute names.
     |  
     |  ccoonnttrriibbuuttee__ttoo__ccllaassss(self, cls, name, private_only=False)
     |      Register the field with the model class it belongs to.
     |      
     |      If private_only is True, create a separate instance of this field
     |      for every subclass of cls, even if cls is not an abstract model.
     |  
     |  ddbb__cchheecckk(self, connection)
     |      Return the database column check constraint for this field, for the
     |      provided connection. Works the same way as db_type() for the case that
     |      get_internal_type() does not map to a preexisting model field.
     |  
     |  ddbb__ppaarraammeetteerrss(self, connection)
     |      Extension of db_type(), providing a range of different return values
     |      (type, checks). This will look at db_type(), allowing custom model
     |      fields to override it.
     |  
     |  ddbb__ttyyppee(self, connection)
     |      Return the database column data type for this field, for the provided
     |      connection.
     |  
     |  ddbb__ttyyppee__ppaarraammeetteerrss(self, connection)
     |  
     |  ddbb__ttyyppee__ssuuffffiixx(self, connection)
     |  
     |  ddeeccoonnssttrruucctt(self)
     |      Return enough information to recreate the field as a 4-tuple:
     |      
     |       * The name of the field on the model, if contribute_to_class() has
     |         been run.
     |       * The import path of the field, including the class:e.g.
     |         django.db.models.IntegerField This should be the most portable
     |         version, so less specific may be better.
     |       * A list of positional arguments.
     |       * A dict of keyword arguments.
     |      
     |      Note that the positional or keyword arguments must contain values of
     |      the following types (including inner values of collection types):
     |      
     |       * None, bool, str, int, float, complex, set, frozenset, list, tuple,
     |         dict
     |       * UUID
     |       * datetime.datetime (naive), datetime.date
     |       * top-level classes, top-level functions - will be referenced by their
     |         full import path
     |       * Storage instances - these have their own deconstruct() method
     |      
     |      This is because the values here must be serialized into a text format
     |      (possibly new Python code, possibly JSON) and these are the only types
     |      with encoding handlers defined.
     |      
     |      There's no need to return the exact way the field was instantiated this
     |      time, just ensure that the resulting field is the same - prefer keyword
     |      arguments over positional ones, and omit parameters with their default
     |      values.
     |  
     |  ggeett__aattttnnaammee(self)
     |  
     |  ggeett__aattttnnaammee__ccoolluummnn(self)
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], limit_choices_to=None, ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |  
     |  ggeett__ccooll(self, alias, output_field=None)
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ddbb__pprreepp__ssaavvee(self, value, connection)
     |      Return field's value prepared for saving into a database.
     |  
     |  ggeett__ddbb__pprreepp__vvaalluuee(self, value, connection, prepared=False)
     |      Return field's value prepared for interacting with the database backend.
     |      
     |      Used by the default implementations of get_db_prep_save().
     |  
     |  ggeett__ddeeffaauulltt(self)
     |      Return the default value for this field.
     |  
     |  ggeett__ffiilltteerr__kkwwaarrggss__ffoorr__oobbjjeecctt(self, obj)
     |      Return a dict that when passed as kwargs to self.model.filter(), would
     |      yield all instances having the same value for this field as obj has.
     |  
     |  ggeett__ppkk__vvaalluuee__oonn__ssaavvee(self, instance)
     |      Hook to generate new PK values on save. This method is called when
     |      saving instances with no primary key value set. If this method returns
     |      something else than None, then the returned value is used when saving
     |      the new instance.
     |  
     |  hhaass__ddeeffaauulltt(self)
     |      Return a boolean of whether this field has a default value.
     |  
     |  pprree__ssaavvee(self, model_instance, add)
     |      Return field's value just before saving.
     |  
     |  rreell__ddbb__ttyyppee(self, connection)
     |      Return the data type that a related field pointing to this field should
     |      use. For example, this method is called by ForeignKey and OneToOneField
     |      to determine its data type.
     |  
     |  rruunn__vvaalliiddaattoorrss(self, value)
     |  
     |  ssaavvee__ffoorrmm__ddaattaa(self, instance, data)
     |  
     |  sseelleecctt__ffoorrmmaatt(self, compiler, sql, params)
     |      Custom format for select clauses. For example, GIS columns need to be
     |      selected as AsText(table.col) on MySQL as the table.col data can't be
     |      used by Django.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__nnaammee(self, name)
     |  
     |  vvaalliiddaattee(self, value, model_instance)
     |      Validate value and raise ValidationError if necessary. Subclasses
     |      should override this to provide validation logic.
     |  
     |  vvaalluuee__ffrroomm__oobbjjeecctt(self, obj)
     |      Return the value of this field in the given model instance.
     |  
     |  vvaalluuee__ttoo__ssttrriinngg(self, obj)
     |      Return a string value of this field from the passed obj.
     |      This is used by the serialization framework.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Field:
     |  
     |  ddbb__ttaabblleessppaaccee
     |  
     |  ffllaattcchhooiicceess
     |      Flattened version of choices tuple.
     |  
     |  uunniiqquuee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Field:
     |  
     |  aauuttoo__ccrreeaattiioonn__ccoouunntteerr = -13
     |  
     |  ccrreeaattiioonn__ccoouunntteerr = 74
     |  
     |  ddeeffaauulltt__vvaalliiddaattoorrss = []
     |  
     |  eemmppttyy__vvaalluueess = [None, '', [], (), {}]
     |  
     |  hhiiddddeenn = False
     |  
     |  mmaannyy__ttoo__mmaannyy = None
     |  
     |  mmaannyy__ttoo__oonnee = None
     |  
     |  oonnee__ttoo__mmaannyy = None
     |  
     |  oonnee__ttoo__oonnee = None
     |  
     |  rreellaatteedd__mmooddeell = None
     |  
     |  ssyysstteemm__cchheecckk__ddeepprreeccaatteedd__ddeettaaiillss = None
     |  
     |  ssyysstteemm__cchheecckk__rreemmoovveedd__ddeettaaiillss = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ttrraannssffoorrmm(self, lookup_name)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuuppss() from builtins.type
     |  
     |  rreeggiisstteerr__llooookkuupp(lookup, lookup_name=None) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  mmeerrggee__ddiiccttss(dicts)
     |      Merge dicts in reverse to preference the order of the original list. e.g.,
     |      merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class SSttddDDeevv(django.db.models.functions.mixins.NumericOutputFieldMixin, Aggregate)
     |  StdDev(*args, **kwargs)
     |  
     |  An SQL function call.
     |  
     |  Method resolution order:
     |      StdDev
     |      django.db.models.functions.mixins.NumericOutputFieldMixin
     |      Aggregate
     |      django.db.models.expressions.Func
     |      django.db.models.expressions.SQLiteNumericMixin
     |      django.db.models.expressions.Expression
     |      django.db.models.expressions.BaseExpression
     |      django.db.models.expressions.Combinable
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, expression, sample=False, **extra)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  nnaammee = 'StdDev'
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.functions.mixins.NumericOutputFieldMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Aggregate:
     |  
     |  aass__ssqqll(self, compiler, connection, **extra_context)
     |      Responsible for returning a (sql, [params]) tuple to be included
     |      in the current query.
     |      
     |      Different backends can provide their own implementation, by
     |      providing an `as_{vendor}` method and patching the Expression:
     |      
     |      ```
     |      def override_as_sql(self, compiler, connection):
     |          # custom logic
     |          return super().as_sql(compiler, connection)
     |      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
     |      ```
     |      
     |      Arguments:
     |       * compiler: the query compiler responsible for generating the query.
     |         Must have a compile method, returning a (sql, [params]) tuple.
     |         Calling compiler(value) will return a quoted `value`.
     |      
     |       * connection: the database connection used for the current query.
     |      
     |      Return: (sql, params)
     |        Where `sql` is a string containing ordered sql parameters to be
     |        replaced with the elements of the list `params`.
     |  
     |  ggeett__ggrroouupp__bbyy__ccoollss(self)
     |  
     |  ggeett__ssoouurrccee__eexxpprreessssiioonnss(self)
     |  
     |  ggeett__ssoouurrccee__ffiieellddss(self)
     |      Return the underlying field types used by this aggregate.
     |  
     |  rreessoollvvee__eexxpprreessssiioonn(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)
     |      Provide the chance to do any preprocessing or validation before being
     |      added to the query.
     |      
     |      Arguments:
     |       * query: the backend query implementation
     |       * allow_joins: boolean allowing or denying use of joins
     |         in this query
     |       * reuse: a set of reusable joins for multijoins
     |       * summarize: a terminal aggregate clause
     |       * for_save: whether this expression about to be used in a save or update
     |      
     |      Return: an Expression to be added to the query.
     |  
     |  sseett__ssoouurrccee__eexxpprreessssiioonnss(self, exprs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Aggregate:
     |  
     |  ddeeffaauulltt__aalliiaass
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Aggregate:
     |  
     |  aallllooww__ddiissttiinncctt = False
     |  
     |  ccoonnttaaiinnss__aaggggrreeggaattee = True
     |  
     |  ffiilltteerr__tteemmppllaattee = '%s FILTER (WHERE %%(filter)s)'
     |  
     |  tteemmppllaattee = '%(function)s(%(distinct)s%(expressions)s)'
     |  
     |  wwiinnddooww__ccoommppaattiibbllee = True
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.expressions.Func:
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ccooppyy(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.db.models.expressions.Func:
     |  
     |  aarrgg__jjooiinneerr = ', '
     |  
     |  aarriittyy = None
     |  
     |  ffuunnccttiioonn = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.expressions.SQLiteNumericMixin:
     |  
     |  aass__ssqqlliittee(self, compiler, connection, **extra_context)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.expressions.BaseExpression:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettssttaattee____(self)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  aasscc(self, **kwargs)
     |  
     |  ccoonnttaaiinnss__ccoolluummnn__rreeffeerreenncceess = <django.utils.functional.cached_property object>
     |  ccoonnttaaiinnss__oovveerr__ccllaauussee = <django.utils.functional.cached_property object>
     |  ccoonnvveerrtt__vvaalluuee = <django.utils.functional.cached_property object>
     |  ddeeccoonnssttrruucctt(obj)
     |      Return a 3-tuple of class import path, positional arguments,
     |      and keyword arguments.
     |  
     |  ddeesscc(self, **kwargs)
     |  
     |  ffllaatttteenn(self)
     |      Recursively yield this expression and all subexpressions, in
     |      depth-first order.
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__llooookkuupp(self, lookup)
     |  
     |  ggeett__ttrraannssffoorrmm(self, name)
     |  
     |  iiddeennttiittyy = <django.utils.functional.cached_property object>
     |  oouuttppuutt__ffiieelldd = <django.utils.functional.cached_property object>
     |  rreellaabbeelleedd__cclloonnee(self, change_map)
     |  
     |  rreevveerrssee__oorrddeerriinngg(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.expressions.BaseExpression:
     |  
     |  ____nneeww____(cls, *args, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.expressions.BaseExpression:
     |  
     |  ffiieelldd
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.db.models.expressions.BaseExpression:
     |  
     |  ffiilltteerraabbllee = True
     |  
     |  iiss__ssuummmmaarryy = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.expressions.Combinable:
     |  
     |  ____aadddd____(self, other)
     |  
     |  ____aanndd____(self, other)
     |  
     |  ____mmoodd____(self, other)
     |  
     |  ____mmuull____(self, other)
     |  
     |  ____nneegg____(self)
     |  
     |  ____oorr____(self, other)
     |  
     |  ____ppooww____(self, other)
     |  
     |  ____rraadddd____(self, other)
     |  
     |  ____rraanndd____(self, other)
     |  
     |  ____rrmmoodd____(self, other)
     |  
     |  ____rrmmuull____(self, other)
     |  
     |  ____rroorr____(self, other)
     |  
     |  ____rrppooww____(self, other)
     |  
     |  ____rrssuubb____(self, other)
     |  
     |  ____rrttrruueeddiivv____(self, other)
     |  
     |  ____ssuubb____(self, other)
     |  
     |  ____ttrruueeddiivv____(self, other)
     |  
     |  bbiittaanndd(self, other)
     |  
     |  bbiittlleeffttsshhiifftt(self, other)
     |  
     |  bbiittoorr(self, other)
     |  
     |  bbiittrriigghhttsshhiifftt(self, other)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.db.models.expressions.Combinable:
     |  
     |  AADDDD = '+'
     |  
     |  BBIITTAANNDD = '&'
     |  
     |  BBIITTLLEEFFTTSSHHIIFFTT = '<<'
     |  
     |  BBIITTOORR = '|'
     |  
     |  BBIITTRRIIGGHHTTSSHHIIFFTT = '>>'
     |  
     |  DDIIVV = '/'
     |  
     |  MMOODD = '%%'
     |  
     |  MMUULL = '*'
     |  
     |  PPOOWW = '^'
     |  
     |  SSUUBB = '-'
    
    class SSuubbqquueerryy(Expression)
     |  Subquery(*args, **kwargs)
     |  
     |  An explicit subquery. It may contain OuterRef() references to the outer
     |  query which will be resolved when it is applied to that query.
     |  
     |  Method resolution order:
     |      Subquery
     |      Expression
     |      BaseExpression
     |      Combinable
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, queryset, output_field=None, **extra)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  aass__ssqqll(self, compiler, connection, template=None, **extra_context)
     |      Responsible for returning a (sql, [params]) tuple to be included
     |      in the current query.
     |      
     |      Different backends can provide their own implementation, by
     |      providing an `as_{vendor}` method and patching the Expression:
     |      
     |      ```
     |      def override_as_sql(self, compiler, connection):
     |          # custom logic
     |          return super().as_sql(compiler, connection)
     |      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
     |      ```
     |      
     |      Arguments:
     |       * compiler: the query compiler responsible for generating the query.
     |         Must have a compile method, returning a (sql, [params]) tuple.
     |         Calling compiler(value) will return a quoted `value`.
     |      
     |       * connection: the database connection used for the current query.
     |      
     |      Return: (sql, params)
     |        Where `sql` is a string containing ordered sql parameters to be
     |        replaced with the elements of the list `params`.
     |  
     |  ccooppyy(self)
     |  
     |  ggeett__ssoouurrccee__eexxpprreessssiioonnss(self)
     |  
     |  rreellaabbeelleedd__cclloonnee(self, change_map)
     |  
     |  rreessoollvvee__eexxpprreessssiioonn(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)
     |      Provide the chance to do any preprocessing or validation before being
     |      added to the query.
     |      
     |      Arguments:
     |       * query: the backend query implementation
     |       * allow_joins: boolean allowing or denying use of joins
     |         in this query
     |       * reuse: a set of reusable joins for multijoins
     |       * summarize: a terminal aggregate clause
     |       * for_save: whether this expression about to be used in a save or update
     |      
     |      Return: an Expression to be added to the query.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ccoonnttaaiinnss__aaggggrreeggaattee = False
     |  
     |  tteemmppllaattee = '(%(subquery)s)'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseExpression:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettssttaattee____(self)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  aasscc(self, **kwargs)
     |  
     |  ccoonnttaaiinnss__ccoolluummnn__rreeffeerreenncceess = <django.utils.functional.cached_property object>
     |  ccoonnttaaiinnss__oovveerr__ccllaauussee = <django.utils.functional.cached_property object>
     |  ccoonnvveerrtt__vvaalluuee = <django.utils.functional.cached_property object>
     |  ddeeccoonnssttrruucctt(obj)
     |      Return a 3-tuple of class import path, positional arguments,
     |      and keyword arguments.
     |  
     |  ddeesscc(self, **kwargs)
     |  
     |  ffllaatttteenn(self)
     |      Recursively yield this expression and all subexpressions, in
     |      depth-first order.
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ggrroouupp__bbyy__ccoollss(self)
     |  
     |  ggeett__llooookkuupp(self, lookup)
     |  
     |  ggeett__ssoouurrccee__ffiieellddss(self)
     |      Return the underlying field types used by this aggregate.
     |  
     |  ggeett__ttrraannssffoorrmm(self, name)
     |  
     |  iiddeennttiittyy = <django.utils.functional.cached_property object>
     |  oouuttppuutt__ffiieelldd = <django.utils.functional.cached_property object>
     |  rreevveerrssee__oorrddeerriinngg(self)
     |  
     |  sseett__ssoouurrccee__eexxpprreessssiioonnss(self, exprs)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from BaseExpression:
     |  
     |  ____nneeww____(cls, *args, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseExpression:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ffiieelldd
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from BaseExpression:
     |  
     |  ffiilltteerraabbllee = True
     |  
     |  iiss__ssuummmmaarryy = False
     |  
     |  wwiinnddooww__ccoommppaattiibbllee = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Combinable:
     |  
     |  ____aadddd____(self, other)
     |  
     |  ____aanndd____(self, other)
     |  
     |  ____mmoodd____(self, other)
     |  
     |  ____mmuull____(self, other)
     |  
     |  ____nneegg____(self)
     |  
     |  ____oorr____(self, other)
     |  
     |  ____ppooww____(self, other)
     |  
     |  ____rraadddd____(self, other)
     |  
     |  ____rraanndd____(self, other)
     |  
     |  ____rrmmoodd____(self, other)
     |  
     |  ____rrmmuull____(self, other)
     |  
     |  ____rroorr____(self, other)
     |  
     |  ____rrppooww____(self, other)
     |  
     |  ____rrssuubb____(self, other)
     |  
     |  ____rrttrruueeddiivv____(self, other)
     |  
     |  ____ssuubb____(self, other)
     |  
     |  ____ttrruueeddiivv____(self, other)
     |  
     |  bbiittaanndd(self, other)
     |  
     |  bbiittlleeffttsshhiifftt(self, other)
     |  
     |  bbiittoorr(self, other)
     |  
     |  bbiittrriigghhttsshhiifftt(self, other)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Combinable:
     |  
     |  AADDDD = '+'
     |  
     |  BBIITTAANNDD = '&'
     |  
     |  BBIITTLLEEFFTTSSHHIIFFTT = '<<'
     |  
     |  BBIITTOORR = '|'
     |  
     |  BBIITTRRIIGGHHTTSSHHIIFFTT = '>>'
     |  
     |  DDIIVV = '/'
     |  
     |  MMOODD = '%%'
     |  
     |  MMUULL = '*'
     |  
     |  PPOOWW = '^'
     |  
     |  SSUUBB = '-'
    
    class SSuumm(django.db.models.functions.mixins.FixDurationInputMixin, Aggregate)
     |  Sum(*args, **kwargs)
     |  
     |  An SQL function call.
     |  
     |  Method resolution order:
     |      Sum
     |      django.db.models.functions.mixins.FixDurationInputMixin
     |      Aggregate
     |      django.db.models.expressions.Func
     |      django.db.models.expressions.SQLiteNumericMixin
     |      django.db.models.expressions.Expression
     |      django.db.models.expressions.BaseExpression
     |      django.db.models.expressions.Combinable
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  ffuunnccttiioonn = 'SUM'
     |  
     |  nnaammee = 'Sum'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.functions.mixins.FixDurationInputMixin:
     |  
     |  aass__mmyyssqqll(self, compiler, connection, **extra_context)
     |  
     |  aass__oorraaccllee(self, compiler, connection, **extra_context)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.functions.mixins.FixDurationInputMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Aggregate:
     |  
     |  ____iinniitt____(self, *expressions, distinct=False, filter=None, **extra)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  aass__ssqqll(self, compiler, connection, **extra_context)
     |      Responsible for returning a (sql, [params]) tuple to be included
     |      in the current query.
     |      
     |      Different backends can provide their own implementation, by
     |      providing an `as_{vendor}` method and patching the Expression:
     |      
     |      ```
     |      def override_as_sql(self, compiler, connection):
     |          # custom logic
     |          return super().as_sql(compiler, connection)
     |      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
     |      ```
     |      
     |      Arguments:
     |       * compiler: the query compiler responsible for generating the query.
     |         Must have a compile method, returning a (sql, [params]) tuple.
     |         Calling compiler(value) will return a quoted `value`.
     |      
     |       * connection: the database connection used for the current query.
     |      
     |      Return: (sql, params)
     |        Where `sql` is a string containing ordered sql parameters to be
     |        replaced with the elements of the list `params`.
     |  
     |  ggeett__ggrroouupp__bbyy__ccoollss(self)
     |  
     |  ggeett__ssoouurrccee__eexxpprreessssiioonnss(self)
     |  
     |  ggeett__ssoouurrccee__ffiieellddss(self)
     |      Return the underlying field types used by this aggregate.
     |  
     |  rreessoollvvee__eexxpprreessssiioonn(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)
     |      Provide the chance to do any preprocessing or validation before being
     |      added to the query.
     |      
     |      Arguments:
     |       * query: the backend query implementation
     |       * allow_joins: boolean allowing or denying use of joins
     |         in this query
     |       * reuse: a set of reusable joins for multijoins
     |       * summarize: a terminal aggregate clause
     |       * for_save: whether this expression about to be used in a save or update
     |      
     |      Return: an Expression to be added to the query.
     |  
     |  sseett__ssoouurrccee__eexxpprreessssiioonnss(self, exprs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Aggregate:
     |  
     |  ddeeffaauulltt__aalliiaass
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Aggregate:
     |  
     |  aallllooww__ddiissttiinncctt = False
     |  
     |  ccoonnttaaiinnss__aaggggrreeggaattee = True
     |  
     |  ffiilltteerr__tteemmppllaattee = '%s FILTER (WHERE %%(filter)s)'
     |  
     |  tteemmppllaattee = '%(function)s(%(distinct)s%(expressions)s)'
     |  
     |  wwiinnddooww__ccoommppaattiibbllee = True
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.expressions.Func:
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ccooppyy(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.db.models.expressions.Func:
     |  
     |  aarrgg__jjooiinneerr = ', '
     |  
     |  aarriittyy = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.expressions.SQLiteNumericMixin:
     |  
     |  aass__ssqqlliittee(self, compiler, connection, **extra_context)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.expressions.BaseExpression:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettssttaattee____(self)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  aasscc(self, **kwargs)
     |  
     |  ccoonnttaaiinnss__ccoolluummnn__rreeffeerreenncceess = <django.utils.functional.cached_property object>
     |  ccoonnttaaiinnss__oovveerr__ccllaauussee = <django.utils.functional.cached_property object>
     |  ccoonnvveerrtt__vvaalluuee = <django.utils.functional.cached_property object>
     |  ddeeccoonnssttrruucctt(obj)
     |      Return a 3-tuple of class import path, positional arguments,
     |      and keyword arguments.
     |  
     |  ddeesscc(self, **kwargs)
     |  
     |  ffllaatttteenn(self)
     |      Recursively yield this expression and all subexpressions, in
     |      depth-first order.
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__llooookkuupp(self, lookup)
     |  
     |  ggeett__ttrraannssffoorrmm(self, name)
     |  
     |  iiddeennttiittyy = <django.utils.functional.cached_property object>
     |  oouuttppuutt__ffiieelldd = <django.utils.functional.cached_property object>
     |  rreellaabbeelleedd__cclloonnee(self, change_map)
     |  
     |  rreevveerrssee__oorrddeerriinngg(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.expressions.BaseExpression:
     |  
     |  ____nneeww____(cls, *args, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.expressions.BaseExpression:
     |  
     |  ffiieelldd
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.db.models.expressions.BaseExpression:
     |  
     |  ffiilltteerraabbllee = True
     |  
     |  iiss__ssuummmmaarryy = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.expressions.Combinable:
     |  
     |  ____aadddd____(self, other)
     |  
     |  ____aanndd____(self, other)
     |  
     |  ____mmoodd____(self, other)
     |  
     |  ____mmuull____(self, other)
     |  
     |  ____nneegg____(self)
     |  
     |  ____oorr____(self, other)
     |  
     |  ____ppooww____(self, other)
     |  
     |  ____rraadddd____(self, other)
     |  
     |  ____rraanndd____(self, other)
     |  
     |  ____rrmmoodd____(self, other)
     |  
     |  ____rrmmuull____(self, other)
     |  
     |  ____rroorr____(self, other)
     |  
     |  ____rrppooww____(self, other)
     |  
     |  ____rrssuubb____(self, other)
     |  
     |  ____rrttrruueeddiivv____(self, other)
     |  
     |  ____ssuubb____(self, other)
     |  
     |  ____ttrruueeddiivv____(self, other)
     |  
     |  bbiittaanndd(self, other)
     |  
     |  bbiittlleeffttsshhiifftt(self, other)
     |  
     |  bbiittoorr(self, other)
     |  
     |  bbiittrriigghhttsshhiifftt(self, other)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.db.models.expressions.Combinable:
     |  
     |  AADDDD = '+'
     |  
     |  BBIITTAANNDD = '&'
     |  
     |  BBIITTLLEEFFTTSSHHIIFFTT = '<<'
     |  
     |  BBIITTOORR = '|'
     |  
     |  BBIITTRRIIGGHHTTSSHHIIFFTT = '>>'
     |  
     |  DDIIVV = '/'
     |  
     |  MMOODD = '%%'
     |  
     |  MMUULL = '*'
     |  
     |  PPOOWW = '^'
     |  
     |  SSUUBB = '-'
    
    class TTeexxttFFiieelldd(Field)
     |  TextField(verbose_name=None, name=None, primary_key=False, max_length=None, unique=False, blank=False, null=False, db_index=False, rel=None, default=<class 'django.db.models.fields.NOT_PROVIDED'>, editable=True, serialize=True, unique_for_date=None, unique_for_month=None, unique_for_year=None, choices=None, help_text='', db_column=None, db_tablespace=None, auto_created=False, validators=(), error_messages=None)
     |  
     |  Base class for all field types
     |  
     |  Method resolution order:
     |      TextField
     |      Field
     |      django.db.models.query_utils.RegisterLookupMixin
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ffoorrmmffiieelldd(self, **kwargs)
     |      Return a django.forms.Field instance for this field.
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  ggeett__pprreepp__vvaalluuee(self, value)
     |      Perform preliminary non-db specific value checks and conversions.
     |  
     |  ttoo__ppyytthhoonn(self, value)
     |      Convert the input value into the expected Python data type, raising
     |      django.core.exceptions.ValidationError if the data can't be converted.
     |      Return the converted value. Subclasses should override this.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ddeessccrriippttiioonn = 'Text'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Field:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memodict)
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggee____(self, other, NotImplemented=NotImplemented)
     |      Return a >= b.  Computed by @total_ordering from (not a < b).
     |  
     |  ____ggtt____(self, other, NotImplemented=NotImplemented)
     |      Return a > b.  Computed by @total_ordering from (not a < b) and (a != b).
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____iinniitt____(self, verbose_name=None, name=None, primary_key=False, max_length=None, unique=False, blank=False, null=False, db_index=False, rel=None, default=<class 'django.db.models.fields.NOT_PROVIDED'>, editable=True, serialize=True, unique_for_date=None, unique_for_month=None, unique_for_year=None, choices=None, help_text='', db_column=None, db_tablespace=None, auto_created=False, validators=(), error_messages=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____llee____(self, other, NotImplemented=NotImplemented)
     |      Return a <= b.  Computed by @total_ordering from (a < b) or (a == b).
     |  
     |  ____lltt____(self, other)
     |      Return self<value.
     |  
     |  ____rreedduuccee____(self)
     |      Pickling should return the model._meta.fields instance of the field,
     |      not a new copy of that field. So, use the app registry to load the
     |      model and then the field back.
     |  
     |  ____rreepprr____(self)
     |      Display the module, class, and name of the field.
     |  
     |  ____ssttrr____(self)
     |      Return "app_label.model_label.field_name" for fields attached to
     |      models.
     |  
     |  ccaacchheedd__ccooll = <django.utils.functional.cached_property object>
     |  ccaasstt__ddbb__ttyyppee(self, connection)
     |      Return the data type to use in the Cast() function.
     |  
     |  cchheecckk(self, **kwargs)
     |  
     |  cclleeaann(self, value, model_instance)
     |      Convert the value's type and run validation. Validation errors
     |      from to_python() and validate() are propagated. Return the correct
     |      value if no error is raised.
     |  
     |  cclloonnee(self)
     |      Uses deconstruct() to clone a new copy of this Field.
     |      Will not preserve any class attachments/attribute names.
     |  
     |  ccoonnttrriibbuuttee__ttoo__ccllaassss(self, cls, name, private_only=False)
     |      Register the field with the model class it belongs to.
     |      
     |      If private_only is True, create a separate instance of this field
     |      for every subclass of cls, even if cls is not an abstract model.
     |  
     |  ddbb__cchheecckk(self, connection)
     |      Return the database column check constraint for this field, for the
     |      provided connection. Works the same way as db_type() for the case that
     |      get_internal_type() does not map to a preexisting model field.
     |  
     |  ddbb__ppaarraammeetteerrss(self, connection)
     |      Extension of db_type(), providing a range of different return values
     |      (type, checks). This will look at db_type(), allowing custom model
     |      fields to override it.
     |  
     |  ddbb__ttyyppee(self, connection)
     |      Return the database column data type for this field, for the provided
     |      connection.
     |  
     |  ddbb__ttyyppee__ppaarraammeetteerrss(self, connection)
     |  
     |  ddbb__ttyyppee__ssuuffffiixx(self, connection)
     |  
     |  ddeeccoonnssttrruucctt(self)
     |      Return enough information to recreate the field as a 4-tuple:
     |      
     |       * The name of the field on the model, if contribute_to_class() has
     |         been run.
     |       * The import path of the field, including the class:e.g.
     |         django.db.models.IntegerField This should be the most portable
     |         version, so less specific may be better.
     |       * A list of positional arguments.
     |       * A dict of keyword arguments.
     |      
     |      Note that the positional or keyword arguments must contain values of
     |      the following types (including inner values of collection types):
     |      
     |       * None, bool, str, int, float, complex, set, frozenset, list, tuple,
     |         dict
     |       * UUID
     |       * datetime.datetime (naive), datetime.date
     |       * top-level classes, top-level functions - will be referenced by their
     |         full import path
     |       * Storage instances - these have their own deconstruct() method
     |      
     |      This is because the values here must be serialized into a text format
     |      (possibly new Python code, possibly JSON) and these are the only types
     |      with encoding handlers defined.
     |      
     |      There's no need to return the exact way the field was instantiated this
     |      time, just ensure that the resulting field is the same - prefer keyword
     |      arguments over positional ones, and omit parameters with their default
     |      values.
     |  
     |  ggeett__aattttnnaammee(self)
     |  
     |  ggeett__aattttnnaammee__ccoolluummnn(self)
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], limit_choices_to=None, ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |  
     |  ggeett__ccooll(self, alias, output_field=None)
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ddbb__pprreepp__ssaavvee(self, value, connection)
     |      Return field's value prepared for saving into a database.
     |  
     |  ggeett__ddbb__pprreepp__vvaalluuee(self, value, connection, prepared=False)
     |      Return field's value prepared for interacting with the database backend.
     |      
     |      Used by the default implementations of get_db_prep_save().
     |  
     |  ggeett__ddeeffaauulltt(self)
     |      Return the default value for this field.
     |  
     |  ggeett__ffiilltteerr__kkwwaarrggss__ffoorr__oobbjjeecctt(self, obj)
     |      Return a dict that when passed as kwargs to self.model.filter(), would
     |      yield all instances having the same value for this field as obj has.
     |  
     |  ggeett__ppkk__vvaalluuee__oonn__ssaavvee(self, instance)
     |      Hook to generate new PK values on save. This method is called when
     |      saving instances with no primary key value set. If this method returns
     |      something else than None, then the returned value is used when saving
     |      the new instance.
     |  
     |  hhaass__ddeeffaauulltt(self)
     |      Return a boolean of whether this field has a default value.
     |  
     |  pprree__ssaavvee(self, model_instance, add)
     |      Return field's value just before saving.
     |  
     |  rreell__ddbb__ttyyppee(self, connection)
     |      Return the data type that a related field pointing to this field should
     |      use. For example, this method is called by ForeignKey and OneToOneField
     |      to determine its data type.
     |  
     |  rruunn__vvaalliiddaattoorrss(self, value)
     |  
     |  ssaavvee__ffoorrmm__ddaattaa(self, instance, data)
     |  
     |  sseelleecctt__ffoorrmmaatt(self, compiler, sql, params)
     |      Custom format for select clauses. For example, GIS columns need to be
     |      selected as AsText(table.col) on MySQL as the table.col data can't be
     |      used by Django.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__nnaammee(self, name)
     |  
     |  vvaalliiddaattee(self, value, model_instance)
     |      Validate value and raise ValidationError if necessary. Subclasses
     |      should override this to provide validation logic.
     |  
     |  vvaalliiddaattoorrss = <django.utils.functional.cached_property object>
     |  vvaalluuee__ffrroomm__oobbjjeecctt(self, obj)
     |      Return the value of this field in the given model instance.
     |  
     |  vvaalluuee__ttoo__ssttrriinngg(self, obj)
     |      Return a string value of this field from the passed obj.
     |      This is used by the serialization framework.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Field:
     |  
     |  ddbb__ttaabblleessppaaccee
     |  
     |  ffllaattcchhooiicceess
     |      Flattened version of choices tuple.
     |  
     |  uunniiqquuee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Field:
     |  
     |  aauuttoo__ccrreeaattiioonn__ccoouunntteerr = -13
     |  
     |  ccllaassss__llooookkuuppss = {'contains': <class 'django.db.models.lookups.Contains...
     |  
     |  ccrreeaattiioonn__ccoouunntteerr = 74
     |  
     |  ddeeffaauulltt__eerrrroorr__mmeessssaaggeess = {'blank': 'This field cannot be blank.', 'inv...
     |  
     |  ddeeffaauulltt__vvaalliiddaattoorrss = []
     |  
     |  eemmppttyy__ssttrriinnggss__aalllloowweedd = True
     |  
     |  eemmppttyy__vvaalluueess = [None, '', [], (), {}]
     |  
     |  hhiiddddeenn = False
     |  
     |  mmaannyy__ttoo__mmaannyy = None
     |  
     |  mmaannyy__ttoo__oonnee = None
     |  
     |  oonnee__ttoo__mmaannyy = None
     |  
     |  oonnee__ttoo__oonnee = None
     |  
     |  rreellaatteedd__mmooddeell = None
     |  
     |  ssyysstteemm__cchheecckk__ddeepprreeccaatteedd__ddeettaaiillss = None
     |  
     |  ssyysstteemm__cchheecckk__rreemmoovveedd__ddeettaaiillss = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ttrraannssffoorrmm(self, lookup_name)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuuppss() from builtins.type
     |  
     |  rreeggiisstteerr__llooookkuupp(lookup, lookup_name=None) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  mmeerrggee__ddiiccttss(dicts)
     |      Merge dicts in reverse to preference the order of the original list. e.g.,
     |      merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class TTiimmeeFFiieelldd(DateTimeCheckMixin, Field)
     |  TimeField(verbose_name=None, name=None, auto_now=False, auto_now_add=False, **kwargs)
     |  
     |  Base class for all field types
     |  
     |  Method resolution order:
     |      TimeField
     |      DateTimeCheckMixin
     |      Field
     |      django.db.models.query_utils.RegisterLookupMixin
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, verbose_name=None, name=None, auto_now=False, auto_now_add=False, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ddeeccoonnssttrruucctt(self)
     |      Return enough information to recreate the field as a 4-tuple:
     |      
     |       * The name of the field on the model, if contribute_to_class() has
     |         been run.
     |       * The import path of the field, including the class:e.g.
     |         django.db.models.IntegerField This should be the most portable
     |         version, so less specific may be better.
     |       * A list of positional arguments.
     |       * A dict of keyword arguments.
     |      
     |      Note that the positional or keyword arguments must contain values of
     |      the following types (including inner values of collection types):
     |      
     |       * None, bool, str, int, float, complex, set, frozenset, list, tuple,
     |         dict
     |       * UUID
     |       * datetime.datetime (naive), datetime.date
     |       * top-level classes, top-level functions - will be referenced by their
     |         full import path
     |       * Storage instances - these have their own deconstruct() method
     |      
     |      This is because the values here must be serialized into a text format
     |      (possibly new Python code, possibly JSON) and these are the only types
     |      with encoding handlers defined.
     |      
     |      There's no need to return the exact way the field was instantiated this
     |      time, just ensure that the resulting field is the same - prefer keyword
     |      arguments over positional ones, and omit parameters with their default
     |      values.
     |  
     |  ffoorrmmffiieelldd(self, **kwargs)
     |      Return a django.forms.Field instance for this field.
     |  
     |  ggeett__ddbb__pprreepp__vvaalluuee(self, value, connection, prepared=False)
     |      Return field's value prepared for interacting with the database backend.
     |      
     |      Used by the default implementations of get_db_prep_save().
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  ggeett__pprreepp__vvaalluuee(self, value)
     |      Perform preliminary non-db specific value checks and conversions.
     |  
     |  pprree__ssaavvee(self, model_instance, add)
     |      Return field's value just before saving.
     |  
     |  ttoo__ppyytthhoonn(self, value)
     |      Convert the input value into the expected Python data type, raising
     |      django.core.exceptions.ValidationError if the data can't be converted.
     |      Return the converted value. Subclasses should override this.
     |  
     |  vvaalluuee__ttoo__ssttrriinngg(self, obj)
     |      Return a string value of this field from the passed obj.
     |      This is used by the serialization framework.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ccllaassss__llooookkuuppss = {'hour': <class 'django.db.models.functions.datetime.E...
     |  
     |  ddeeffaauulltt__eerrrroorr__mmeessssaaggeess = {'invalid': "'%(value)s' value has an invalid...
     |  
     |  ddeessccrriippttiioonn = 'Time'
     |  
     |  eemmppttyy__ssttrriinnggss__aalllloowweedd = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from DateTimeCheckMixin:
     |  
     |  cchheecckk(self, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from DateTimeCheckMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Field:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memodict)
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggee____(self, other, NotImplemented=NotImplemented)
     |      Return a >= b.  Computed by @total_ordering from (not a < b).
     |  
     |  ____ggtt____(self, other, NotImplemented=NotImplemented)
     |      Return a > b.  Computed by @total_ordering from (not a < b) and (a != b).
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____llee____(self, other, NotImplemented=NotImplemented)
     |      Return a <= b.  Computed by @total_ordering from (a < b) or (a == b).
     |  
     |  ____lltt____(self, other)
     |      Return self<value.
     |  
     |  ____rreedduuccee____(self)
     |      Pickling should return the model._meta.fields instance of the field,
     |      not a new copy of that field. So, use the app registry to load the
     |      model and then the field back.
     |  
     |  ____rreepprr____(self)
     |      Display the module, class, and name of the field.
     |  
     |  ____ssttrr____(self)
     |      Return "app_label.model_label.field_name" for fields attached to
     |      models.
     |  
     |  ccaacchheedd__ccooll = <django.utils.functional.cached_property object>
     |  ccaasstt__ddbb__ttyyppee(self, connection)
     |      Return the data type to use in the Cast() function.
     |  
     |  cclleeaann(self, value, model_instance)
     |      Convert the value's type and run validation. Validation errors
     |      from to_python() and validate() are propagated. Return the correct
     |      value if no error is raised.
     |  
     |  cclloonnee(self)
     |      Uses deconstruct() to clone a new copy of this Field.
     |      Will not preserve any class attachments/attribute names.
     |  
     |  ccoonnttrriibbuuttee__ttoo__ccllaassss(self, cls, name, private_only=False)
     |      Register the field with the model class it belongs to.
     |      
     |      If private_only is True, create a separate instance of this field
     |      for every subclass of cls, even if cls is not an abstract model.
     |  
     |  ddbb__cchheecckk(self, connection)
     |      Return the database column check constraint for this field, for the
     |      provided connection. Works the same way as db_type() for the case that
     |      get_internal_type() does not map to a preexisting model field.
     |  
     |  ddbb__ppaarraammeetteerrss(self, connection)
     |      Extension of db_type(), providing a range of different return values
     |      (type, checks). This will look at db_type(), allowing custom model
     |      fields to override it.
     |  
     |  ddbb__ttyyppee(self, connection)
     |      Return the database column data type for this field, for the provided
     |      connection.
     |  
     |  ddbb__ttyyppee__ppaarraammeetteerrss(self, connection)
     |  
     |  ddbb__ttyyppee__ssuuffffiixx(self, connection)
     |  
     |  ggeett__aattttnnaammee(self)
     |  
     |  ggeett__aattttnnaammee__ccoolluummnn(self)
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], limit_choices_to=None, ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |  
     |  ggeett__ccooll(self, alias, output_field=None)
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ddbb__pprreepp__ssaavvee(self, value, connection)
     |      Return field's value prepared for saving into a database.
     |  
     |  ggeett__ddeeffaauulltt(self)
     |      Return the default value for this field.
     |  
     |  ggeett__ffiilltteerr__kkwwaarrggss__ffoorr__oobbjjeecctt(self, obj)
     |      Return a dict that when passed as kwargs to self.model.filter(), would
     |      yield all instances having the same value for this field as obj has.
     |  
     |  ggeett__ppkk__vvaalluuee__oonn__ssaavvee(self, instance)
     |      Hook to generate new PK values on save. This method is called when
     |      saving instances with no primary key value set. If this method returns
     |      something else than None, then the returned value is used when saving
     |      the new instance.
     |  
     |  hhaass__ddeeffaauulltt(self)
     |      Return a boolean of whether this field has a default value.
     |  
     |  rreell__ddbb__ttyyppee(self, connection)
     |      Return the data type that a related field pointing to this field should
     |      use. For example, this method is called by ForeignKey and OneToOneField
     |      to determine its data type.
     |  
     |  rruunn__vvaalliiddaattoorrss(self, value)
     |  
     |  ssaavvee__ffoorrmm__ddaattaa(self, instance, data)
     |  
     |  sseelleecctt__ffoorrmmaatt(self, compiler, sql, params)
     |      Custom format for select clauses. For example, GIS columns need to be
     |      selected as AsText(table.col) on MySQL as the table.col data can't be
     |      used by Django.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__nnaammee(self, name)
     |  
     |  vvaalliiddaattee(self, value, model_instance)
     |      Validate value and raise ValidationError if necessary. Subclasses
     |      should override this to provide validation logic.
     |  
     |  vvaalliiddaattoorrss = <django.utils.functional.cached_property object>
     |  vvaalluuee__ffrroomm__oobbjjeecctt(self, obj)
     |      Return the value of this field in the given model instance.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Field:
     |  
     |  ddbb__ttaabblleessppaaccee
     |  
     |  ffllaattcchhooiicceess
     |      Flattened version of choices tuple.
     |  
     |  uunniiqquuee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Field:
     |  
     |  aauuttoo__ccrreeaattiioonn__ccoouunntteerr = -13
     |  
     |  ccrreeaattiioonn__ccoouunntteerr = 74
     |  
     |  ddeeffaauulltt__vvaalliiddaattoorrss = []
     |  
     |  eemmppttyy__vvaalluueess = [None, '', [], (), {}]
     |  
     |  hhiiddddeenn = False
     |  
     |  mmaannyy__ttoo__mmaannyy = None
     |  
     |  mmaannyy__ttoo__oonnee = None
     |  
     |  oonnee__ttoo__mmaannyy = None
     |  
     |  oonnee__ttoo__oonnee = None
     |  
     |  rreellaatteedd__mmooddeell = None
     |  
     |  ssyysstteemm__cchheecckk__ddeepprreeccaatteedd__ddeettaaiillss = None
     |  
     |  ssyysstteemm__cchheecckk__rreemmoovveedd__ddeettaaiillss = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ttrraannssffoorrmm(self, lookup_name)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuuppss() from builtins.type
     |  
     |  rreeggiisstteerr__llooookkuupp(lookup, lookup_name=None) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  mmeerrggee__ddiiccttss(dicts)
     |      Merge dicts in reverse to preference the order of the original list. e.g.,
     |      merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.
    
    class TTrraannssffoorrmm(django.db.models.query_utils.RegisterLookupMixin, django.db.models.expressions.Func)
     |  Transform(*args, **kwargs)
     |  
     |  RegisterLookupMixin() is first so that get_lookup() and get_transform()
     |  first examine self and then check output_field.
     |  
     |  Method resolution order:
     |      Transform
     |      django.db.models.query_utils.RegisterLookupMixin
     |      django.db.models.expressions.Func
     |      django.db.models.expressions.SQLiteNumericMixin
     |      django.db.models.expressions.Expression
     |      django.db.models.expressions.BaseExpression
     |      django.db.models.expressions.Combinable
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ggeett__bbiillaatteerraall__ttrraannssffoorrmmss(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  llhhss
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  aarriittyy = 1
     |  
     |  bbiillaatteerraall = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ttrraannssffoorrmm(self, lookup_name)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuuppss() from builtins.type
     |  
     |  rreeggiisstteerr__llooookkuupp(lookup, lookup_name=None) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  mmeerrggee__ddiiccttss(dicts)
     |      Merge dicts in reverse to preference the order of the original list. e.g.,
     |      merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.expressions.Func:
     |  
     |  ____iinniitt____(self, *expressions, output_field=None, **extra)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  aass__ssqqll(self, compiler, connection, function=None, template=None, arg_joiner=None, **extra_context)
     |      Responsible for returning a (sql, [params]) tuple to be included
     |      in the current query.
     |      
     |      Different backends can provide their own implementation, by
     |      providing an `as_{vendor}` method and patching the Expression:
     |      
     |      ```
     |      def override_as_sql(self, compiler, connection):
     |          # custom logic
     |          return super().as_sql(compiler, connection)
     |      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
     |      ```
     |      
     |      Arguments:
     |       * compiler: the query compiler responsible for generating the query.
     |         Must have a compile method, returning a (sql, [params]) tuple.
     |         Calling compiler(value) will return a quoted `value`.
     |      
     |       * connection: the database connection used for the current query.
     |      
     |      Return: (sql, params)
     |        Where `sql` is a string containing ordered sql parameters to be
     |        replaced with the elements of the list `params`.
     |  
     |  ccooppyy(self)
     |  
     |  ggeett__ssoouurrccee__eexxpprreessssiioonnss(self)
     |  
     |  rreessoollvvee__eexxpprreessssiioonn(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)
     |      Provide the chance to do any preprocessing or validation before being
     |      added to the query.
     |      
     |      Arguments:
     |       * query: the backend query implementation
     |       * allow_joins: boolean allowing or denying use of joins
     |         in this query
     |       * reuse: a set of reusable joins for multijoins
     |       * summarize: a terminal aggregate clause
     |       * for_save: whether this expression about to be used in a save or update
     |      
     |      Return: an Expression to be added to the query.
     |  
     |  sseett__ssoouurrccee__eexxpprreessssiioonnss(self, exprs)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.db.models.expressions.Func:
     |  
     |  aarrgg__jjooiinneerr = ', '
     |  
     |  ffuunnccttiioonn = None
     |  
     |  tteemmppllaattee = '%(function)s(%(expressions)s)'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.expressions.SQLiteNumericMixin:
     |  
     |  aass__ssqqlliittee(self, compiler, connection, **extra_context)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.expressions.BaseExpression:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettssttaattee____(self)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  aasscc(self, **kwargs)
     |  
     |  ccoonnttaaiinnss__aaggggrreeggaattee = <django.utils.functional.cached_property object>
     |  ccoonnttaaiinnss__ccoolluummnn__rreeffeerreenncceess = <django.utils.functional.cached_property object>
     |  ccoonnttaaiinnss__oovveerr__ccllaauussee = <django.utils.functional.cached_property object>
     |  ccoonnvveerrtt__vvaalluuee = <django.utils.functional.cached_property object>
     |  ddeeccoonnssttrruucctt(obj)
     |      Return a 3-tuple of class import path, positional arguments,
     |      and keyword arguments.
     |  
     |  ddeesscc(self, **kwargs)
     |  
     |  ffllaatttteenn(self)
     |      Recursively yield this expression and all subexpressions, in
     |      depth-first order.
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ggrroouupp__bbyy__ccoollss(self)
     |  
     |  ggeett__ssoouurrccee__ffiieellddss(self)
     |      Return the underlying field types used by this aggregate.
     |  
     |  iiddeennttiittyy = <django.utils.functional.cached_property object>
     |  oouuttppuutt__ffiieelldd = <django.utils.functional.cached_property object>
     |  rreellaabbeelleedd__cclloonnee(self, change_map)
     |  
     |  rreevveerrssee__oorrddeerriinngg(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.expressions.BaseExpression:
     |  
     |  ____nneeww____(cls, *args, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.expressions.BaseExpression:
     |  
     |  ffiieelldd
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.db.models.expressions.BaseExpression:
     |  
     |  ffiilltteerraabbllee = True
     |  
     |  iiss__ssuummmmaarryy = False
     |  
     |  wwiinnddooww__ccoommppaattiibbllee = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.expressions.Combinable:
     |  
     |  ____aadddd____(self, other)
     |  
     |  ____aanndd____(self, other)
     |  
     |  ____mmoodd____(self, other)
     |  
     |  ____mmuull____(self, other)
     |  
     |  ____nneegg____(self)
     |  
     |  ____oorr____(self, other)
     |  
     |  ____ppooww____(self, other)
     |  
     |  ____rraadddd____(self, other)
     |  
     |  ____rraanndd____(self, other)
     |  
     |  ____rrmmoodd____(self, other)
     |  
     |  ____rrmmuull____(self, other)
     |  
     |  ____rroorr____(self, other)
     |  
     |  ____rrppooww____(self, other)
     |  
     |  ____rrssuubb____(self, other)
     |  
     |  ____rrttrruueeddiivv____(self, other)
     |  
     |  ____ssuubb____(self, other)
     |  
     |  ____ttrruueeddiivv____(self, other)
     |  
     |  bbiittaanndd(self, other)
     |  
     |  bbiittlleeffttsshhiifftt(self, other)
     |  
     |  bbiittoorr(self, other)
     |  
     |  bbiittrriigghhttsshhiifftt(self, other)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.db.models.expressions.Combinable:
     |  
     |  AADDDD = '+'
     |  
     |  BBIITTAANNDD = '&'
     |  
     |  BBIITTLLEEFFTTSSHHIIFFTT = '<<'
     |  
     |  BBIITTOORR = '|'
     |  
     |  BBIITTRRIIGGHHTTSSHHIIFFTT = '>>'
     |  
     |  DDIIVV = '/'
     |  
     |  MMOODD = '%%'
     |  
     |  MMUULL = '*'
     |  
     |  PPOOWW = '^'
     |  
     |  SSUUBB = '-'
    
    class UURRLLFFiieelldd(CharField)
     |  URLField(verbose_name=None, name=None, **kwargs)
     |  
     |  Base class for all field types
     |  
     |  Method resolution order:
     |      URLField
     |      CharField
     |      Field
     |      django.db.models.query_utils.RegisterLookupMixin
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, verbose_name=None, name=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ddeeccoonnssttrruucctt(self)
     |      Return enough information to recreate the field as a 4-tuple:
     |      
     |       * The name of the field on the model, if contribute_to_class() has
     |         been run.
     |       * The import path of the field, including the class:e.g.
     |         django.db.models.IntegerField This should be the most portable
     |         version, so less specific may be better.
     |       * A list of positional arguments.
     |       * A dict of keyword arguments.
     |      
     |      Note that the positional or keyword arguments must contain values of
     |      the following types (including inner values of collection types):
     |      
     |       * None, bool, str, int, float, complex, set, frozenset, list, tuple,
     |         dict
     |       * UUID
     |       * datetime.datetime (naive), datetime.date
     |       * top-level classes, top-level functions - will be referenced by their
     |         full import path
     |       * Storage instances - these have their own deconstruct() method
     |      
     |      This is because the values here must be serialized into a text format
     |      (possibly new Python code, possibly JSON) and these are the only types
     |      with encoding handlers defined.
     |      
     |      There's no need to return the exact way the field was instantiated this
     |      time, just ensure that the resulting field is the same - prefer keyword
     |      arguments over positional ones, and omit parameters with their default
     |      values.
     |  
     |  ffoorrmmffiieelldd(self, **kwargs)
     |      Return a django.forms.Field instance for this field.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ddeeffaauulltt__vvaalliiddaattoorrss = [<django.core.validators.URLValidator object>]
     |  
     |  ddeessccrriippttiioonn = 'URL'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from CharField:
     |  
     |  ccaasstt__ddbb__ttyyppee(self, connection)
     |      Return the data type to use in the Cast() function.
     |  
     |  cchheecckk(self, **kwargs)
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  ggeett__pprreepp__vvaalluuee(self, value)
     |      Perform preliminary non-db specific value checks and conversions.
     |  
     |  ttoo__ppyytthhoonn(self, value)
     |      Convert the input value into the expected Python data type, raising
     |      django.core.exceptions.ValidationError if the data can't be converted.
     |      Return the converted value. Subclasses should override this.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Field:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memodict)
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggee____(self, other, NotImplemented=NotImplemented)
     |      Return a >= b.  Computed by @total_ordering from (not a < b).
     |  
     |  ____ggtt____(self, other, NotImplemented=NotImplemented)
     |      Return a > b.  Computed by @total_ordering from (not a < b) and (a != b).
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____llee____(self, other, NotImplemented=NotImplemented)
     |      Return a <= b.  Computed by @total_ordering from (a < b) or (a == b).
     |  
     |  ____lltt____(self, other)
     |      Return self<value.
     |  
     |  ____rreedduuccee____(self)
     |      Pickling should return the model._meta.fields instance of the field,
     |      not a new copy of that field. So, use the app registry to load the
     |      model and then the field back.
     |  
     |  ____rreepprr____(self)
     |      Display the module, class, and name of the field.
     |  
     |  ____ssttrr____(self)
     |      Return "app_label.model_label.field_name" for fields attached to
     |      models.
     |  
     |  ccaacchheedd__ccooll = <django.utils.functional.cached_property object>
     |  cclleeaann(self, value, model_instance)
     |      Convert the value's type and run validation. Validation errors
     |      from to_python() and validate() are propagated. Return the correct
     |      value if no error is raised.
     |  
     |  cclloonnee(self)
     |      Uses deconstruct() to clone a new copy of this Field.
     |      Will not preserve any class attachments/attribute names.
     |  
     |  ccoonnttrriibbuuttee__ttoo__ccllaassss(self, cls, name, private_only=False)
     |      Register the field with the model class it belongs to.
     |      
     |      If private_only is True, create a separate instance of this field
     |      for every subclass of cls, even if cls is not an abstract model.
     |  
     |  ddbb__cchheecckk(self, connection)
     |      Return the database column check constraint for this field, for the
     |      provided connection. Works the same way as db_type() for the case that
     |      get_internal_type() does not map to a preexisting model field.
     |  
     |  ddbb__ppaarraammeetteerrss(self, connection)
     |      Extension of db_type(), providing a range of different return values
     |      (type, checks). This will look at db_type(), allowing custom model
     |      fields to override it.
     |  
     |  ddbb__ttyyppee(self, connection)
     |      Return the database column data type for this field, for the provided
     |      connection.
     |  
     |  ddbb__ttyyppee__ppaarraammeetteerrss(self, connection)
     |  
     |  ddbb__ttyyppee__ssuuffffiixx(self, connection)
     |  
     |  ggeett__aattttnnaammee(self)
     |  
     |  ggeett__aattttnnaammee__ccoolluummnn(self)
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], limit_choices_to=None, ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |  
     |  ggeett__ccooll(self, alias, output_field=None)
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ddbb__pprreepp__ssaavvee(self, value, connection)
     |      Return field's value prepared for saving into a database.
     |  
     |  ggeett__ddbb__pprreepp__vvaalluuee(self, value, connection, prepared=False)
     |      Return field's value prepared for interacting with the database backend.
     |      
     |      Used by the default implementations of get_db_prep_save().
     |  
     |  ggeett__ddeeffaauulltt(self)
     |      Return the default value for this field.
     |  
     |  ggeett__ffiilltteerr__kkwwaarrggss__ffoorr__oobbjjeecctt(self, obj)
     |      Return a dict that when passed as kwargs to self.model.filter(), would
     |      yield all instances having the same value for this field as obj has.
     |  
     |  ggeett__ppkk__vvaalluuee__oonn__ssaavvee(self, instance)
     |      Hook to generate new PK values on save. This method is called when
     |      saving instances with no primary key value set. If this method returns
     |      something else than None, then the returned value is used when saving
     |      the new instance.
     |  
     |  hhaass__ddeeffaauulltt(self)
     |      Return a boolean of whether this field has a default value.
     |  
     |  pprree__ssaavvee(self, model_instance, add)
     |      Return field's value just before saving.
     |  
     |  rreell__ddbb__ttyyppee(self, connection)
     |      Return the data type that a related field pointing to this field should
     |      use. For example, this method is called by ForeignKey and OneToOneField
     |      to determine its data type.
     |  
     |  rruunn__vvaalliiddaattoorrss(self, value)
     |  
     |  ssaavvee__ffoorrmm__ddaattaa(self, instance, data)
     |  
     |  sseelleecctt__ffoorrmmaatt(self, compiler, sql, params)
     |      Custom format for select clauses. For example, GIS columns need to be
     |      selected as AsText(table.col) on MySQL as the table.col data can't be
     |      used by Django.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__nnaammee(self, name)
     |  
     |  vvaalliiddaattee(self, value, model_instance)
     |      Validate value and raise ValidationError if necessary. Subclasses
     |      should override this to provide validation logic.
     |  
     |  vvaalliiddaattoorrss = <django.utils.functional.cached_property object>
     |  vvaalluuee__ffrroomm__oobbjjeecctt(self, obj)
     |      Return the value of this field in the given model instance.
     |  
     |  vvaalluuee__ttoo__ssttrriinngg(self, obj)
     |      Return a string value of this field from the passed obj.
     |      This is used by the serialization framework.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Field:
     |  
     |  ddbb__ttaabblleessppaaccee
     |  
     |  ffllaattcchhooiicceess
     |      Flattened version of choices tuple.
     |  
     |  uunniiqquuee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Field:
     |  
     |  aauuttoo__ccrreeaattiioonn__ccoouunntteerr = -13
     |  
     |  ccllaassss__llooookkuuppss = {'contains': <class 'django.db.models.lookups.Contains...
     |  
     |  ccrreeaattiioonn__ccoouunntteerr = 74
     |  
     |  ddeeffaauulltt__eerrrroorr__mmeessssaaggeess = {'blank': 'This field cannot be blank.', 'inv...
     |  
     |  eemmppttyy__ssttrriinnggss__aalllloowweedd = True
     |  
     |  eemmppttyy__vvaalluueess = [None, '', [], (), {}]
     |  
     |  hhiiddddeenn = False
     |  
     |  mmaannyy__ttoo__mmaannyy = None
     |  
     |  mmaannyy__ttoo__oonnee = None
     |  
     |  oonnee__ttoo__mmaannyy = None
     |  
     |  oonnee__ttoo__oonnee = None
     |  
     |  rreellaatteedd__mmooddeell = None
     |  
     |  ssyysstteemm__cchheecckk__ddeepprreeccaatteedd__ddeettaaiillss = None
     |  
     |  ssyysstteemm__cchheecckk__rreemmoovveedd__ddeettaaiillss = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ttrraannssffoorrmm(self, lookup_name)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuuppss() from builtins.type
     |  
     |  rreeggiisstteerr__llooookkuupp(lookup, lookup_name=None) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  mmeerrggee__ddiiccttss(dicts)
     |      Merge dicts in reverse to preference the order of the original list. e.g.,
     |      merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class UUUUIIDDFFiieelldd(Field)
     |  UUIDField(verbose_name=None, **kwargs)
     |  
     |  Base class for all field types
     |  
     |  Method resolution order:
     |      UUIDField
     |      Field
     |      django.db.models.query_utils.RegisterLookupMixin
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, verbose_name=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ddeeccoonnssttrruucctt(self)
     |      Return enough information to recreate the field as a 4-tuple:
     |      
     |       * The name of the field on the model, if contribute_to_class() has
     |         been run.
     |       * The import path of the field, including the class:e.g.
     |         django.db.models.IntegerField This should be the most portable
     |         version, so less specific may be better.
     |       * A list of positional arguments.
     |       * A dict of keyword arguments.
     |      
     |      Note that the positional or keyword arguments must contain values of
     |      the following types (including inner values of collection types):
     |      
     |       * None, bool, str, int, float, complex, set, frozenset, list, tuple,
     |         dict
     |       * UUID
     |       * datetime.datetime (naive), datetime.date
     |       * top-level classes, top-level functions - will be referenced by their
     |         full import path
     |       * Storage instances - these have their own deconstruct() method
     |      
     |      This is because the values here must be serialized into a text format
     |      (possibly new Python code, possibly JSON) and these are the only types
     |      with encoding handlers defined.
     |      
     |      There's no need to return the exact way the field was instantiated this
     |      time, just ensure that the resulting field is the same - prefer keyword
     |      arguments over positional ones, and omit parameters with their default
     |      values.
     |  
     |  ffoorrmmffiieelldd(self, **kwargs)
     |      Return a django.forms.Field instance for this field.
     |  
     |  ggeett__ddbb__pprreepp__vvaalluuee(self, value, connection, prepared=False)
     |      Return field's value prepared for interacting with the database backend.
     |      
     |      Used by the default implementations of get_db_prep_save().
     |  
     |  ggeett__iinntteerrnnaall__ttyyppee(self)
     |  
     |  ttoo__ppyytthhoonn(self, value)
     |      Convert the input value into the expected Python data type, raising
     |      django.core.exceptions.ValidationError if the data can't be converted.
     |      Return the converted value. Subclasses should override this.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ddeeffaauulltt__eerrrroorr__mmeessssaaggeess = {'invalid': "'%(value)s' is not a valid UUID....
     |  
     |  ddeessccrriippttiioonn = 'Universally unique identifier'
     |  
     |  eemmppttyy__ssttrriinnggss__aalllloowweedd = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Field:
     |  
     |  ____ccooppyy____(self)
     |  
     |  ____ddeeeeppccooppyy____(self, memodict)
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggee____(self, other, NotImplemented=NotImplemented)
     |      Return a >= b.  Computed by @total_ordering from (not a < b).
     |  
     |  ____ggtt____(self, other, NotImplemented=NotImplemented)
     |      Return a > b.  Computed by @total_ordering from (not a < b) and (a != b).
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____llee____(self, other, NotImplemented=NotImplemented)
     |      Return a <= b.  Computed by @total_ordering from (a < b) or (a == b).
     |  
     |  ____lltt____(self, other)
     |      Return self<value.
     |  
     |  ____rreedduuccee____(self)
     |      Pickling should return the model._meta.fields instance of the field,
     |      not a new copy of that field. So, use the app registry to load the
     |      model and then the field back.
     |  
     |  ____rreepprr____(self)
     |      Display the module, class, and name of the field.
     |  
     |  ____ssttrr____(self)
     |      Return "app_label.model_label.field_name" for fields attached to
     |      models.
     |  
     |  ccaacchheedd__ccooll = <django.utils.functional.cached_property object>
     |  ccaasstt__ddbb__ttyyppee(self, connection)
     |      Return the data type to use in the Cast() function.
     |  
     |  cchheecckk(self, **kwargs)
     |  
     |  cclleeaann(self, value, model_instance)
     |      Convert the value's type and run validation. Validation errors
     |      from to_python() and validate() are propagated. Return the correct
     |      value if no error is raised.
     |  
     |  cclloonnee(self)
     |      Uses deconstruct() to clone a new copy of this Field.
     |      Will not preserve any class attachments/attribute names.
     |  
     |  ccoonnttrriibbuuttee__ttoo__ccllaassss(self, cls, name, private_only=False)
     |      Register the field with the model class it belongs to.
     |      
     |      If private_only is True, create a separate instance of this field
     |      for every subclass of cls, even if cls is not an abstract model.
     |  
     |  ddbb__cchheecckk(self, connection)
     |      Return the database column check constraint for this field, for the
     |      provided connection. Works the same way as db_type() for the case that
     |      get_internal_type() does not map to a preexisting model field.
     |  
     |  ddbb__ppaarraammeetteerrss(self, connection)
     |      Extension of db_type(), providing a range of different return values
     |      (type, checks). This will look at db_type(), allowing custom model
     |      fields to override it.
     |  
     |  ddbb__ttyyppee(self, connection)
     |      Return the database column data type for this field, for the provided
     |      connection.
     |  
     |  ddbb__ttyyppee__ppaarraammeetteerrss(self, connection)
     |  
     |  ddbb__ttyyppee__ssuuffffiixx(self, connection)
     |  
     |  ggeett__aattttnnaammee(self)
     |  
     |  ggeett__aattttnnaammee__ccoolluummnn(self)
     |  
     |  ggeett__cchhooiicceess(self, include_blank=True, blank_choice=[('', '---------')], limit_choices_to=None, ordering=())
     |      Return choices with a default blank choices included, for use
     |      as <select> choices for this field.
     |  
     |  ggeett__ccooll(self, alias, output_field=None)
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__ddbb__pprreepp__ssaavvee(self, value, connection)
     |      Return field's value prepared for saving into a database.
     |  
     |  ggeett__ddeeffaauulltt(self)
     |      Return the default value for this field.
     |  
     |  ggeett__ffiilltteerr__kkwwaarrggss__ffoorr__oobbjjeecctt(self, obj)
     |      Return a dict that when passed as kwargs to self.model.filter(), would
     |      yield all instances having the same value for this field as obj has.
     |  
     |  ggeett__ppkk__vvaalluuee__oonn__ssaavvee(self, instance)
     |      Hook to generate new PK values on save. This method is called when
     |      saving instances with no primary key value set. If this method returns
     |      something else than None, then the returned value is used when saving
     |      the new instance.
     |  
     |  ggeett__pprreepp__vvaalluuee(self, value)
     |      Perform preliminary non-db specific value checks and conversions.
     |  
     |  hhaass__ddeeffaauulltt(self)
     |      Return a boolean of whether this field has a default value.
     |  
     |  pprree__ssaavvee(self, model_instance, add)
     |      Return field's value just before saving.
     |  
     |  rreell__ddbb__ttyyppee(self, connection)
     |      Return the data type that a related field pointing to this field should
     |      use. For example, this method is called by ForeignKey and OneToOneField
     |      to determine its data type.
     |  
     |  rruunn__vvaalliiddaattoorrss(self, value)
     |  
     |  ssaavvee__ffoorrmm__ddaattaa(self, instance, data)
     |  
     |  sseelleecctt__ffoorrmmaatt(self, compiler, sql, params)
     |      Custom format for select clauses. For example, GIS columns need to be
     |      selected as AsText(table.col) on MySQL as the table.col data can't be
     |      used by Django.
     |  
     |  sseett__aattttrriibbuutteess__ffrroomm__nnaammee(self, name)
     |  
     |  vvaalliiddaattee(self, value, model_instance)
     |      Validate value and raise ValidationError if necessary. Subclasses
     |      should override this to provide validation logic.
     |  
     |  vvaalliiddaattoorrss = <django.utils.functional.cached_property object>
     |  vvaalluuee__ffrroomm__oobbjjeecctt(self, obj)
     |      Return the value of this field in the given model instance.
     |  
     |  vvaalluuee__ttoo__ssttrriinngg(self, obj)
     |      Return a string value of this field from the passed obj.
     |      This is used by the serialization framework.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Field:
     |  
     |  ddbb__ttaabblleessppaaccee
     |  
     |  ffllaattcchhooiicceess
     |      Flattened version of choices tuple.
     |  
     |  uunniiqquuee
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Field:
     |  
     |  aauuttoo__ccrreeaattiioonn__ccoouunntteerr = -13
     |  
     |  ccllaassss__llooookkuuppss = {'contains': <class 'django.db.models.lookups.Contains...
     |  
     |  ccrreeaattiioonn__ccoouunntteerr = 74
     |  
     |  ddeeffaauulltt__vvaalliiddaattoorrss = []
     |  
     |  eemmppttyy__vvaalluueess = [None, '', [], (), {}]
     |  
     |  hhiiddddeenn = False
     |  
     |  mmaannyy__ttoo__mmaannyy = None
     |  
     |  mmaannyy__ttoo__oonnee = None
     |  
     |  oonnee__ttoo__mmaannyy = None
     |  
     |  oonnee__ttoo__oonnee = None
     |  
     |  rreellaatteedd__mmooddeell = None
     |  
     |  ssyysstteemm__cchheecckk__ddeepprreeccaatteedd__ddeettaaiillss = None
     |  
     |  ssyysstteemm__cchheecckk__rreemmoovveedd__ddeettaaiillss = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuupp(self, lookup_name)
     |  
     |  ggeett__ttrraannssffoorrmm(self, lookup_name)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ggeett__llooookkuuppss() from builtins.type
     |  
     |  rreeggiisstteerr__llooookkuupp(lookup, lookup_name=None) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  mmeerrggee__ddiiccttss(dicts)
     |      Merge dicts in reverse to preference the order of the original list. e.g.,
     |      merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.query_utils.RegisterLookupMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class UUnniiqquueeCCoonnssttrraaiinntt(BaseConstraint)
     |  UniqueConstraint(*, fields, name, condition=None)
     |  
     |  Method resolution order:
     |      UniqueConstraint
     |      BaseConstraint
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____iinniitt____(self, *, fields, name, condition=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ccoonnssttrraaiinntt__ssqqll(self, model, schema_editor)
     |  
     |  ccrreeaattee__ssqqll(self, model, schema_editor)
     |  
     |  ddeeccoonnssttrruucctt(self)
     |  
     |  rreemmoovvee__ssqqll(self, model, schema_editor)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ____hhaasshh____ = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseConstraint:
     |  
     |  cclloonnee(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseConstraint:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class VVaalluuee(Expression)
     |  Value(*args, **kwargs)
     |  
     |  Represent a wrapped value as a node within an expression.
     |  
     |  Method resolution order:
     |      Value
     |      Expression
     |      BaseExpression
     |      Combinable
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, value, output_field=None)
     |      Arguments:
     |       * value: the value this expression represents. The value will be
     |         added into the sql parameter list and properly quoted.
     |      
     |       * output_field: an instance of the model field type that this
     |         expression will return, such as IntegerField() or CharField().
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  aass__ssqqll(self, compiler, connection)
     |      Responsible for returning a (sql, [params]) tuple to be included
     |      in the current query.
     |      
     |      Different backends can provide their own implementation, by
     |      providing an `as_{vendor}` method and patching the Expression:
     |      
     |      ```
     |      def override_as_sql(self, compiler, connection):
     |          # custom logic
     |          return super().as_sql(compiler, connection)
     |      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
     |      ```
     |      
     |      Arguments:
     |       * compiler: the query compiler responsible for generating the query.
     |         Must have a compile method, returning a (sql, [params]) tuple.
     |         Calling compiler(value) will return a quoted `value`.
     |      
     |       * connection: the database connection used for the current query.
     |      
     |      Return: (sql, params)
     |        Where `sql` is a string containing ordered sql parameters to be
     |        replaced with the elements of the list `params`.
     |  
     |  ggeett__ggrroouupp__bbyy__ccoollss(self)
     |  
     |  rreessoollvvee__eexxpprreessssiioonn(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)
     |      Provide the chance to do any preprocessing or validation before being
     |      added to the query.
     |      
     |      Arguments:
     |       * query: the backend query implementation
     |       * allow_joins: boolean allowing or denying use of joins
     |         in this query
     |       * reuse: a set of reusable joins for multijoins
     |       * summarize: a terminal aggregate clause
     |       * for_save: whether this expression about to be used in a save or update
     |      
     |      Return: an Expression to be added to the query.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseExpression:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettssttaattee____(self)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  aasscc(self, **kwargs)
     |  
     |  ccoonnttaaiinnss__aaggggrreeggaattee = <django.utils.functional.cached_property object>
     |  ccoonnttaaiinnss__ccoolluummnn__rreeffeerreenncceess = <django.utils.functional.cached_property object>
     |  ccoonnttaaiinnss__oovveerr__ccllaauussee = <django.utils.functional.cached_property object>
     |  ccoonnvveerrtt__vvaalluuee = <django.utils.functional.cached_property object>
     |  ccooppyy(self)
     |  
     |  ddeeccoonnssttrruucctt(obj)
     |      Return a 3-tuple of class import path, positional arguments,
     |      and keyword arguments.
     |  
     |  ddeesscc(self, **kwargs)
     |  
     |  ffllaatttteenn(self)
     |      Recursively yield this expression and all subexpressions, in
     |      depth-first order.
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__llooookkuupp(self, lookup)
     |  
     |  ggeett__ssoouurrccee__eexxpprreessssiioonnss(self)
     |  
     |  ggeett__ssoouurrccee__ffiieellddss(self)
     |      Return the underlying field types used by this aggregate.
     |  
     |  ggeett__ttrraannssffoorrmm(self, name)
     |  
     |  iiddeennttiittyy = <django.utils.functional.cached_property object>
     |  oouuttppuutt__ffiieelldd = <django.utils.functional.cached_property object>
     |  rreellaabbeelleedd__cclloonnee(self, change_map)
     |  
     |  rreevveerrssee__oorrddeerriinngg(self)
     |  
     |  sseett__ssoouurrccee__eexxpprreessssiioonnss(self, exprs)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from BaseExpression:
     |  
     |  ____nneeww____(cls, *args, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseExpression:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ffiieelldd
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from BaseExpression:
     |  
     |  ffiilltteerraabbllee = True
     |  
     |  iiss__ssuummmmaarryy = False
     |  
     |  wwiinnddooww__ccoommppaattiibbllee = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Combinable:
     |  
     |  ____aadddd____(self, other)
     |  
     |  ____aanndd____(self, other)
     |  
     |  ____mmoodd____(self, other)
     |  
     |  ____mmuull____(self, other)
     |  
     |  ____nneegg____(self)
     |  
     |  ____oorr____(self, other)
     |  
     |  ____ppooww____(self, other)
     |  
     |  ____rraadddd____(self, other)
     |  
     |  ____rraanndd____(self, other)
     |  
     |  ____rrmmoodd____(self, other)
     |  
     |  ____rrmmuull____(self, other)
     |  
     |  ____rroorr____(self, other)
     |  
     |  ____rrppooww____(self, other)
     |  
     |  ____rrssuubb____(self, other)
     |  
     |  ____rrttrruueeddiivv____(self, other)
     |  
     |  ____ssuubb____(self, other)
     |  
     |  ____ttrruueeddiivv____(self, other)
     |  
     |  bbiittaanndd(self, other)
     |  
     |  bbiittlleeffttsshhiifftt(self, other)
     |  
     |  bbiittoorr(self, other)
     |  
     |  bbiittrriigghhttsshhiifftt(self, other)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Combinable:
     |  
     |  AADDDD = '+'
     |  
     |  BBIITTAANNDD = '&'
     |  
     |  BBIITTLLEEFFTTSSHHIIFFTT = '<<'
     |  
     |  BBIITTOORR = '|'
     |  
     |  BBIITTRRIIGGHHTTSSHHIIFFTT = '>>'
     |  
     |  DDIIVV = '/'
     |  
     |  MMOODD = '%%'
     |  
     |  MMUULL = '*'
     |  
     |  PPOOWW = '^'
     |  
     |  SSUUBB = '-'
    
    class VVaalluueeRRaannggee(WindowFrame)
     |  ValueRange(*args, **kwargs)
     |  
     |  Model the frame clause in window expressions. There are two types of frame
     |  clauses which are subclasses, however, all processing and validation (by no
     |  means intended to be complete) is done here. Thus, providing an end for a
     |  frame is optional (the default is UNBOUNDED FOLLOWING, which is the last
     |  row in the frame).
     |  
     |  Method resolution order:
     |      ValueRange
     |      WindowFrame
     |      Expression
     |      BaseExpression
     |      Combinable
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  wwiinnddooww__ffrraammee__ssttaarrtt__eenndd(self, connection, start, end)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ffrraammee__ttyyppee = 'RANGE'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from WindowFrame:
     |  
     |  ____iinniitt____(self, start=None, end=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  aass__ssqqll(self, compiler, connection)
     |      Responsible for returning a (sql, [params]) tuple to be included
     |      in the current query.
     |      
     |      Different backends can provide their own implementation, by
     |      providing an `as_{vendor}` method and patching the Expression:
     |      
     |      ```
     |      def override_as_sql(self, compiler, connection):
     |          # custom logic
     |          return super().as_sql(compiler, connection)
     |      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
     |      ```
     |      
     |      Arguments:
     |       * compiler: the query compiler responsible for generating the query.
     |         Must have a compile method, returning a (sql, [params]) tuple.
     |         Calling compiler(value) will return a quoted `value`.
     |      
     |       * connection: the database connection used for the current query.
     |      
     |      Return: (sql, params)
     |        Where `sql` is a string containing ordered sql parameters to be
     |        replaced with the elements of the list `params`.
     |  
     |  ggeett__ggrroouupp__bbyy__ccoollss(self)
     |  
     |  ggeett__ssoouurrccee__eexxpprreessssiioonnss(self)
     |  
     |  sseett__ssoouurrccee__eexxpprreessssiioonnss(self, exprs)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from WindowFrame:
     |  
     |  tteemmppllaattee = '%(frame_type)s BETWEEN %(start)s AND %(end)s'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseExpression:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettssttaattee____(self)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  aasscc(self, **kwargs)
     |  
     |  ccoonnttaaiinnss__aaggggrreeggaattee = <django.utils.functional.cached_property object>
     |  ccoonnttaaiinnss__ccoolluummnn__rreeffeerreenncceess = <django.utils.functional.cached_property object>
     |  ccoonnttaaiinnss__oovveerr__ccllaauussee = <django.utils.functional.cached_property object>
     |  ccoonnvveerrtt__vvaalluuee = <django.utils.functional.cached_property object>
     |  ccooppyy(self)
     |  
     |  ddeeccoonnssttrruucctt(obj)
     |      Return a 3-tuple of class import path, positional arguments,
     |      and keyword arguments.
     |  
     |  ddeesscc(self, **kwargs)
     |  
     |  ffllaatttteenn(self)
     |      Recursively yield this expression and all subexpressions, in
     |      depth-first order.
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__llooookkuupp(self, lookup)
     |  
     |  ggeett__ssoouurrccee__ffiieellddss(self)
     |      Return the underlying field types used by this aggregate.
     |  
     |  ggeett__ttrraannssffoorrmm(self, name)
     |  
     |  iiddeennttiittyy = <django.utils.functional.cached_property object>
     |  oouuttppuutt__ffiieelldd = <django.utils.functional.cached_property object>
     |  rreellaabbeelleedd__cclloonnee(self, change_map)
     |  
     |  rreessoollvvee__eexxpprreessssiioonn(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)
     |      Provide the chance to do any preprocessing or validation before being
     |      added to the query.
     |      
     |      Arguments:
     |       * query: the backend query implementation
     |       * allow_joins: boolean allowing or denying use of joins
     |         in this query
     |       * reuse: a set of reusable joins for multijoins
     |       * summarize: a terminal aggregate clause
     |       * for_save: whether this expression about to be used in a save or update
     |      
     |      Return: an Expression to be added to the query.
     |  
     |  rreevveerrssee__oorrddeerriinngg(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from BaseExpression:
     |  
     |  ____nneeww____(cls, *args, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseExpression:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ffiieelldd
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from BaseExpression:
     |  
     |  ffiilltteerraabbllee = True
     |  
     |  iiss__ssuummmmaarryy = False
     |  
     |  wwiinnddooww__ccoommppaattiibbllee = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Combinable:
     |  
     |  ____aadddd____(self, other)
     |  
     |  ____aanndd____(self, other)
     |  
     |  ____mmoodd____(self, other)
     |  
     |  ____mmuull____(self, other)
     |  
     |  ____nneegg____(self)
     |  
     |  ____oorr____(self, other)
     |  
     |  ____ppooww____(self, other)
     |  
     |  ____rraadddd____(self, other)
     |  
     |  ____rraanndd____(self, other)
     |  
     |  ____rrmmoodd____(self, other)
     |  
     |  ____rrmmuull____(self, other)
     |  
     |  ____rroorr____(self, other)
     |  
     |  ____rrppooww____(self, other)
     |  
     |  ____rrssuubb____(self, other)
     |  
     |  ____rrttrruueeddiivv____(self, other)
     |  
     |  ____ssuubb____(self, other)
     |  
     |  ____ttrruueeddiivv____(self, other)
     |  
     |  bbiittaanndd(self, other)
     |  
     |  bbiittlleeffttsshhiifftt(self, other)
     |  
     |  bbiittoorr(self, other)
     |  
     |  bbiittrriigghhttsshhiifftt(self, other)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Combinable:
     |  
     |  AADDDD = '+'
     |  
     |  BBIITTAANNDD = '&'
     |  
     |  BBIITTLLEEFFTTSSHHIIFFTT = '<<'
     |  
     |  BBIITTOORR = '|'
     |  
     |  BBIITTRRIIGGHHTTSSHHIIFFTT = '>>'
     |  
     |  DDIIVV = '/'
     |  
     |  MMOODD = '%%'
     |  
     |  MMUULL = '*'
     |  
     |  PPOOWW = '^'
     |  
     |  SSUUBB = '-'
    
    class VVaarriiaannccee(django.db.models.functions.mixins.NumericOutputFieldMixin, Aggregate)
     |  Variance(*args, **kwargs)
     |  
     |  An SQL function call.
     |  
     |  Method resolution order:
     |      Variance
     |      django.db.models.functions.mixins.NumericOutputFieldMixin
     |      Aggregate
     |      django.db.models.expressions.Func
     |      django.db.models.expressions.SQLiteNumericMixin
     |      django.db.models.expressions.Expression
     |      django.db.models.expressions.BaseExpression
     |      django.db.models.expressions.Combinable
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, expression, sample=False, **extra)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  nnaammee = 'Variance'
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.functions.mixins.NumericOutputFieldMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Aggregate:
     |  
     |  aass__ssqqll(self, compiler, connection, **extra_context)
     |      Responsible for returning a (sql, [params]) tuple to be included
     |      in the current query.
     |      
     |      Different backends can provide their own implementation, by
     |      providing an `as_{vendor}` method and patching the Expression:
     |      
     |      ```
     |      def override_as_sql(self, compiler, connection):
     |          # custom logic
     |          return super().as_sql(compiler, connection)
     |      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
     |      ```
     |      
     |      Arguments:
     |       * compiler: the query compiler responsible for generating the query.
     |         Must have a compile method, returning a (sql, [params]) tuple.
     |         Calling compiler(value) will return a quoted `value`.
     |      
     |       * connection: the database connection used for the current query.
     |      
     |      Return: (sql, params)
     |        Where `sql` is a string containing ordered sql parameters to be
     |        replaced with the elements of the list `params`.
     |  
     |  ggeett__ggrroouupp__bbyy__ccoollss(self)
     |  
     |  ggeett__ssoouurrccee__eexxpprreessssiioonnss(self)
     |  
     |  ggeett__ssoouurrccee__ffiieellddss(self)
     |      Return the underlying field types used by this aggregate.
     |  
     |  rreessoollvvee__eexxpprreessssiioonn(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)
     |      Provide the chance to do any preprocessing or validation before being
     |      added to the query.
     |      
     |      Arguments:
     |       * query: the backend query implementation
     |       * allow_joins: boolean allowing or denying use of joins
     |         in this query
     |       * reuse: a set of reusable joins for multijoins
     |       * summarize: a terminal aggregate clause
     |       * for_save: whether this expression about to be used in a save or update
     |      
     |      Return: an Expression to be added to the query.
     |  
     |  sseett__ssoouurrccee__eexxpprreessssiioonnss(self, exprs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Aggregate:
     |  
     |  ddeeffaauulltt__aalliiaass
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Aggregate:
     |  
     |  aallllooww__ddiissttiinncctt = False
     |  
     |  ccoonnttaaiinnss__aaggggrreeggaattee = True
     |  
     |  ffiilltteerr__tteemmppllaattee = '%s FILTER (WHERE %%(filter)s)'
     |  
     |  tteemmppllaattee = '%(function)s(%(distinct)s%(expressions)s)'
     |  
     |  wwiinnddooww__ccoommppaattiibbllee = True
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.expressions.Func:
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ccooppyy(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.db.models.expressions.Func:
     |  
     |  aarrgg__jjooiinneerr = ', '
     |  
     |  aarriittyy = None
     |  
     |  ffuunnccttiioonn = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.expressions.SQLiteNumericMixin:
     |  
     |  aass__ssqqlliittee(self, compiler, connection, **extra_context)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.expressions.BaseExpression:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettssttaattee____(self)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  aasscc(self, **kwargs)
     |  
     |  ccoonnttaaiinnss__ccoolluummnn__rreeffeerreenncceess = <django.utils.functional.cached_property object>
     |  ccoonnttaaiinnss__oovveerr__ccllaauussee = <django.utils.functional.cached_property object>
     |  ccoonnvveerrtt__vvaalluuee = <django.utils.functional.cached_property object>
     |  ddeeccoonnssttrruucctt(obj)
     |      Return a 3-tuple of class import path, positional arguments,
     |      and keyword arguments.
     |  
     |  ddeesscc(self, **kwargs)
     |  
     |  ffllaatttteenn(self)
     |      Recursively yield this expression and all subexpressions, in
     |      depth-first order.
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__llooookkuupp(self, lookup)
     |  
     |  ggeett__ttrraannssffoorrmm(self, name)
     |  
     |  iiddeennttiittyy = <django.utils.functional.cached_property object>
     |  oouuttppuutt__ffiieelldd = <django.utils.functional.cached_property object>
     |  rreellaabbeelleedd__cclloonnee(self, change_map)
     |  
     |  rreevveerrssee__oorrddeerriinngg(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from django.db.models.expressions.BaseExpression:
     |  
     |  ____nneeww____(cls, *args, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.db.models.expressions.BaseExpression:
     |  
     |  ffiieelldd
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.db.models.expressions.BaseExpression:
     |  
     |  ffiilltteerraabbllee = True
     |  
     |  iiss__ssuummmmaarryy = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.db.models.expressions.Combinable:
     |  
     |  ____aadddd____(self, other)
     |  
     |  ____aanndd____(self, other)
     |  
     |  ____mmoodd____(self, other)
     |  
     |  ____mmuull____(self, other)
     |  
     |  ____nneegg____(self)
     |  
     |  ____oorr____(self, other)
     |  
     |  ____ppooww____(self, other)
     |  
     |  ____rraadddd____(self, other)
     |  
     |  ____rraanndd____(self, other)
     |  
     |  ____rrmmoodd____(self, other)
     |  
     |  ____rrmmuull____(self, other)
     |  
     |  ____rroorr____(self, other)
     |  
     |  ____rrppooww____(self, other)
     |  
     |  ____rrssuubb____(self, other)
     |  
     |  ____rrttrruueeddiivv____(self, other)
     |  
     |  ____ssuubb____(self, other)
     |  
     |  ____ttrruueeddiivv____(self, other)
     |  
     |  bbiittaanndd(self, other)
     |  
     |  bbiittlleeffttsshhiifftt(self, other)
     |  
     |  bbiittoorr(self, other)
     |  
     |  bbiittrriigghhttsshhiifftt(self, other)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.db.models.expressions.Combinable:
     |  
     |  AADDDD = '+'
     |  
     |  BBIITTAANNDD = '&'
     |  
     |  BBIITTLLEEFFTTSSHHIIFFTT = '<<'
     |  
     |  BBIITTOORR = '|'
     |  
     |  BBIITTRRIIGGHHTTSSHHIIFFTT = '>>'
     |  
     |  DDIIVV = '/'
     |  
     |  MMOODD = '%%'
     |  
     |  MMUULL = '*'
     |  
     |  PPOOWW = '^'
     |  
     |  SSUUBB = '-'
    
    class WWhheenn(Expression)
     |  When(*args, **kwargs)
     |  
     |  An expression that can be combined with other expressions.
     |  
     |  Method resolution order:
     |      When
     |      Expression
     |      BaseExpression
     |      Combinable
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, condition=None, then=None, **lookups)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  aass__ssqqll(self, compiler, connection, template=None, **extra_context)
     |      Responsible for returning a (sql, [params]) tuple to be included
     |      in the current query.
     |      
     |      Different backends can provide their own implementation, by
     |      providing an `as_{vendor}` method and patching the Expression:
     |      
     |      ```
     |      def override_as_sql(self, compiler, connection):
     |          # custom logic
     |          return super().as_sql(compiler, connection)
     |      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
     |      ```
     |      
     |      Arguments:
     |       * compiler: the query compiler responsible for generating the query.
     |         Must have a compile method, returning a (sql, [params]) tuple.
     |         Calling compiler(value) will return a quoted `value`.
     |      
     |       * connection: the database connection used for the current query.
     |      
     |      Return: (sql, params)
     |        Where `sql` is a string containing ordered sql parameters to be
     |        replaced with the elements of the list `params`.
     |  
     |  ggeett__ggrroouupp__bbyy__ccoollss(self)
     |  
     |  ggeett__ssoouurrccee__eexxpprreessssiioonnss(self)
     |  
     |  ggeett__ssoouurrccee__ffiieellddss(self)
     |      Return the underlying field types used by this aggregate.
     |  
     |  rreessoollvvee__eexxpprreessssiioonn(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)
     |      Provide the chance to do any preprocessing or validation before being
     |      added to the query.
     |      
     |      Arguments:
     |       * query: the backend query implementation
     |       * allow_joins: boolean allowing or denying use of joins
     |         in this query
     |       * reuse: a set of reusable joins for multijoins
     |       * summarize: a terminal aggregate clause
     |       * for_save: whether this expression about to be used in a save or update
     |      
     |      Return: an Expression to be added to the query.
     |  
     |  sseett__ssoouurrccee__eexxpprreessssiioonnss(self, exprs)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  tteemmppllaattee = 'WHEN %(condition)s THEN %(result)s'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseExpression:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettssttaattee____(self)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  aasscc(self, **kwargs)
     |  
     |  ccoonnttaaiinnss__aaggggrreeggaattee = <django.utils.functional.cached_property object>
     |  ccoonnttaaiinnss__ccoolluummnn__rreeffeerreenncceess = <django.utils.functional.cached_property object>
     |  ccoonnttaaiinnss__oovveerr__ccllaauussee = <django.utils.functional.cached_property object>
     |  ccoonnvveerrtt__vvaalluuee = <django.utils.functional.cached_property object>
     |  ccooppyy(self)
     |  
     |  ddeeccoonnssttrruucctt(obj)
     |      Return a 3-tuple of class import path, positional arguments,
     |      and keyword arguments.
     |  
     |  ddeesscc(self, **kwargs)
     |  
     |  ffllaatttteenn(self)
     |      Recursively yield this expression and all subexpressions, in
     |      depth-first order.
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__llooookkuupp(self, lookup)
     |  
     |  ggeett__ttrraannssffoorrmm(self, name)
     |  
     |  iiddeennttiittyy = <django.utils.functional.cached_property object>
     |  oouuttppuutt__ffiieelldd = <django.utils.functional.cached_property object>
     |  rreellaabbeelleedd__cclloonnee(self, change_map)
     |  
     |  rreevveerrssee__oorrddeerriinngg(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from BaseExpression:
     |  
     |  ____nneeww____(cls, *args, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseExpression:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ffiieelldd
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from BaseExpression:
     |  
     |  ffiilltteerraabbllee = True
     |  
     |  iiss__ssuummmmaarryy = False
     |  
     |  wwiinnddooww__ccoommppaattiibbllee = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Combinable:
     |  
     |  ____aadddd____(self, other)
     |  
     |  ____aanndd____(self, other)
     |  
     |  ____mmoodd____(self, other)
     |  
     |  ____mmuull____(self, other)
     |  
     |  ____nneegg____(self)
     |  
     |  ____oorr____(self, other)
     |  
     |  ____ppooww____(self, other)
     |  
     |  ____rraadddd____(self, other)
     |  
     |  ____rraanndd____(self, other)
     |  
     |  ____rrmmoodd____(self, other)
     |  
     |  ____rrmmuull____(self, other)
     |  
     |  ____rroorr____(self, other)
     |  
     |  ____rrppooww____(self, other)
     |  
     |  ____rrssuubb____(self, other)
     |  
     |  ____rrttrruueeddiivv____(self, other)
     |  
     |  ____ssuubb____(self, other)
     |  
     |  ____ttrruueeddiivv____(self, other)
     |  
     |  bbiittaanndd(self, other)
     |  
     |  bbiittlleeffttsshhiifftt(self, other)
     |  
     |  bbiittoorr(self, other)
     |  
     |  bbiittrriigghhttsshhiifftt(self, other)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Combinable:
     |  
     |  AADDDD = '+'
     |  
     |  BBIITTAANNDD = '&'
     |  
     |  BBIITTLLEEFFTTSSHHIIFFTT = '<<'
     |  
     |  BBIITTOORR = '|'
     |  
     |  BBIITTRRIIGGHHTTSSHHIIFFTT = '>>'
     |  
     |  DDIIVV = '/'
     |  
     |  MMOODD = '%%'
     |  
     |  MMUULL = '*'
     |  
     |  PPOOWW = '^'
     |  
     |  SSUUBB = '-'
    
    class WWiinnddooww(Expression)
     |  Window(*args, **kwargs)
     |  
     |  An expression that can be combined with other expressions.
     |  
     |  Method resolution order:
     |      Window
     |      Expression
     |      BaseExpression
     |      Combinable
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, expression, partition_by=None, order_by=None, frame=None, output_field=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  aass__ssqqll(self, compiler, connection, template=None)
     |      Responsible for returning a (sql, [params]) tuple to be included
     |      in the current query.
     |      
     |      Different backends can provide their own implementation, by
     |      providing an `as_{vendor}` method and patching the Expression:
     |      
     |      ```
     |      def override_as_sql(self, compiler, connection):
     |          # custom logic
     |          return super().as_sql(compiler, connection)
     |      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
     |      ```
     |      
     |      Arguments:
     |       * compiler: the query compiler responsible for generating the query.
     |         Must have a compile method, returning a (sql, [params]) tuple.
     |         Calling compiler(value) will return a quoted `value`.
     |      
     |       * connection: the database connection used for the current query.
     |      
     |      Return: (sql, params)
     |        Where `sql` is a string containing ordered sql parameters to be
     |        replaced with the elements of the list `params`.
     |  
     |  ggeett__ggrroouupp__bbyy__ccoollss(self)
     |  
     |  ggeett__ssoouurrccee__eexxpprreessssiioonnss(self)
     |  
     |  sseett__ssoouurrccee__eexxpprreessssiioonnss(self, exprs)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ccoonnttaaiinnss__aaggggrreeggaattee = False
     |  
     |  ccoonnttaaiinnss__oovveerr__ccllaauussee = True
     |  
     |  ffiilltteerraabbllee = False
     |  
     |  tteemmppllaattee = '%(expression)s OVER (%(window)s)'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseExpression:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettssttaattee____(self)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  aasscc(self, **kwargs)
     |  
     |  ccoonnttaaiinnss__ccoolluummnn__rreeffeerreenncceess = <django.utils.functional.cached_property object>
     |  ccoonnvveerrtt__vvaalluuee = <django.utils.functional.cached_property object>
     |  ccooppyy(self)
     |  
     |  ddeeccoonnssttrruucctt(obj)
     |      Return a 3-tuple of class import path, positional arguments,
     |      and keyword arguments.
     |  
     |  ddeesscc(self, **kwargs)
     |  
     |  ffllaatttteenn(self)
     |      Recursively yield this expression and all subexpressions, in
     |      depth-first order.
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__llooookkuupp(self, lookup)
     |  
     |  ggeett__ssoouurrccee__ffiieellddss(self)
     |      Return the underlying field types used by this aggregate.
     |  
     |  ggeett__ttrraannssffoorrmm(self, name)
     |  
     |  iiddeennttiittyy = <django.utils.functional.cached_property object>
     |  oouuttppuutt__ffiieelldd = <django.utils.functional.cached_property object>
     |  rreellaabbeelleedd__cclloonnee(self, change_map)
     |  
     |  rreessoollvvee__eexxpprreessssiioonn(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)
     |      Provide the chance to do any preprocessing or validation before being
     |      added to the query.
     |      
     |      Arguments:
     |       * query: the backend query implementation
     |       * allow_joins: boolean allowing or denying use of joins
     |         in this query
     |       * reuse: a set of reusable joins for multijoins
     |       * summarize: a terminal aggregate clause
     |       * for_save: whether this expression about to be used in a save or update
     |      
     |      Return: an Expression to be added to the query.
     |  
     |  rreevveerrssee__oorrddeerriinngg(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from BaseExpression:
     |  
     |  ____nneeww____(cls, *args, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseExpression:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ffiieelldd
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from BaseExpression:
     |  
     |  iiss__ssuummmmaarryy = False
     |  
     |  wwiinnddooww__ccoommppaattiibbllee = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Combinable:
     |  
     |  ____aadddd____(self, other)
     |  
     |  ____aanndd____(self, other)
     |  
     |  ____mmoodd____(self, other)
     |  
     |  ____mmuull____(self, other)
     |  
     |  ____nneegg____(self)
     |  
     |  ____oorr____(self, other)
     |  
     |  ____ppooww____(self, other)
     |  
     |  ____rraadddd____(self, other)
     |  
     |  ____rraanndd____(self, other)
     |  
     |  ____rrmmoodd____(self, other)
     |  
     |  ____rrmmuull____(self, other)
     |  
     |  ____rroorr____(self, other)
     |  
     |  ____rrppooww____(self, other)
     |  
     |  ____rrssuubb____(self, other)
     |  
     |  ____rrttrruueeddiivv____(self, other)
     |  
     |  ____ssuubb____(self, other)
     |  
     |  ____ttrruueeddiivv____(self, other)
     |  
     |  bbiittaanndd(self, other)
     |  
     |  bbiittlleeffttsshhiifftt(self, other)
     |  
     |  bbiittoorr(self, other)
     |  
     |  bbiittrriigghhttsshhiifftt(self, other)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Combinable:
     |  
     |  AADDDD = '+'
     |  
     |  BBIITTAANNDD = '&'
     |  
     |  BBIITTLLEEFFTTSSHHIIFFTT = '<<'
     |  
     |  BBIITTOORR = '|'
     |  
     |  BBIITTRRIIGGHHTTSSHHIIFFTT = '>>'
     |  
     |  DDIIVV = '/'
     |  
     |  MMOODD = '%%'
     |  
     |  MMUULL = '*'
     |  
     |  PPOOWW = '^'
     |  
     |  SSUUBB = '-'
    
    class WWiinnddoowwFFrraammee(Expression)
     |  WindowFrame(*args, **kwargs)
     |  
     |  Model the frame clause in window expressions. There are two types of frame
     |  clauses which are subclasses, however, all processing and validation (by no
     |  means intended to be complete) is done here. Thus, providing an end for a
     |  frame is optional (the default is UNBOUNDED FOLLOWING, which is the last
     |  row in the frame).
     |  
     |  Method resolution order:
     |      WindowFrame
     |      Expression
     |      BaseExpression
     |      Combinable
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, start=None, end=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____rreepprr____(self)
     |      Return repr(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  aass__ssqqll(self, compiler, connection)
     |      Responsible for returning a (sql, [params]) tuple to be included
     |      in the current query.
     |      
     |      Different backends can provide their own implementation, by
     |      providing an `as_{vendor}` method and patching the Expression:
     |      
     |      ```
     |      def override_as_sql(self, compiler, connection):
     |          # custom logic
     |          return super().as_sql(compiler, connection)
     |      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
     |      ```
     |      
     |      Arguments:
     |       * compiler: the query compiler responsible for generating the query.
     |         Must have a compile method, returning a (sql, [params]) tuple.
     |         Calling compiler(value) will return a quoted `value`.
     |      
     |       * connection: the database connection used for the current query.
     |      
     |      Return: (sql, params)
     |        Where `sql` is a string containing ordered sql parameters to be
     |        replaced with the elements of the list `params`.
     |  
     |  ggeett__ggrroouupp__bbyy__ccoollss(self)
     |  
     |  ggeett__ssoouurrccee__eexxpprreessssiioonnss(self)
     |  
     |  sseett__ssoouurrccee__eexxpprreessssiioonnss(self, exprs)
     |  
     |  wwiinnddooww__ffrraammee__ssttaarrtt__eenndd(self, connection, start, end)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  tteemmppllaattee = '%(frame_type)s BETWEEN %(start)s AND %(end)s'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseExpression:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettssttaattee____(self)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  aasscc(self, **kwargs)
     |  
     |  ccoonnttaaiinnss__aaggggrreeggaattee = <django.utils.functional.cached_property object>
     |  ccoonnttaaiinnss__ccoolluummnn__rreeffeerreenncceess = <django.utils.functional.cached_property object>
     |  ccoonnttaaiinnss__oovveerr__ccllaauussee = <django.utils.functional.cached_property object>
     |  ccoonnvveerrtt__vvaalluuee = <django.utils.functional.cached_property object>
     |  ccooppyy(self)
     |  
     |  ddeeccoonnssttrruucctt(obj)
     |      Return a 3-tuple of class import path, positional arguments,
     |      and keyword arguments.
     |  
     |  ddeesscc(self, **kwargs)
     |  
     |  ffllaatttteenn(self)
     |      Recursively yield this expression and all subexpressions, in
     |      depth-first order.
     |  
     |  ggeett__ddbb__ccoonnvveerrtteerrss(self, connection)
     |  
     |  ggeett__llooookkuupp(self, lookup)
     |  
     |  ggeett__ssoouurrccee__ffiieellddss(self)
     |      Return the underlying field types used by this aggregate.
     |  
     |  ggeett__ttrraannssffoorrmm(self, name)
     |  
     |  iiddeennttiittyy = <django.utils.functional.cached_property object>
     |  oouuttppuutt__ffiieelldd = <django.utils.functional.cached_property object>
     |  rreellaabbeelleedd__cclloonnee(self, change_map)
     |  
     |  rreessoollvvee__eexxpprreessssiioonn(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)
     |      Provide the chance to do any preprocessing or validation before being
     |      added to the query.
     |      
     |      Arguments:
     |       * query: the backend query implementation
     |       * allow_joins: boolean allowing or denying use of joins
     |         in this query
     |       * reuse: a set of reusable joins for multijoins
     |       * summarize: a terminal aggregate clause
     |       * for_save: whether this expression about to be used in a save or update
     |      
     |      Return: an Expression to be added to the query.
     |  
     |  rreevveerrssee__oorrddeerriinngg(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from BaseExpression:
     |  
     |  ____nneeww____(cls, *args, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseExpression:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ffiieelldd
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from BaseExpression:
     |  
     |  ffiilltteerraabbllee = True
     |  
     |  iiss__ssuummmmaarryy = False
     |  
     |  wwiinnddooww__ccoommppaattiibbllee = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Combinable:
     |  
     |  ____aadddd____(self, other)
     |  
     |  ____aanndd____(self, other)
     |  
     |  ____mmoodd____(self, other)
     |  
     |  ____mmuull____(self, other)
     |  
     |  ____nneegg____(self)
     |  
     |  ____oorr____(self, other)
     |  
     |  ____ppooww____(self, other)
     |  
     |  ____rraadddd____(self, other)
     |  
     |  ____rraanndd____(self, other)
     |  
     |  ____rrmmoodd____(self, other)
     |  
     |  ____rrmmuull____(self, other)
     |  
     |  ____rroorr____(self, other)
     |  
     |  ____rrppooww____(self, other)
     |  
     |  ____rrssuubb____(self, other)
     |  
     |  ____rrttrruueeddiivv____(self, other)
     |  
     |  ____ssuubb____(self, other)
     |  
     |  ____ttrruueeddiivv____(self, other)
     |  
     |  bbiittaanndd(self, other)
     |  
     |  bbiittlleeffttsshhiifftt(self, other)
     |  
     |  bbiittoorr(self, other)
     |  
     |  bbiittrriigghhttsshhiifftt(self, other)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Combinable:
     |  
     |  AADDDD = '+'
     |  
     |  BBIITTAANNDD = '&'
     |  
     |  BBIITTLLEEFFTTSSHHIIFFTT = '<<'
     |  
     |  BBIITTOORR = '|'
     |  
     |  BBIITTRRIIGGHHTTSSHHIIFFTT = '>>'
     |  
     |  DDIIVV = '/'
     |  
     |  MMOODD = '%%'
     |  
     |  MMUULL = '*'
     |  
     |  PPOOWW = '^'
     |  
     |  SSUUBB = '-'

FFUUNNCCTTIIOONNSS
    CCAASSCCAADDEE(collector, field, sub_objs, using)
    
    DDOO__NNOOTTHHIINNGG(collector, field, sub_objs, using)
    
    PPRROOTTEECCTT(collector, field, sub_objs, using)
    
    SSEETT(value)
    
    SSEETT__DDEEFFAAUULLTT(collector, field, sub_objs, using)
    
    SSEETT__NNUULLLL(collector, field, sub_objs, using)
    
    pprreeffeettcchh__rreellaatteedd__oobbjjeeccttss(model_instances, *related_lookups)
        Populate prefetched object caches for a list of model instances based on
        the lookups/Prefetch instances given.

DDAATTAA
    BBLLAANNKK__CCHHOOIICCEE__DDAASSHH = [('', '---------')]
    DDEEFFEERRRREEDD = <Deferred field>
    ____aallll____ = ['Aggregate', 'Avg', 'Count', 'Max', 'Min', 'StdDev', 'Sum',...

FFIILLEE
    /home/sam/.local/lib/python3.7/site-packages/django/db/models/__init__.py

